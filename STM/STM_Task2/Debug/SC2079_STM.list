
SC2079_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013708  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d0  08013898  08013898  00014898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a68  08014a68  00016348  2**0
                  CONTENTS
  4 .ARM          00000008  08014a68  08014a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a70  08014a70  00016348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014a70  08014a70  00015a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014a74  08014a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000348  20000000  08014a78  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00016348  2**0
                  CONTENTS
 10 .bss          00005360  20000348  20000348  00016348  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200056a8  200056a8  00016348  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00016348  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e2a6  00000000  00000000  00016378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f93  00000000  00000000  0003461e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf8  00000000  00000000  000385b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015f0  00000000  00000000  0003a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000061f0  00000000  00000000  0003b7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a20  00000000  00000000  00041990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebb7c  00000000  00000000  000623b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014df2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008be4  00000000  00000000  0014df70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00156b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000348 	.word	0x20000348
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013880 	.word	0x08013880

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000034c 	.word	0x2000034c
 80001cc:	08013880 	.word	0x08013880

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f006 f85b 	bl	8007038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f981 	bl	8001288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 fd63 	bl	8001a50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f8a:	f000 fd41 	bl	8001a10 <MX_DMA_Init>
  MX_TIM8_Init();
 8000f8e:	f000 fc53 	bl	8001838 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f92:	f000 fb03 	bl	800159c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000f96:	f000 fd11 	bl	80019bc <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000f9a:	f000 fc17 	bl	80017cc <MX_TIM6_Init>
  MX_TIM1_Init();
 8000f9e:	f000 fa5f 	bl	8001460 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000fa2:	f000 fba3 	bl	80016ec <MX_TIM4_Init>
  MX_TIM3_Init();
 8000fa6:	f000 fb4d 	bl	8001644 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000faa:	f000 fa2b 	bl	8001404 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000fae:	f000 f9c9 	bl	8001344 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000fb2:	f00e fdff 	bl	800fbb4 <OLED_Init>

  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, RX_BUFFER_SIZE);
 8000fb6:	4b75      	ldr	r3, [pc, #468]	@ (800118c <main+0x214>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4974      	ldr	r1, [pc, #464]	@ (8001190 <main+0x218>)
 8000fbe:	4875      	ldr	r0, [pc, #468]	@ (8001194 <main+0x21c>)
 8000fc0:	f00a fe69 	bl	800bc96 <HAL_UART_Receive_IT>
  ICM20948_init(&hi2c1,0,GYRO_FULL_SCALE_2000DPS);
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4873      	ldr	r0, [pc, #460]	@ (8001198 <main+0x220>)
 8000fca:	f00e fbee 	bl	800f7aa <ICM20948_init>

  // initialise command queue
    curCmd.index = 100;
 8000fce:	4b73      	ldr	r3, [pc, #460]	@ (800119c <main+0x224>)
 8000fd0:	2264      	movs	r2, #100	@ 0x64
 8000fd2:	701a      	strb	r2, [r3, #0]
    curCmd.val = 0;
 8000fd4:	4b71      	ldr	r3, [pc, #452]	@ (800119c <main+0x224>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	805a      	strh	r2, [r3, #2]

    cmdq.head = 0;
 8000fda:	4b71      	ldr	r3, [pc, #452]	@ (80011a0 <main+0x228>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
    cmdq.tail = 0;
 8000fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80011a0 <main+0x228>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	705a      	strb	r2, [r3, #1]
    cmdq.size = CMD_BUFFER_SIZE;
 8000fe6:	4b6f      	ldr	r3, [pc, #444]	@ (80011a4 <main+0x22c>)
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	4b6d      	ldr	r3, [pc, #436]	@ (80011a0 <main+0x228>)
 8000fec:	709a      	strb	r2, [r3, #2]
    for (int i = 0; i < CMD_BUFFER_SIZE; i++) {
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	e00c      	b.n	800100e <main+0x96>
  	  Command cmd;
  	  cmd.index = 100;
 8000ff4:	2364      	movs	r3, #100	@ 0x64
 8000ff6:	703b      	strb	r3, [r7, #0]
  	  cmd.val = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	807b      	strh	r3, [r7, #2]
  	  cmdq.buffer[i] = cmd;
 8000ffc:	4a68      	ldr	r2, [pc, #416]	@ (80011a0 <main+0x228>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < CMD_BUFFER_SIZE; i++) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3301      	adds	r3, #1
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b65      	ldr	r3, [pc, #404]	@ (80011a4 <main+0x22c>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4293      	cmp	r3, r2
 8001018:	dbec      	blt.n	8000ff4 <main+0x7c>
    }

  PIDinit(&pidTurn, 2.5, 0.0,0.8);
 800101a:	ed9f 1a63 	vldr	s2, [pc, #396]	@ 80011a8 <main+0x230>
 800101e:	eddf 0a63 	vldr	s1, [pc, #396]	@ 80011ac <main+0x234>
 8001022:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8001026:	4862      	ldr	r0, [pc, #392]	@ (80011b0 <main+0x238>)
 8001028:	f001 fd60 	bl	8002aec <PIDinit>
  PIDinit(&pidSlow, 2.5, 0.0,0);
 800102c:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 80011ac <main+0x234>
 8001030:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 80011ac <main+0x234>
 8001034:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8001038:	485e      	ldr	r0, [pc, #376]	@ (80011b4 <main+0x23c>)
 800103a:	f001 fd57 	bl	8002aec <PIDinit>
  PIDinit(&pidFast, 1.5, 0.0,0);
 800103e:	ed9f 1a5b 	vldr	s2, [pc, #364]	@ 80011ac <main+0x234>
 8001042:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 80011ac <main+0x234>
 8001046:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800104a:	485b      	ldr	r0, [pc, #364]	@ (80011b8 <main+0x240>)
 800104c:	f001 fd4e 	bl	8002aec <PIDinit>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //Start PWM timer for Rear Motor Left
 8001050:	2108      	movs	r1, #8
 8001052:	485a      	ldr	r0, [pc, #360]	@ (80011bc <main+0x244>)
 8001054:	f009 f91c 	bl	800a290 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4); //Start PWM timer for Rear Motor Right
 8001058:	210c      	movs	r1, #12
 800105a:	4858      	ldr	r0, [pc, #352]	@ (80011bc <main+0x244>)
 800105c:	f009 f918 	bl	800a290 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //Start PWM timer for Servo Motor
 8001060:	210c      	movs	r1, #12
 8001062:	4857      	ldr	r0, [pc, #348]	@ (80011c0 <main+0x248>)
 8001064:	f009 f914 	bl	800a290 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001068:	213c      	movs	r1, #60	@ 0x3c
 800106a:	4856      	ldr	r0, [pc, #344]	@ (80011c4 <main+0x24c>)
 800106c:	f009 fc00 	bl	800a870 <HAL_TIM_Encoder_Start>

  __RESET_SMOTOR_ANGLE(&htim1);
 8001070:	4b53      	ldr	r3, [pc, #332]	@ (80011c0 <main+0x248>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	228e      	movs	r2, #142	@ 0x8e
 8001076:	641a      	str	r2, [r3, #64]	@ 0x40
 8001078:	20fa      	movs	r0, #250	@ 0xfa
 800107a:	f006 f84f 	bl	800711c <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800107e:	f00b fdb9 	bl	800cbf4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001082:	4a51      	ldr	r2, [pc, #324]	@ (80011c8 <main+0x250>)
 8001084:	2100      	movs	r1, #0
 8001086:	4851      	ldr	r0, [pc, #324]	@ (80011cc <main+0x254>)
 8001088:	f00b fdfe 	bl	800cc88 <osThreadNew>
 800108c:	4603      	mov	r3, r0
 800108e:	4a50      	ldr	r2, [pc, #320]	@ (80011d0 <main+0x258>)
 8001090:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motors, NULL, &MotorTask_attributes);
 8001092:	4a50      	ldr	r2, [pc, #320]	@ (80011d4 <main+0x25c>)
 8001094:	2100      	movs	r1, #0
 8001096:	4850      	ldr	r0, [pc, #320]	@ (80011d8 <main+0x260>)
 8001098:	f00b fdf6 	bl	800cc88 <osThreadNew>
 800109c:	4603      	mov	r3, r0
 800109e:	4a4f      	ldr	r2, [pc, #316]	@ (80011dc <main+0x264>)
 80010a0:	6013      	str	r3, [r2, #0]

  /* creation of OLED */
  OLEDHandle = osThreadNew(show, NULL, &OLED_attributes);
 80010a2:	4a4f      	ldr	r2, [pc, #316]	@ (80011e0 <main+0x268>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	484f      	ldr	r0, [pc, #316]	@ (80011e4 <main+0x26c>)
 80010a8:	f00b fdee 	bl	800cc88 <osThreadNew>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a4e      	ldr	r2, [pc, #312]	@ (80011e8 <main+0x270>)
 80010b0:	6013      	str	r3, [r2, #0]

  /* creation of UltrasonicTask */
  UltrasonicTaskHandle = osThreadNew(ultrasonic, NULL, &UltrasonicTask_attributes);
 80010b2:	4a4e      	ldr	r2, [pc, #312]	@ (80011ec <main+0x274>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	484e      	ldr	r0, [pc, #312]	@ (80011f0 <main+0x278>)
 80010b8:	f00b fde6 	bl	800cc88 <osThreadNew>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a4d      	ldr	r2, [pc, #308]	@ (80011f4 <main+0x27c>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* creation of LEncoderTask */
  LEncoderTaskHandle = osThreadNew(lencoder, NULL, &LEncoderTask_attributes);
 80010c2:	4a4d      	ldr	r2, [pc, #308]	@ (80011f8 <main+0x280>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	484d      	ldr	r0, [pc, #308]	@ (80011fc <main+0x284>)
 80010c8:	f00b fdde 	bl	800cc88 <osThreadNew>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001200 <main+0x288>)
 80010d0:	6013      	str	r3, [r2, #0]

  /* creation of REncoderTask */
  REncoderTaskHandle = osThreadNew(rencoder, NULL, &REncoderTask_attributes);
 80010d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001204 <main+0x28c>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	484c      	ldr	r0, [pc, #304]	@ (8001208 <main+0x290>)
 80010d8:	f00b fdd6 	bl	800cc88 <osThreadNew>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a4b      	ldr	r2, [pc, #300]	@ (800120c <main+0x294>)
 80010e0:	6013      	str	r3, [r2, #0]

  /* creation of IRTask */
  IRTaskHandle = osThreadNew(infrared, NULL, &IRTask_attributes);
 80010e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001210 <main+0x298>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	484b      	ldr	r0, [pc, #300]	@ (8001214 <main+0x29c>)
 80010e8:	f00b fdce 	bl	800cc88 <osThreadNew>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001218 <main+0x2a0>)
 80010f0:	6013      	str	r3, [r2, #0]

  /* creation of CmdProcessorTas */
  CmdProcessorTasHandle = osThreadNew(processCmd, NULL, &CmdProcessorTas_attributes);
 80010f2:	4a4a      	ldr	r2, [pc, #296]	@ (800121c <main+0x2a4>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	484a      	ldr	r0, [pc, #296]	@ (8001220 <main+0x2a8>)
 80010f8:	f00b fdc6 	bl	800cc88 <osThreadNew>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a49      	ldr	r2, [pc, #292]	@ (8001224 <main+0x2ac>)
 8001100:	6013      	str	r3, [r2, #0]

  /* creation of MoveDistTask */
  MoveDistTaskHandle = osThreadNew(moveDist, NULL, &MoveDistTask_attributes);
 8001102:	4a49      	ldr	r2, [pc, #292]	@ (8001228 <main+0x2b0>)
 8001104:	2100      	movs	r1, #0
 8001106:	4849      	ldr	r0, [pc, #292]	@ (800122c <main+0x2b4>)
 8001108:	f00b fdbe 	bl	800cc88 <osThreadNew>
 800110c:	4603      	mov	r3, r0
 800110e:	4a48      	ldr	r2, [pc, #288]	@ (8001230 <main+0x2b8>)
 8001110:	6013      	str	r3, [r2, #0]

  /* creation of MoveFLTask */
  MoveFLTaskHandle = osThreadNew(moveFL, NULL, &MoveFLTask_attributes);
 8001112:	4a48      	ldr	r2, [pc, #288]	@ (8001234 <main+0x2bc>)
 8001114:	2100      	movs	r1, #0
 8001116:	4848      	ldr	r0, [pc, #288]	@ (8001238 <main+0x2c0>)
 8001118:	f00b fdb6 	bl	800cc88 <osThreadNew>
 800111c:	4603      	mov	r3, r0
 800111e:	4a47      	ldr	r2, [pc, #284]	@ (800123c <main+0x2c4>)
 8001120:	6013      	str	r3, [r2, #0]

  /* creation of MoveFRTask */
  MoveFRTaskHandle = osThreadNew(moveFR, NULL, &MoveFRTask_attributes);
 8001122:	4a47      	ldr	r2, [pc, #284]	@ (8001240 <main+0x2c8>)
 8001124:	2100      	movs	r1, #0
 8001126:	4847      	ldr	r0, [pc, #284]	@ (8001244 <main+0x2cc>)
 8001128:	f00b fdae 	bl	800cc88 <osThreadNew>
 800112c:	4603      	mov	r3, r0
 800112e:	4a46      	ldr	r2, [pc, #280]	@ (8001248 <main+0x2d0>)
 8001130:	6013      	str	r3, [r2, #0]

  /* creation of MoveBLTask */
  MoveBLTaskHandle = osThreadNew(moveBL, NULL, &MoveBLTask_attributes);
 8001132:	4a46      	ldr	r2, [pc, #280]	@ (800124c <main+0x2d4>)
 8001134:	2100      	movs	r1, #0
 8001136:	4846      	ldr	r0, [pc, #280]	@ (8001250 <main+0x2d8>)
 8001138:	f00b fda6 	bl	800cc88 <osThreadNew>
 800113c:	4603      	mov	r3, r0
 800113e:	4a45      	ldr	r2, [pc, #276]	@ (8001254 <main+0x2dc>)
 8001140:	6013      	str	r3, [r2, #0]

  /* creation of MoveBRTask */
  MoveBRTaskHandle = osThreadNew(moveBR, NULL, &MoveBRTask_attributes);
 8001142:	4a45      	ldr	r2, [pc, #276]	@ (8001258 <main+0x2e0>)
 8001144:	2100      	movs	r1, #0
 8001146:	4845      	ldr	r0, [pc, #276]	@ (800125c <main+0x2e4>)
 8001148:	f00b fd9e 	bl	800cc88 <osThreadNew>
 800114c:	4603      	mov	r3, r0
 800114e:	4a44      	ldr	r2, [pc, #272]	@ (8001260 <main+0x2e8>)
 8001150:	6013      	str	r3, [r2, #0]

  /* creation of MoveDistObsIR */
  MoveDistObsIRHandle = osThreadNew(moveDistObsIR, NULL, &MoveDistObsIR_attributes);
 8001152:	4a44      	ldr	r2, [pc, #272]	@ (8001264 <main+0x2ec>)
 8001154:	2100      	movs	r1, #0
 8001156:	4844      	ldr	r0, [pc, #272]	@ (8001268 <main+0x2f0>)
 8001158:	f00b fd96 	bl	800cc88 <osThreadNew>
 800115c:	4603      	mov	r3, r0
 800115e:	4a43      	ldr	r2, [pc, #268]	@ (800126c <main+0x2f4>)
 8001160:	6013      	str	r3, [r2, #0]

  /* creation of MoveDistObsUSTa */
  MoveDistObsUSTaHandle = osThreadNew(moveDistObsUS, NULL, &MoveDistObsUSTa_attributes);
 8001162:	4a43      	ldr	r2, [pc, #268]	@ (8001270 <main+0x2f8>)
 8001164:	2100      	movs	r1, #0
 8001166:	4843      	ldr	r0, [pc, #268]	@ (8001274 <main+0x2fc>)
 8001168:	f00b fd8e 	bl	800cc88 <osThreadNew>
 800116c:	4603      	mov	r3, r0
 800116e:	4a42      	ldr	r2, [pc, #264]	@ (8001278 <main+0x300>)
 8001170:	6013      	str	r3, [r2, #0]

  /* creation of FastestCarTask */
  FastestCarTaskHandle = osThreadNew(fastestCar, NULL, &FastestCarTask_attributes);
 8001172:	4a42      	ldr	r2, [pc, #264]	@ (800127c <main+0x304>)
 8001174:	2100      	movs	r1, #0
 8001176:	4842      	ldr	r0, [pc, #264]	@ (8001280 <main+0x308>)
 8001178:	f00b fd86 	bl	800cc88 <osThreadNew>
 800117c:	4603      	mov	r3, r0
 800117e:	4a41      	ldr	r2, [pc, #260]	@ (8001284 <main+0x30c>)
 8001180:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001182:	f00b fd5b 	bl	800cc3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001186:	bf00      	nop
 8001188:	e7fd      	b.n	8001186 <main+0x20e>
 800118a:	bf00      	nop
 800118c:	20000003 	.word	0x20000003
 8001190:	200006b4 	.word	0x200006b4
 8001194:	20000610 	.word	0x20000610
 8001198:	2000040c 	.word	0x2000040c
 800119c:	200007b4 	.word	0x200007b4
 80011a0:	200007b8 	.word	0x200007b8
 80011a4:	2000015c 	.word	0x2000015c
 80011a8:	3f4ccccd 	.word	0x3f4ccccd
 80011ac:	00000000 	.word	0x00000000
 80011b0:	20000758 	.word	0x20000758
 80011b4:	2000076c 	.word	0x2000076c
 80011b8:	20000780 	.word	0x20000780
 80011bc:	200005c8 	.word	0x200005c8
 80011c0:	20000460 	.word	0x20000460
 80011c4:	200004a8 	.word	0x200004a8
 80011c8:	08013a04 	.word	0x08013a04
 80011cc:	08003c51 	.word	0x08003c51
 80011d0:	20000658 	.word	0x20000658
 80011d4:	08013a28 	.word	0x08013a28
 80011d8:	08003c75 	.word	0x08003c75
 80011dc:	2000065c 	.word	0x2000065c
 80011e0:	08013a4c 	.word	0x08013a4c
 80011e4:	08003c81 	.word	0x08003c81
 80011e8:	20000660 	.word	0x20000660
 80011ec:	08013a70 	.word	0x08013a70
 80011f0:	08003d79 	.word	0x08003d79
 80011f4:	20000664 	.word	0x20000664
 80011f8:	08013a94 	.word	0x08013a94
 80011fc:	08003de5 	.word	0x08003de5
 8001200:	20000668 	.word	0x20000668
 8001204:	08013ab8 	.word	0x08013ab8
 8001208:	08003df5 	.word	0x08003df5
 800120c:	2000066c 	.word	0x2000066c
 8001210:	08013adc 	.word	0x08013adc
 8001214:	08003e01 	.word	0x08003e01
 8001218:	20000670 	.word	0x20000670
 800121c:	08013b00 	.word	0x08013b00
 8001220:	08003e75 	.word	0x08003e75
 8001224:	20000674 	.word	0x20000674
 8001228:	08013b24 	.word	0x08013b24
 800122c:	08004295 	.word	0x08004295
 8001230:	20000678 	.word	0x20000678
 8001234:	08013b48 	.word	0x08013b48
 8001238:	08004519 	.word	0x08004519
 800123c:	2000067c 	.word	0x2000067c
 8001240:	08013b6c 	.word	0x08013b6c
 8001244:	08004951 	.word	0x08004951
 8001248:	20000680 	.word	0x20000680
 800124c:	08013b90 	.word	0x08013b90
 8001250:	08004d9d 	.word	0x08004d9d
 8001254:	20000684 	.word	0x20000684
 8001258:	08013bb4 	.word	0x08013bb4
 800125c:	080051d5 	.word	0x080051d5
 8001260:	20000688 	.word	0x20000688
 8001264:	08013bd8 	.word	0x08013bd8
 8001268:	08005631 	.word	0x08005631
 800126c:	2000068c 	.word	0x2000068c
 8001270:	08013bfc 	.word	0x08013bfc
 8001274:	08005701 	.word	0x08005701
 8001278:	20000690 	.word	0x20000690
 800127c:	08013c20 	.word	0x08013c20
 8001280:	080057ed 	.word	0x080057ed
 8001284:	20000694 	.word	0x20000694

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	@ 0x50
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	2230      	movs	r2, #48	@ 0x30
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f00f fac9 	bl	801082e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <SystemClock_Config+0xb4>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	4a21      	ldr	r2, [pc, #132]	@ (800133c <SystemClock_Config+0xb4>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80012bc:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <SystemClock_Config+0xb4>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <SystemClock_Config+0xb8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001340 <SystemClock_Config+0xb8>)
 80012d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <SystemClock_Config+0xb8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e8:	2301      	movs	r3, #1
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ec:	2310      	movs	r3, #16
 80012ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f008 fa5f 	bl	80097bc <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001304:	f005 fa8c 	bl	8006820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f008 fcc2 	bl	8009cac <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800132e:	f005 fa77 	bl	8006820 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3750      	adds	r7, #80	@ 0x50
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000

08001344 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134a:	463b      	mov	r3, r7
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001356:	4b28      	ldr	r3, [pc, #160]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 8001358:	4a28      	ldr	r2, [pc, #160]	@ (80013fc <MX_ADC1_Init+0xb8>)
 800135a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800135c:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001362:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001368:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 800136a:	2201      	movs	r2, #1
 800136c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800136e:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 8001370:	2201      	movs	r2, #1
 8001372:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001374:	4b20      	ldr	r3, [pc, #128]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800137c:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 800137e:	2200      	movs	r2, #0
 8001380:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001382:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 8001384:	4a1e      	ldr	r2, [pc, #120]	@ (8001400 <MX_ADC1_Init+0xbc>)
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001388:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800138e:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 8001390:	2202      	movs	r2, #2
 8001392:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001394:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800139c:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 800139e:	2201      	movs	r2, #1
 80013a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a2:	4815      	ldr	r0, [pc, #84]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 80013a4:	f005 fede 	bl	8007164 <HAL_ADC_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013ae:	f005 fa37 	bl	8006820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013b2:	230b      	movs	r3, #11
 80013b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 80013c4:	f006 f82c 	bl	8007420 <HAL_ADC_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013ce:	f005 fa27 	bl	8006820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80013d2:	230c      	movs	r3, #12
 80013d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <MX_ADC1_Init+0xb4>)
 80013e0:	f006 f81e 	bl	8007420 <HAL_ADC_ConfigChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80013ea:	f005 fa19 	bl	8006820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000364 	.word	0x20000364
 80013fc:	40012000 	.word	0x40012000
 8001400:	0f000001 	.word	0x0f000001

08001404 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_I2C1_Init+0x50>)
 800140a:	4a13      	ldr	r2, [pc, #76]	@ (8001458 <MX_I2C1_Init+0x54>)
 800140c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_I2C1_Init+0x50>)
 8001410:	4a12      	ldr	r2, [pc, #72]	@ (800145c <MX_I2C1_Init+0x58>)
 8001412:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_I2C1_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <MX_I2C1_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <MX_I2C1_Init+0x50>)
 8001422:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001426:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <MX_I2C1_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <MX_I2C1_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	@ (8001454 <MX_I2C1_Init+0x50>)
 8001442:	f007 f96f 	bl	8008724 <HAL_I2C_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800144c:	f005 f9e8 	bl	8006820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000040c 	.word	0x2000040c
 8001458:	40005400 	.word	0x40005400
 800145c:	000186a0 	.word	0x000186a0

08001460 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b096      	sub	sp, #88	@ 0x58
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2220      	movs	r2, #32
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f00f f9c8 	bl	801082e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800149e:	4b3d      	ldr	r3, [pc, #244]	@ (8001594 <MX_TIM1_Init+0x134>)
 80014a0:	4a3d      	ldr	r2, [pc, #244]	@ (8001598 <MX_TIM1_Init+0x138>)
 80014a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80014a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001594 <MX_TIM1_Init+0x134>)
 80014a6:	22a0      	movs	r2, #160	@ 0xa0
 80014a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001594 <MX_TIM1_Init+0x134>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80014b0:	4b38      	ldr	r3, [pc, #224]	@ (8001594 <MX_TIM1_Init+0x134>)
 80014b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b36      	ldr	r3, [pc, #216]	@ (8001594 <MX_TIM1_Init+0x134>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014be:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <MX_TIM1_Init+0x134>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c4:	4b33      	ldr	r3, [pc, #204]	@ (8001594 <MX_TIM1_Init+0x134>)
 80014c6:	2280      	movs	r2, #128	@ 0x80
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ca:	4832      	ldr	r0, [pc, #200]	@ (8001594 <MX_TIM1_Init+0x134>)
 80014cc:	f008 fdce 	bl	800a06c <HAL_TIM_Base_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014d6:	f005 f9a3 	bl	8006820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014e4:	4619      	mov	r1, r3
 80014e6:	482b      	ldr	r0, [pc, #172]	@ (8001594 <MX_TIM1_Init+0x134>)
 80014e8:	f009 fc9e 	bl	800ae28 <HAL_TIM_ConfigClockSource>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014f2:	f005 f995 	bl	8006820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014f6:	4827      	ldr	r0, [pc, #156]	@ (8001594 <MX_TIM1_Init+0x134>)
 80014f8:	f008 fe70 	bl	800a1dc <HAL_TIM_PWM_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001502:	f005 f98d 	bl	8006820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800150e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001512:	4619      	mov	r1, r3
 8001514:	481f      	ldr	r0, [pc, #124]	@ (8001594 <MX_TIM1_Init+0x134>)
 8001516:	f00a fa01 	bl	800b91c <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001520:	f005 f97e 	bl	8006820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001524:	2360      	movs	r3, #96	@ 0x60
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800153c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001540:	220c      	movs	r2, #12
 8001542:	4619      	mov	r1, r3
 8001544:	4813      	ldr	r0, [pc, #76]	@ (8001594 <MX_TIM1_Init+0x134>)
 8001546:	f009 fbad 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001550:	f005 f966 	bl	8006820 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001568:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800156c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4807      	ldr	r0, [pc, #28]	@ (8001594 <MX_TIM1_Init+0x134>)
 8001578:	f00a fa4c 	bl	800ba14 <HAL_TIMEx_ConfigBreakDeadTime>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001582:	f005 f94d 	bl	8006820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001586:	4803      	ldr	r0, [pc, #12]	@ (8001594 <MX_TIM1_Init+0x134>)
 8001588:	f005 fb72 	bl	8006c70 <HAL_TIM_MspPostInit>

}
 800158c:	bf00      	nop
 800158e:	3758      	adds	r7, #88	@ 0x58
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000460 	.word	0x20000460
 8001598:	40010000 	.word	0x40010000

0800159c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	@ 0x30
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	2224      	movs	r2, #36	@ 0x24
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f00f f93f 	bl	801082e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <MX_TIM2_Init+0xa4>)
 80015ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <MX_TIM2_Init+0xa4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <MX_TIM2_Init+0xa4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <MX_TIM2_Init+0xa4>)
 80015ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <MX_TIM2_Init+0xa4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <MX_TIM2_Init+0xa4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015e0:	2303      	movs	r3, #3
 80015e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015e8:	2301      	movs	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80015f0:	230a      	movs	r3, #10
 80015f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015f8:	2301      	movs	r3, #1
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001600:	230a      	movs	r3, #10
 8001602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4619      	mov	r1, r3
 800160a:	480d      	ldr	r0, [pc, #52]	@ (8001640 <MX_TIM2_Init+0xa4>)
 800160c:	f009 f88a 	bl	800a724 <HAL_TIM_Encoder_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001616:	f005 f903 	bl	8006820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	@ (8001640 <MX_TIM2_Init+0xa4>)
 8001628:	f00a f978 	bl	800b91c <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001632:	f005 f8f5 	bl	8006820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3730      	adds	r7, #48	@ 0x30
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200004a8 	.word	0x200004a8

08001644 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08c      	sub	sp, #48	@ 0x30
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	2224      	movs	r2, #36	@ 0x24
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f00f f8eb 	bl	801082e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001660:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <MX_TIM3_Init+0xa0>)
 8001662:	4a21      	ldr	r2, [pc, #132]	@ (80016e8 <MX_TIM3_Init+0xa4>)
 8001664:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001666:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <MX_TIM3_Init+0xa0>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b1d      	ldr	r3, [pc, #116]	@ (80016e4 <MX_TIM3_Init+0xa0>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001672:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <MX_TIM3_Init+0xa0>)
 8001674:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001678:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b1a      	ldr	r3, [pc, #104]	@ (80016e4 <MX_TIM3_Init+0xa0>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <MX_TIM3_Init+0xa0>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001686:	2303      	movs	r3, #3
 8001688:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800168e:	2301      	movs	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001696:	230a      	movs	r3, #10
 8001698:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800169e:	2301      	movs	r3, #1
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80016a6:	230a      	movs	r3, #10
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4619      	mov	r1, r3
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <MX_TIM3_Init+0xa0>)
 80016b2:	f009 f837 	bl	800a724 <HAL_TIM_Encoder_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016bc:	f005 f8b0 	bl	8006820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <MX_TIM3_Init+0xa0>)
 80016ce:	f00a f925 	bl	800b91c <HAL_TIMEx_MasterConfigSynchronization>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80016d8:	f005 f8a2 	bl	8006820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	3730      	adds	r7, #48	@ 0x30
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200004f0 	.word	0x200004f0
 80016e8:	40000400 	.word	0x40000400

080016ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	@ 0x28
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 0318 	add.w	r3, r7, #24
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001716:	4b2b      	ldr	r3, [pc, #172]	@ (80017c4 <MX_TIM4_Init+0xd8>)
 8001718:	4a2b      	ldr	r2, [pc, #172]	@ (80017c8 <MX_TIM4_Init+0xdc>)
 800171a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800171c:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <MX_TIM4_Init+0xd8>)
 800171e:	220f      	movs	r2, #15
 8001720:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001722:	4b28      	ldr	r3, [pc, #160]	@ (80017c4 <MX_TIM4_Init+0xd8>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001728:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <MX_TIM4_Init+0xd8>)
 800172a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800172e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001730:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <MX_TIM4_Init+0xd8>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001736:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <MX_TIM4_Init+0xd8>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800173c:	4821      	ldr	r0, [pc, #132]	@ (80017c4 <MX_TIM4_Init+0xd8>)
 800173e:	f008 fc95 	bl	800a06c <HAL_TIM_Base_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001748:	f005 f86a 	bl	8006820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001750:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	4619      	mov	r1, r3
 8001758:	481a      	ldr	r0, [pc, #104]	@ (80017c4 <MX_TIM4_Init+0xd8>)
 800175a:	f009 fb65 	bl	800ae28 <HAL_TIM_ConfigClockSource>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001764:	f005 f85c 	bl	8006820 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001768:	4816      	ldr	r0, [pc, #88]	@ (80017c4 <MX_TIM4_Init+0xd8>)
 800176a:	f008 fe59 	bl	800a420 <HAL_TIM_IC_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001774:	f005 f854 	bl	8006820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	480f      	ldr	r0, [pc, #60]	@ (80017c4 <MX_TIM4_Init+0xd8>)
 8001788:	f00a f8c8 	bl	800b91c <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001792:	f005 f845 	bl	8006820 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800179a:	2301      	movs	r3, #1
 800179c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80017a6:	463b      	mov	r3, r7
 80017a8:	220c      	movs	r2, #12
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_TIM4_Init+0xd8>)
 80017ae:	f009 f9dd 	bl	800ab6c <HAL_TIM_IC_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80017b8:	f005 f832 	bl	8006820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	@ 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000538 	.word	0x20000538
 80017c8:	40000800 	.word	0x40000800

080017cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d2:	463b      	mov	r3, r7
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017dc:	4a15      	ldr	r2, [pc, #84]	@ (8001834 <MX_TIM6_Init+0x68>)
 80017de:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017e2:	220f      	movs	r2, #15
 80017e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80017ec:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017fa:	480d      	ldr	r0, [pc, #52]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017fc:	f008 fc36 	bl	800a06c <HAL_TIM_Base_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001806:	f005 f80b 	bl	8006820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	4619      	mov	r1, r3
 8001816:	4806      	ldr	r0, [pc, #24]	@ (8001830 <MX_TIM6_Init+0x64>)
 8001818:	f00a f880 	bl	800b91c <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001822:	f004 fffd 	bl	8006820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000580 	.word	0x20000580
 8001834:	40001000 	.word	0x40001000

08001838 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b096      	sub	sp, #88	@ 0x58
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
 8001866:	615a      	str	r2, [r3, #20]
 8001868:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2220      	movs	r2, #32
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f00e ffdc 	bl	801082e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001876:	4b4f      	ldr	r3, [pc, #316]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 8001878:	4a4f      	ldr	r2, [pc, #316]	@ (80019b8 <MX_TIM8_Init+0x180>)
 800187a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800187c:	4b4d      	ldr	r3, [pc, #308]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	4b4c      	ldr	r3, [pc, #304]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001888:	4b4a      	ldr	r3, [pc, #296]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 800188a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800188e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001890:	4b48      	ldr	r3, [pc, #288]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001896:	4b47      	ldr	r3, [pc, #284]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b45      	ldr	r3, [pc, #276]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018a2:	4844      	ldr	r0, [pc, #272]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 80018a4:	f008 fbe2 	bl	800a06c <HAL_TIM_Base_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80018ae:	f004 ffb7 	bl	8006820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018b8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018bc:	4619      	mov	r1, r3
 80018be:	483d      	ldr	r0, [pc, #244]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 80018c0:	f009 fab2 	bl	800ae28 <HAL_TIM_ConfigClockSource>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80018ca:	f004 ffa9 	bl	8006820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80018ce:	4839      	ldr	r0, [pc, #228]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 80018d0:	f008 fc84 	bl	800a1dc <HAL_TIM_PWM_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80018da:	f004 ffa1 	bl	8006820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018ea:	4619      	mov	r1, r3
 80018ec:	4831      	ldr	r0, [pc, #196]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 80018ee:	f00a f815 	bl	800b91c <HAL_TIMEx_MasterConfigSynchronization>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80018f8:	f004 ff92 	bl	8006820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fc:	2360      	movs	r3, #96	@ 0x60
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001908:	2300      	movs	r3, #0
 800190a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	4824      	ldr	r0, [pc, #144]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 8001922:	f009 f9bf 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800192c:	f004 ff78 	bl	8006820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001934:	2204      	movs	r2, #4
 8001936:	4619      	mov	r1, r3
 8001938:	481e      	ldr	r0, [pc, #120]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 800193a:	f009 f9b3 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001944:	f004 ff6c 	bl	8006820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800194c:	2208      	movs	r2, #8
 800194e:	4619      	mov	r1, r3
 8001950:	4818      	ldr	r0, [pc, #96]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 8001952:	f009 f9a7 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800195c:	f004 ff60 	bl	8006820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001964:	220c      	movs	r2, #12
 8001966:	4619      	mov	r1, r3
 8001968:	4812      	ldr	r0, [pc, #72]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 800196a:	f009 f99b 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001974:	f004 ff54 	bl	8006820 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800198c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001990:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4806      	ldr	r0, [pc, #24]	@ (80019b4 <MX_TIM8_Init+0x17c>)
 800199c:	f00a f83a 	bl	800ba14 <HAL_TIMEx_ConfigBreakDeadTime>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80019a6:	f004 ff3b 	bl	8006820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	3758      	adds	r7, #88	@ 0x58
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200005c8 	.word	0x200005c8
 80019b8:	40010400 	.word	0x40010400

080019bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	@ (8001a0c <MX_USART3_UART_Init+0x50>)
 80019c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019f2:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019f4:	f00a f874 	bl	800bae0 <HAL_UART_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019fe:	f004 ff0f 	bl	8006820 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000610 	.word	0x20000610
 8001a0c:	40004800 	.word	0x40004800

08001a10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <MX_DMA_Init+0x3c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <MX_DMA_Init+0x3c>)
 8001a20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <MX_DMA_Init+0x3c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2105      	movs	r1, #5
 8001a36:	2038      	movs	r0, #56	@ 0x38
 8001a38:	f006 f86d 	bl	8007b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a3c:	2038      	movs	r0, #56	@ 0x38
 8001a3e:	f006 f886 	bl	8007b4e <HAL_NVIC_EnableIRQ>

}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b68      	ldr	r3, [pc, #416]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a67      	ldr	r2, [pc, #412]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b65      	ldr	r3, [pc, #404]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b61      	ldr	r3, [pc, #388]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	4a60      	ldr	r2, [pc, #384]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a92:	4b5e      	ldr	r3, [pc, #376]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a59      	ldr	r2, [pc, #356]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b57      	ldr	r3, [pc, #348]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b53      	ldr	r3, [pc, #332]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a52      	ldr	r2, [pc, #328]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b50      	ldr	r3, [pc, #320]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	4b4c      	ldr	r3, [pc, #304]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a4b      	ldr	r2, [pc, #300]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b49      	ldr	r3, [pc, #292]	@ (8001c0c <MX_GPIO_Init+0x1bc>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001af2:	2200      	movs	r2, #0
 8001af4:	f44f 51af 	mov.w	r1, #5600	@ 0x15e0
 8001af8:	4845      	ldr	r0, [pc, #276]	@ (8001c10 <MX_GPIO_Init+0x1c0>)
 8001afa:	f006 fde1 	bl	80086c0 <HAL_GPIO_WritePin>
                          |LED3_Pin|LMotor_ACW_CIN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LMotor_CW_AIN2_Pin|LMotor_ACW_AIN1_Pin|RMotor_CW_BIN1_Pin|RMotor_ACW_BIN2_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	213c      	movs	r1, #60	@ 0x3c
 8001b02:	4844      	ldr	r0, [pc, #272]	@ (8001c14 <MX_GPIO_Init+0x1c4>)
 8001b04:	f006 fddc 	bl	80086c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LMotor_CW_CIN2_GPIO_Port, LMotor_CW_CIN2_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2120      	movs	r1, #32
 8001b0c:	4842      	ldr	r0, [pc, #264]	@ (8001c18 <MX_GPIO_Init+0x1c8>)
 8001b0e:	f006 fdd7 	bl	80086c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RMotor_CW_DIN1_Pin|RMotor_ACW_DIN2_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8001b18:	4840      	ldr	r0, [pc, #256]	@ (8001c1c <MX_GPIO_Init+0x1cc>)
 8001b1a:	f006 fdd1 	bl	80086c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRA_TRIG_GPIO_Port, ULTRA_TRIG_Pin, GPIO_PIN_RESET);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b24:	483e      	ldr	r0, [pc, #248]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001b26:	f006 fdcb 	bl	80086c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin LMotor_ACW_CIN1_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001b2a:	f44f 53af 	mov.w	r3, #5600	@ 0x15e0
 8001b2e:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|LMotor_ACW_CIN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	4833      	ldr	r0, [pc, #204]	@ (8001c10 <MX_GPIO_Init+0x1c0>)
 8001b44:	f006 fc20 	bl	8008388 <HAL_GPIO_Init>

  /*Configure GPIO pins : LMotor_CW_AIN2_Pin LMotor_ACW_AIN1_Pin */
  GPIO_InitStruct.Pin = LMotor_CW_AIN2_Pin|LMotor_ACW_AIN1_Pin;
 8001b48:	230c      	movs	r3, #12
 8001b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b54:	2302      	movs	r3, #2
 8001b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	482d      	ldr	r0, [pc, #180]	@ (8001c14 <MX_GPIO_Init+0x1c4>)
 8001b60:	f006 fc12 	bl	8008388 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMotor_CW_BIN1_Pin RMotor_ACW_BIN2_Pin */
  GPIO_InitStruct.Pin = RMotor_CW_BIN1_Pin|RMotor_ACW_BIN2_Pin;
 8001b64:	2330      	movs	r3, #48	@ 0x30
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4826      	ldr	r0, [pc, #152]	@ (8001c14 <MX_GPIO_Init+0x1c4>)
 8001b7c:	f006 fc04 	bl	8008388 <HAL_GPIO_Init>

  /*Configure GPIO pin : LMotor_CW_CIN2_Pin */
  GPIO_InitStruct.Pin = LMotor_CW_CIN2_Pin;
 8001b80:	2320      	movs	r3, #32
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LMotor_CW_CIN2_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4820      	ldr	r0, [pc, #128]	@ (8001c18 <MX_GPIO_Init+0x1c8>)
 8001b98:	f006 fbf6 	bl	8008388 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMotor_CW_DIN1_Pin RMotor_ACW_DIN2_Pin */
  GPIO_InitStruct.Pin = RMotor_CW_DIN1_Pin|RMotor_ACW_DIN2_Pin;
 8001b9c:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8001ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4819      	ldr	r0, [pc, #100]	@ (8001c1c <MX_GPIO_Init+0x1cc>)
 8001bb6:	f006 fbe7 	bl	8008388 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8001bba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bc0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4813      	ldr	r0, [pc, #76]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001bd2:	f006 fbd9 	bl	8008388 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRA_TRIG_Pin */
  GPIO_InitStruct.Pin = ULTRA_TRIG_Pin;
 8001bd6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ULTRA_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001bf0:	f006 fbca 	bl	8008388 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2105      	movs	r1, #5
 8001bf8:	2017      	movs	r0, #23
 8001bfa:	f005 ff8c 	bl	8007b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bfe:	2017      	movs	r0, #23
 8001c00:	f005 ffa5 	bl	8007b4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	@ 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020800 	.word	0x40020800
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40020c00 	.word	0x40020c00

08001c24 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//////////////// INTERRUPT CALLBACK FUNCTIONS ////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
//	if (btnClicked) return;
	if (GPIO_Pin == USER_BTN_Pin) {
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c34:	d11c      	bne.n	8001c70 <HAL_GPIO_EXTI_Callback+0x4c>
//		osDelay(1000);
//		HAL_UART_RxCpltCallback(&huart3);
//		targetDist = 120;
//		MoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_TURN);
//		uint8_t clicked[20];
		uint32_t int_time = HAL_GetTick();
 8001c36:	f005 fa65 	bl	8007104 <HAL_GetTick>
 8001c3a:	60f8      	str	r0, [r7, #12]
		if(HAL_GetTick() - last_int > 250)
 8001c3c:	f005 fa62 	bl	8007104 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2bfa      	cmp	r3, #250	@ 0xfa
 8001c4a:	d911      	bls.n	8001c70 <HAL_GPIO_EXTI_Callback+0x4c>
		{
			btnClicked++;
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_GPIO_EXTI_Callback+0x58>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <HAL_GPIO_EXTI_Callback+0x58>)
 8001c54:	6013      	str	r3, [r2, #0]
			if(task_test ==2) taskStep++;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d105      	bne.n	8001c6a <HAL_GPIO_EXTI_Callback+0x46>
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_GPIO_EXTI_Callback+0x60>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <HAL_GPIO_EXTI_Callback+0x60>)
 8001c68:	701a      	strb	r2, [r3, #0]
			last_int = int_time;
 8001c6a:	4a03      	ldr	r2, [pc, #12]	@ (8001c78 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6013      	str	r3, [r2, #0]
//		turnMode = (turnMode + 1) % 4;
//		__ADD_COMMAND(cQueue, 1, 100);
//		__READ_COMMAND(cQueue, curCmd, rxMsg);
	}

}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	2000069c 	.word	0x2000069c
 8001c7c:	20000698 	.word	0x20000698
 8001c80:	2000015d 	.word	0x2000015d
 8001c84:	20000800 	.word	0x20000800

08001c88 <task_btn_fn>:

void task_btn_fn(){
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
		if(btnClicked == 1){
 8001c8c:	4b65      	ldr	r3, [pc, #404]	@ (8001e24 <task_btn_fn+0x19c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d10f      	bne.n	8001cb4 <task_btn_fn+0x2c>
				aRxBuffer[0] = 'F';
 8001c94:	4b64      	ldr	r3, [pc, #400]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001c96:	2246      	movs	r2, #70	@ 0x46
 8001c98:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'C';
 8001c9a:	4b63      	ldr	r3, [pc, #396]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001c9c:	2243      	movs	r2, #67	@ 0x43
 8001c9e:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = '0';
 8001ca0:	4b61      	ldr	r3, [pc, #388]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001ca2:	2230      	movs	r2, #48	@ 0x30
 8001ca4:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = '1';
 8001ca6:	4b60      	ldr	r3, [pc, #384]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001ca8:	2231      	movs	r2, #49	@ 0x31
 8001caa:	70da      	strb	r2, [r3, #3]
				btnClicked = 0;
 8001cac:	4b5d      	ldr	r3, [pc, #372]	@ (8001e24 <task_btn_fn+0x19c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
					aRxBuffer[1] = 'C';
					aRxBuffer[2] = '4';
					aRxBuffer[3] = '2';
					btnClicked = 0;
		}
}
 8001cb2:	e0b2      	b.n	8001e1a <task_btn_fn+0x192>
		else if(btnClicked == 2){
 8001cb4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e24 <task_btn_fn+0x19c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d10f      	bne.n	8001cdc <task_btn_fn+0x54>
				aRxBuffer[0] = 'F';
 8001cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001cbe:	2246      	movs	r2, #70	@ 0x46
 8001cc0:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'C';
 8001cc2:	4b59      	ldr	r3, [pc, #356]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001cc4:	2243      	movs	r2, #67	@ 0x43
 8001cc6:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = '2';
 8001cc8:	4b57      	ldr	r3, [pc, #348]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001cca:	2232      	movs	r2, #50	@ 0x32
 8001ccc:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = '1';
 8001cce:	4b56      	ldr	r3, [pc, #344]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001cd0:	2231      	movs	r2, #49	@ 0x31
 8001cd2:	70da      	strb	r2, [r3, #3]
				btnClicked = 0;
 8001cd4:	4b53      	ldr	r3, [pc, #332]	@ (8001e24 <task_btn_fn+0x19c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
}
 8001cda:	e09e      	b.n	8001e1a <task_btn_fn+0x192>
		else if(btnClicked == 3){
 8001cdc:	4b51      	ldr	r3, [pc, #324]	@ (8001e24 <task_btn_fn+0x19c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d10f      	bne.n	8001d04 <task_btn_fn+0x7c>
				aRxBuffer[0] = 'F';
 8001ce4:	4b50      	ldr	r3, [pc, #320]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001ce6:	2246      	movs	r2, #70	@ 0x46
 8001ce8:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'C';
 8001cea:	4b4f      	ldr	r3, [pc, #316]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001cec:	2243      	movs	r2, #67	@ 0x43
 8001cee:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = '2';
 8001cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001cf2:	2232      	movs	r2, #50	@ 0x32
 8001cf4:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = '3';
 8001cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001cf8:	2233      	movs	r2, #51	@ 0x33
 8001cfa:	70da      	strb	r2, [r3, #3]
				btnClicked = 0;
 8001cfc:	4b49      	ldr	r3, [pc, #292]	@ (8001e24 <task_btn_fn+0x19c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	e08a      	b.n	8001e1a <task_btn_fn+0x192>
		else if(btnClicked == 4){
 8001d04:	4b47      	ldr	r3, [pc, #284]	@ (8001e24 <task_btn_fn+0x19c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d10f      	bne.n	8001d2c <task_btn_fn+0xa4>
				aRxBuffer[0] = 'F';
 8001d0c:	4b46      	ldr	r3, [pc, #280]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d0e:	2246      	movs	r2, #70	@ 0x46
 8001d10:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'C';
 8001d12:	4b45      	ldr	r3, [pc, #276]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d14:	2243      	movs	r2, #67	@ 0x43
 8001d16:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = '2';
 8001d18:	4b43      	ldr	r3, [pc, #268]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d1a:	2232      	movs	r2, #50	@ 0x32
 8001d1c:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = '4';
 8001d1e:	4b42      	ldr	r3, [pc, #264]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d20:	2234      	movs	r2, #52	@ 0x34
 8001d22:	70da      	strb	r2, [r3, #3]
				btnClicked = 0;
 8001d24:	4b3f      	ldr	r3, [pc, #252]	@ (8001e24 <task_btn_fn+0x19c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
}
 8001d2a:	e076      	b.n	8001e1a <task_btn_fn+0x192>
		else if(btnClicked == 5){
 8001d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e24 <task_btn_fn+0x19c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d10f      	bne.n	8001d54 <task_btn_fn+0xcc>
					aRxBuffer[0] = 'F';
 8001d34:	4b3c      	ldr	r3, [pc, #240]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d36:	2246      	movs	r2, #70	@ 0x46
 8001d38:	701a      	strb	r2, [r3, #0]
					aRxBuffer[1] = 'C';
 8001d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d3c:	2243      	movs	r2, #67	@ 0x43
 8001d3e:	705a      	strb	r2, [r3, #1]
					aRxBuffer[2] = '2';
 8001d40:	4b39      	ldr	r3, [pc, #228]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d42:	2232      	movs	r2, #50	@ 0x32
 8001d44:	709a      	strb	r2, [r3, #2]
					aRxBuffer[3] = '5';
 8001d46:	4b38      	ldr	r3, [pc, #224]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d48:	2235      	movs	r2, #53	@ 0x35
 8001d4a:	70da      	strb	r2, [r3, #3]
					btnClicked = 0;
 8001d4c:	4b35      	ldr	r3, [pc, #212]	@ (8001e24 <task_btn_fn+0x19c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
}
 8001d52:	e062      	b.n	8001e1a <task_btn_fn+0x192>
		else if(btnClicked == 6){
 8001d54:	4b33      	ldr	r3, [pc, #204]	@ (8001e24 <task_btn_fn+0x19c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b06      	cmp	r3, #6
 8001d5a:	d10f      	bne.n	8001d7c <task_btn_fn+0xf4>
					aRxBuffer[0] = 'F';
 8001d5c:	4b32      	ldr	r3, [pc, #200]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d5e:	2246      	movs	r2, #70	@ 0x46
 8001d60:	701a      	strb	r2, [r3, #0]
					aRxBuffer[1] = 'C';
 8001d62:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d64:	2243      	movs	r2, #67	@ 0x43
 8001d66:	705a      	strb	r2, [r3, #1]
					aRxBuffer[2] = '2';
 8001d68:	4b2f      	ldr	r3, [pc, #188]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d6a:	2232      	movs	r2, #50	@ 0x32
 8001d6c:	709a      	strb	r2, [r3, #2]
					aRxBuffer[3] = '7';
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d70:	2237      	movs	r2, #55	@ 0x37
 8001d72:	70da      	strb	r2, [r3, #3]
					btnClicked = 0;
 8001d74:	4b2b      	ldr	r3, [pc, #172]	@ (8001e24 <task_btn_fn+0x19c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
}
 8001d7a:	e04e      	b.n	8001e1a <task_btn_fn+0x192>
		else if(btnClicked == 7){
 8001d7c:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <task_btn_fn+0x19c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b07      	cmp	r3, #7
 8001d82:	d10f      	bne.n	8001da4 <task_btn_fn+0x11c>
					aRxBuffer[0] = 'F';
 8001d84:	4b28      	ldr	r3, [pc, #160]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d86:	2246      	movs	r2, #70	@ 0x46
 8001d88:	701a      	strb	r2, [r3, #0]
					aRxBuffer[1] = 'C';
 8001d8a:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d8c:	2243      	movs	r2, #67	@ 0x43
 8001d8e:	705a      	strb	r2, [r3, #1]
					aRxBuffer[2] = '2';
 8001d90:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d92:	2232      	movs	r2, #50	@ 0x32
 8001d94:	709a      	strb	r2, [r3, #2]
					aRxBuffer[3] = '9';
 8001d96:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001d98:	2239      	movs	r2, #57	@ 0x39
 8001d9a:	70da      	strb	r2, [r3, #3]
					btnClicked = 0;
 8001d9c:	4b21      	ldr	r3, [pc, #132]	@ (8001e24 <task_btn_fn+0x19c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
}
 8001da2:	e03a      	b.n	8001e1a <task_btn_fn+0x192>
		else if(btnClicked == 8){
 8001da4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e24 <task_btn_fn+0x19c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d10f      	bne.n	8001dcc <task_btn_fn+0x144>
					aRxBuffer[0] = 'F';
 8001dac:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001dae:	2246      	movs	r2, #70	@ 0x46
 8001db0:	701a      	strb	r2, [r3, #0]
					aRxBuffer[1] = 'C';
 8001db2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001db4:	2243      	movs	r2, #67	@ 0x43
 8001db6:	705a      	strb	r2, [r3, #1]
					aRxBuffer[2] = '4';
 8001db8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001dba:	2234      	movs	r2, #52	@ 0x34
 8001dbc:	709a      	strb	r2, [r3, #2]
					aRxBuffer[3] = '0';
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001dc0:	2230      	movs	r2, #48	@ 0x30
 8001dc2:	70da      	strb	r2, [r3, #3]
					btnClicked = 0;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <task_btn_fn+0x19c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
}
 8001dca:	e026      	b.n	8001e1a <task_btn_fn+0x192>
		else if(btnClicked == 9){
 8001dcc:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <task_btn_fn+0x19c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b09      	cmp	r3, #9
 8001dd2:	d10f      	bne.n	8001df4 <task_btn_fn+0x16c>
					aRxBuffer[0] = 'F';
 8001dd4:	4b14      	ldr	r3, [pc, #80]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001dd6:	2246      	movs	r2, #70	@ 0x46
 8001dd8:	701a      	strb	r2, [r3, #0]
					aRxBuffer[1] = 'C';
 8001dda:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001ddc:	2243      	movs	r2, #67	@ 0x43
 8001dde:	705a      	strb	r2, [r3, #1]
					aRxBuffer[2] = '4';
 8001de0:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001de2:	2234      	movs	r2, #52	@ 0x34
 8001de4:	709a      	strb	r2, [r3, #2]
					aRxBuffer[3] = '1';
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001de8:	2231      	movs	r2, #49	@ 0x31
 8001dea:	70da      	strb	r2, [r3, #3]
					btnClicked = 0;
 8001dec:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <task_btn_fn+0x19c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
}
 8001df2:	e012      	b.n	8001e1a <task_btn_fn+0x192>
		else if(btnClicked == 10){
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <task_btn_fn+0x19c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b0a      	cmp	r3, #10
 8001dfa:	d10e      	bne.n	8001e1a <task_btn_fn+0x192>
					aRxBuffer[0] = 'F';
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001dfe:	2246      	movs	r2, #70	@ 0x46
 8001e00:	701a      	strb	r2, [r3, #0]
					aRxBuffer[1] = 'C';
 8001e02:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001e04:	2243      	movs	r2, #67	@ 0x43
 8001e06:	705a      	strb	r2, [r3, #1]
					aRxBuffer[2] = '4';
 8001e08:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001e0a:	2234      	movs	r2, #52	@ 0x34
 8001e0c:	709a      	strb	r2, [r3, #2]
					aRxBuffer[3] = '2';
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <task_btn_fn+0x1a0>)
 8001e10:	2232      	movs	r2, #50	@ 0x32
 8001e12:	70da      	strb	r2, [r3, #3]
					btnClicked = 0;
 8001e14:	4b03      	ldr	r3, [pc, #12]	@ (8001e24 <task_btn_fn+0x19c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	20000698 	.word	0x20000698
 8001e28:	200006b4 	.word	0x200006b4

08001e2c <task_step_fn>:

void task_step_fn(){
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
	btnClicked = taskStep;
 8001e30:	4b54      	ldr	r3, [pc, #336]	@ (8001f84 <task_step_fn+0x158>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b54      	ldr	r3, [pc, #336]	@ (8001f88 <task_step_fn+0x15c>)
 8001e38:	601a      	str	r2, [r3, #0]
	if(btnClicked == 1){
 8001e3a:	4b53      	ldr	r3, [pc, #332]	@ (8001f88 <task_step_fn+0x15c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d10f      	bne.n	8001e62 <task_step_fn+0x36>
			aRxBuffer[0] = 'F';
 8001e42:	4b52      	ldr	r3, [pc, #328]	@ (8001f8c <task_step_fn+0x160>)
 8001e44:	2246      	movs	r2, #70	@ 0x46
 8001e46:	701a      	strb	r2, [r3, #0]
			aRxBuffer[1] = 'C';
 8001e48:	4b50      	ldr	r3, [pc, #320]	@ (8001f8c <task_step_fn+0x160>)
 8001e4a:	2243      	movs	r2, #67	@ 0x43
 8001e4c:	705a      	strb	r2, [r3, #1]
			aRxBuffer[2] = '0';
 8001e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8001f8c <task_step_fn+0x160>)
 8001e50:	2230      	movs	r2, #48	@ 0x30
 8001e52:	709a      	strb	r2, [r3, #2]
			aRxBuffer[3] = '1';
 8001e54:	4b4d      	ldr	r3, [pc, #308]	@ (8001f8c <task_step_fn+0x160>)
 8001e56:	2231      	movs	r2, #49	@ 0x31
 8001e58:	70da      	strb	r2, [r3, #3]
			btnClicked = 0;
 8001e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f88 <task_step_fn+0x15c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
				aRxBuffer[1] = 'C';
				aRxBuffer[2] = '4';
				aRxBuffer[3] = '9';
				btnClicked = 0;
			}
}
 8001e60:	e08a      	b.n	8001f78 <task_step_fn+0x14c>
	else if(btnClicked == 2){
 8001e62:	4b49      	ldr	r3, [pc, #292]	@ (8001f88 <task_step_fn+0x15c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d10f      	bne.n	8001e8a <task_step_fn+0x5e>
			aRxBuffer[0] = 'F';
 8001e6a:	4b48      	ldr	r3, [pc, #288]	@ (8001f8c <task_step_fn+0x160>)
 8001e6c:	2246      	movs	r2, #70	@ 0x46
 8001e6e:	701a      	strb	r2, [r3, #0]
			aRxBuffer[1] = 'C';
 8001e70:	4b46      	ldr	r3, [pc, #280]	@ (8001f8c <task_step_fn+0x160>)
 8001e72:	2243      	movs	r2, #67	@ 0x43
 8001e74:	705a      	strb	r2, [r3, #1]
			aRxBuffer[2] = '2';
 8001e76:	4b45      	ldr	r3, [pc, #276]	@ (8001f8c <task_step_fn+0x160>)
 8001e78:	2232      	movs	r2, #50	@ 0x32
 8001e7a:	709a      	strb	r2, [r3, #2]
			aRxBuffer[3] = '1';
 8001e7c:	4b43      	ldr	r3, [pc, #268]	@ (8001f8c <task_step_fn+0x160>)
 8001e7e:	2231      	movs	r2, #49	@ 0x31
 8001e80:	70da      	strb	r2, [r3, #3]
			btnClicked = 0;
 8001e82:	4b41      	ldr	r3, [pc, #260]	@ (8001f88 <task_step_fn+0x15c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
}
 8001e88:	e076      	b.n	8001f78 <task_step_fn+0x14c>
	else if(btnClicked == 3){
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f88 <task_step_fn+0x15c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d10f      	bne.n	8001eb2 <task_step_fn+0x86>
			aRxBuffer[0] = 'F';
 8001e92:	4b3e      	ldr	r3, [pc, #248]	@ (8001f8c <task_step_fn+0x160>)
 8001e94:	2246      	movs	r2, #70	@ 0x46
 8001e96:	701a      	strb	r2, [r3, #0]
			aRxBuffer[1] = 'C';
 8001e98:	4b3c      	ldr	r3, [pc, #240]	@ (8001f8c <task_step_fn+0x160>)
 8001e9a:	2243      	movs	r2, #67	@ 0x43
 8001e9c:	705a      	strb	r2, [r3, #1]
			aRxBuffer[2] = '2';
 8001e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f8c <task_step_fn+0x160>)
 8001ea0:	2232      	movs	r2, #50	@ 0x32
 8001ea2:	709a      	strb	r2, [r3, #2]
			aRxBuffer[3] = '2';
 8001ea4:	4b39      	ldr	r3, [pc, #228]	@ (8001f8c <task_step_fn+0x160>)
 8001ea6:	2232      	movs	r2, #50	@ 0x32
 8001ea8:	70da      	strb	r2, [r3, #3]
			btnClicked = 0;
 8001eaa:	4b37      	ldr	r3, [pc, #220]	@ (8001f88 <task_step_fn+0x15c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
}
 8001eb0:	e062      	b.n	8001f78 <task_step_fn+0x14c>
	else if(btnClicked == 4){
 8001eb2:	4b35      	ldr	r3, [pc, #212]	@ (8001f88 <task_step_fn+0x15c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d10f      	bne.n	8001eda <task_step_fn+0xae>
			aRxBuffer[0] = 'F';
 8001eba:	4b34      	ldr	r3, [pc, #208]	@ (8001f8c <task_step_fn+0x160>)
 8001ebc:	2246      	movs	r2, #70	@ 0x46
 8001ebe:	701a      	strb	r2, [r3, #0]
			aRxBuffer[1] = 'C';
 8001ec0:	4b32      	ldr	r3, [pc, #200]	@ (8001f8c <task_step_fn+0x160>)
 8001ec2:	2243      	movs	r2, #67	@ 0x43
 8001ec4:	705a      	strb	r2, [r3, #1]
			aRxBuffer[2] = '4';
 8001ec6:	4b31      	ldr	r3, [pc, #196]	@ (8001f8c <task_step_fn+0x160>)
 8001ec8:	2234      	movs	r2, #52	@ 0x34
 8001eca:	709a      	strb	r2, [r3, #2]
			aRxBuffer[3] = '3';
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <task_step_fn+0x160>)
 8001ece:	2233      	movs	r2, #51	@ 0x33
 8001ed0:	70da      	strb	r2, [r3, #3]
			btnClicked = 0;
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f88 <task_step_fn+0x15c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
}
 8001ed8:	e04e      	b.n	8001f78 <task_step_fn+0x14c>
	else if(btnClicked == 5){
 8001eda:	4b2b      	ldr	r3, [pc, #172]	@ (8001f88 <task_step_fn+0x15c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d10f      	bne.n	8001f02 <task_step_fn+0xd6>
			aRxBuffer[0] = 'F';
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <task_step_fn+0x160>)
 8001ee4:	2246      	movs	r2, #70	@ 0x46
 8001ee6:	701a      	strb	r2, [r3, #0]
			aRxBuffer[1] = 'C';
 8001ee8:	4b28      	ldr	r3, [pc, #160]	@ (8001f8c <task_step_fn+0x160>)
 8001eea:	2243      	movs	r2, #67	@ 0x43
 8001eec:	705a      	strb	r2, [r3, #1]
			aRxBuffer[2] = '4';
 8001eee:	4b27      	ldr	r3, [pc, #156]	@ (8001f8c <task_step_fn+0x160>)
 8001ef0:	2234      	movs	r2, #52	@ 0x34
 8001ef2:	709a      	strb	r2, [r3, #2]
			aRxBuffer[3] = '6';
 8001ef4:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <task_step_fn+0x160>)
 8001ef6:	2236      	movs	r2, #54	@ 0x36
 8001ef8:	70da      	strb	r2, [r3, #3]
			btnClicked = 0;
 8001efa:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <task_step_fn+0x15c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	e03a      	b.n	8001f78 <task_step_fn+0x14c>
	else if(btnClicked == 6){
 8001f02:	4b21      	ldr	r3, [pc, #132]	@ (8001f88 <task_step_fn+0x15c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d10f      	bne.n	8001f2a <task_step_fn+0xfe>
				aRxBuffer[0] = 'F';
 8001f0a:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <task_step_fn+0x160>)
 8001f0c:	2246      	movs	r2, #70	@ 0x46
 8001f0e:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'C';
 8001f10:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <task_step_fn+0x160>)
 8001f12:	2243      	movs	r2, #67	@ 0x43
 8001f14:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = '4';
 8001f16:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <task_step_fn+0x160>)
 8001f18:	2234      	movs	r2, #52	@ 0x34
 8001f1a:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = '7';
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <task_step_fn+0x160>)
 8001f1e:	2237      	movs	r2, #55	@ 0x37
 8001f20:	70da      	strb	r2, [r3, #3]
				btnClicked = 0;
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <task_step_fn+0x15c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
}
 8001f28:	e026      	b.n	8001f78 <task_step_fn+0x14c>
	else if(btnClicked == 7){
 8001f2a:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <task_step_fn+0x15c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b07      	cmp	r3, #7
 8001f30:	d10f      	bne.n	8001f52 <task_step_fn+0x126>
				aRxBuffer[0] = 'F';
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <task_step_fn+0x160>)
 8001f34:	2246      	movs	r2, #70	@ 0x46
 8001f36:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'C';
 8001f38:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <task_step_fn+0x160>)
 8001f3a:	2243      	movs	r2, #67	@ 0x43
 8001f3c:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = '4';
 8001f3e:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <task_step_fn+0x160>)
 8001f40:	2234      	movs	r2, #52	@ 0x34
 8001f42:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = '8';
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <task_step_fn+0x160>)
 8001f46:	2238      	movs	r2, #56	@ 0x38
 8001f48:	70da      	strb	r2, [r3, #3]
				btnClicked = 0;
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <task_step_fn+0x15c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
}
 8001f50:	e012      	b.n	8001f78 <task_step_fn+0x14c>
	else if(btnClicked == 8){
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <task_step_fn+0x15c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d10e      	bne.n	8001f78 <task_step_fn+0x14c>
				aRxBuffer[0] = 'F';
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <task_step_fn+0x160>)
 8001f5c:	2246      	movs	r2, #70	@ 0x46
 8001f5e:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'C';
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <task_step_fn+0x160>)
 8001f62:	2243      	movs	r2, #67	@ 0x43
 8001f64:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = '4';
 8001f66:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <task_step_fn+0x160>)
 8001f68:	2234      	movs	r2, #52	@ 0x34
 8001f6a:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = '9';
 8001f6c:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <task_step_fn+0x160>)
 8001f6e:	2239      	movs	r2, #57	@ 0x39
 8001f70:	70da      	strb	r2, [r3, #3]
				btnClicked = 0;
 8001f72:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <task_step_fn+0x15c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000800 	.word	0x20000800
 8001f88:	20000698 	.word	0x20000698
 8001f8c:	200006b4 	.word	0x200006b4

08001f90 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	//This function is for Interrupt for UART Rx
	UNUSED(huart); //Prevent unused argument(s) compilation warning
	//Put received commands into a command queue (TODO)
//	HAL_UART_Transmit(&huart, (uint8_t *)aRxBuffer, 10, 0xFFFF);

	if (task_test == 1) task_btn_fn();
 8001f98:	4b96      	ldr	r3, [pc, #600]	@ (80021f4 <HAL_UART_RxCpltCallback+0x264>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d102      	bne.n	8001fa6 <HAL_UART_RxCpltCallback+0x16>
 8001fa0:	f7ff fe72 	bl	8001c88 <task_btn_fn>
 8001fa4:	e005      	b.n	8001fb2 <HAL_UART_RxCpltCallback+0x22>
	else if (task_test == 2) task_step_fn();
 8001fa6:	4b93      	ldr	r3, [pc, #588]	@ (80021f4 <HAL_UART_RxCpltCallback+0x264>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d101      	bne.n	8001fb2 <HAL_UART_RxCpltCallback+0x22>
 8001fae:	f7ff ff3d 	bl	8001e2c <task_step_fn>
//	cmdBuffer[2] = aRxBuffer[2];
//	cmdBuffer[3] = aRxBuffer[3];

	int val;

	val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001fb2:	4b91      	ldr	r3, [pc, #580]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8001fb4:	789b      	ldrb	r3, [r3, #2]
 8001fb6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8001fc6:	78db      	ldrb	r3, [r3, #3]
 8001fc8:	3b30      	subs	r3, #48	@ 0x30
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
	if (aRxBuffer[1] >= '0' && aRxBuffer[1] <= '9') val += (aRxBuffer[1] - 48) * 100;
 8001fce:	4b8a      	ldr	r3, [pc, #552]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	2b2f      	cmp	r3, #47	@ 0x2f
 8001fd4:	d90c      	bls.n	8001ff0 <HAL_UART_RxCpltCallback+0x60>
 8001fd6:	4b88      	ldr	r3, [pc, #544]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8001fd8:	785b      	ldrb	r3, [r3, #1]
 8001fda:	2b39      	cmp	r3, #57	@ 0x39
 8001fdc:	d808      	bhi.n	8001ff0 <HAL_UART_RxCpltCallback+0x60>
 8001fde:	4b86      	ldr	r3, [pc, #536]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8001fe0:	785b      	ldrb	r3, [r3, #1]
 8001fe2:	3b30      	subs	r3, #48	@ 0x30
 8001fe4:	2264      	movs	r2, #100	@ 0x64
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4413      	add	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

	manual_mode = 0;
 8001ff0:	4b82      	ldr	r3, [pc, #520]	@ (80021fc <HAL_UART_RxCpltCallback+0x26c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]

	if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T') { // only STOP can preempt any greedy task
 8001ff6:	4b80      	ldr	r3, [pc, #512]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b53      	cmp	r3, #83	@ 0x53
 8001ffc:	d159      	bne.n	80020b2 <HAL_UART_RxCpltCallback+0x122>
 8001ffe:	4b7e      	ldr	r3, [pc, #504]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8002000:	785b      	ldrb	r3, [r3, #1]
 8002002:	2b54      	cmp	r3, #84	@ 0x54
 8002004:	d155      	bne.n	80020b2 <HAL_UART_RxCpltCallback+0x122>
//		__ADD_COMMAND(cQueue, 0, 0); // stop
		__TASK_END(&htim8, prevTask, curTask);
 8002006:	4b7e      	ldr	r3, [pc, #504]	@ (8002200 <HAL_UART_RxCpltCallback+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800200e:	4b7c      	ldr	r3, [pc, #496]	@ (8002200 <HAL_UART_RxCpltCallback+0x270>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2200      	movs	r2, #0
 8002014:	641a      	str	r2, [r3, #64]	@ 0x40
 8002016:	4b7b      	ldr	r3, [pc, #492]	@ (8002204 <HAL_UART_RxCpltCallback+0x274>)
 8002018:	781a      	ldrb	r2, [r3, #0]
 800201a:	4b7b      	ldr	r3, [pc, #492]	@ (8002208 <HAL_UART_RxCpltCallback+0x278>)
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	4b79      	ldr	r3, [pc, #484]	@ (8002204 <HAL_UART_RxCpltCallback+0x274>)
 8002020:	220b      	movs	r2, #11
 8002022:	701a      	strb	r2, [r3, #0]
		  curAngle = 0;
 8002024:	4b79      	ldr	r3, [pc, #484]	@ (800220c <HAL_UART_RxCpltCallback+0x27c>)
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
		  gyroZ = 0; // reset angle for PID
 800202c:	4b78      	ldr	r3, [pc, #480]	@ (8002210 <HAL_UART_RxCpltCallback+0x280>)
 800202e:	2200      	movs	r2, #0
 8002030:	801a      	strh	r2, [r3, #0]
		PIDReset(&pidTurn);
 8002032:	4878      	ldr	r0, [pc, #480]	@ (8002214 <HAL_UART_RxCpltCallback+0x284>)
 8002034:	f000 fd7b 	bl	8002b2e <PIDReset>
		PIDReset(&pidSlow);
 8002038:	4877      	ldr	r0, [pc, #476]	@ (8002218 <HAL_UART_RxCpltCallback+0x288>)
 800203a:	f000 fd78 	bl	8002b2e <PIDReset>
		PIDReset(&pidFast);
 800203e:	4877      	ldr	r0, [pc, #476]	@ (800221c <HAL_UART_RxCpltCallback+0x28c>)
 8002040:	f000 fd75 	bl	8002b2e <PIDReset>
		curDistTick = 0;
 8002044:	4b76      	ldr	r3, [pc, #472]	@ (8002220 <HAL_UART_RxCpltCallback+0x290>)
 8002046:	2200      	movs	r2, #0
 8002048:	801a      	strh	r2, [r3, #0]
		if (__IS_EMPTY(cmdq)) {
 800204a:	4b76      	ldr	r3, [pc, #472]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	4b75      	ldr	r3, [pc, #468]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 8002050:	785b      	ldrb	r3, [r3, #1]
 8002052:	429a      	cmp	r2, r3
 8002054:	d112      	bne.n	800207c <HAL_UART_RxCpltCallback+0xec>
			__CLEAR_CURCMD(curCmd);
 8002056:	4b74      	ldr	r3, [pc, #464]	@ (8002228 <HAL_UART_RxCpltCallback+0x298>)
 8002058:	2264      	movs	r2, #100	@ 0x64
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	4b72      	ldr	r3, [pc, #456]	@ (8002228 <HAL_UART_RxCpltCallback+0x298>)
 800205e:	2200      	movs	r2, #0
 8002060:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, msg);
 8002062:	4a72      	ldr	r2, [pc, #456]	@ (800222c <HAL_UART_RxCpltCallback+0x29c>)
 8002064:	210f      	movs	r1, #15
 8002066:	4872      	ldr	r0, [pc, #456]	@ (8002230 <HAL_UART_RxCpltCallback+0x2a0>)
 8002068:	f00e fb4a 	bl	8010700 <sniprintf>
 800206c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002070:	2206      	movs	r2, #6
 8002072:	4970      	ldr	r1, [pc, #448]	@ (8002234 <HAL_UART_RxCpltCallback+0x2a4>)
 8002074:	4870      	ldr	r0, [pc, #448]	@ (8002238 <HAL_UART_RxCpltCallback+0x2a8>)
 8002076:	f009 fd83 	bl	800bb80 <HAL_UART_Transmit>
		if (__IS_EMPTY(cmdq)) {
 800207a:	e306      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
		}
		else {
			__READ_CMD(cmdq, curCmd, msg);
 800207c:	4b69      	ldr	r3, [pc, #420]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	4a69      	ldr	r2, [pc, #420]	@ (8002228 <HAL_UART_RxCpltCallback+0x298>)
 8002082:	4968      	ldr	r1, [pc, #416]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b65      	ldr	r3, [pc, #404]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 800208e:	785b      	ldrb	r3, [r3, #1]
 8002090:	3301      	adds	r3, #1
 8002092:	4a64      	ldr	r2, [pc, #400]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 8002094:	7892      	ldrb	r2, [r2, #2]
 8002096:	fb93 f1f2 	sdiv	r1, r3, r2
 800209a:	fb01 f202 	mul.w	r2, r1, r2
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b60      	ldr	r3, [pc, #384]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 80020a4:	705a      	strb	r2, [r3, #1]
 80020a6:	4a65      	ldr	r2, [pc, #404]	@ (800223c <HAL_UART_RxCpltCallback+0x2ac>)
 80020a8:	210f      	movs	r1, #15
 80020aa:	4861      	ldr	r0, [pc, #388]	@ (8002230 <HAL_UART_RxCpltCallback+0x2a0>)
 80020ac:	f00e fb28 	bl	8010700 <sniprintf>
		if (__IS_EMPTY(cmdq)) {
 80020b0:	e2eb      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
		}
	}
	else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //FW or FS
 80020b2:	4b51      	ldr	r3, [pc, #324]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b46      	cmp	r3, #70	@ 0x46
 80020b8:	d13d      	bne.n	8002136 <HAL_UART_RxCpltCallback+0x1a6>
 80020ba:	4b4f      	ldr	r3, [pc, #316]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 80020bc:	785b      	ldrb	r3, [r3, #1]
 80020be:	2b57      	cmp	r3, #87	@ 0x57
 80020c0:	d003      	beq.n	80020ca <HAL_UART_RxCpltCallback+0x13a>
 80020c2:	4b4d      	ldr	r3, [pc, #308]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 80020c4:	785b      	ldrb	r3, [r3, #1]
 80020c6:	2b53      	cmp	r3, #83	@ 0x53
 80020c8:	d135      	bne.n	8002136 <HAL_UART_RxCpltCallback+0x1a6>
		manual_mode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 80020ca:	4b4b      	ldr	r3, [pc, #300]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 80020cc:	789b      	ldrb	r3, [r3, #2]
 80020ce:	2b2d      	cmp	r3, #45	@ 0x2d
 80020d0:	d105      	bne.n	80020de <HAL_UART_RxCpltCallback+0x14e>
 80020d2:	4b49      	ldr	r3, [pc, #292]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 80020d4:	78db      	ldrb	r3, [r3, #3]
 80020d6:	2b2d      	cmp	r3, #45	@ 0x2d
 80020d8:	d101      	bne.n	80020de <HAL_UART_RxCpltCallback+0x14e>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_UART_RxCpltCallback+0x150>
 80020de:	2300      	movs	r3, #0
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4b46      	ldr	r3, [pc, #280]	@ (80021fc <HAL_UART_RxCpltCallback+0x26c>)
 80020e4:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 80020e6:	4b44      	ldr	r3, [pc, #272]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	2b53      	cmp	r3, #83	@ 0x53
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b52      	ldr	r3, [pc, #328]	@ (8002240 <HAL_UART_RxCpltCallback+0x2b0>)
 80020f8:	701a      	strb	r2, [r3, #0]
		__ADD_CMD(cmdq, 1, val);
 80020fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	4a49      	ldr	r2, [pc, #292]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	2201      	movs	r2, #1
 8002106:	711a      	strb	r2, [r3, #4]
 8002108:	4b46      	ldr	r3, [pc, #280]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	b291      	uxth	r1, r2
 8002110:	4a44      	ldr	r2, [pc, #272]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	460a      	mov	r2, r1
 8002118:	80da      	strh	r2, [r3, #6]
 800211a:	4b42      	ldr	r3, [pc, #264]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	4a40      	ldr	r2, [pc, #256]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 8002122:	7892      	ldrb	r2, [r2, #2]
 8002124:	fb93 f1f2 	sdiv	r1, r3, r2
 8002128:	fb01 f202 	mul.w	r2, r1, r2
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b3c      	ldr	r3, [pc, #240]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	e2a9      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	}
	else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //BW or BS
 8002136:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b42      	cmp	r3, #66	@ 0x42
 800213c:	d13d      	bne.n	80021ba <HAL_UART_RxCpltCallback+0x22a>
 800213e:	4b2e      	ldr	r3, [pc, #184]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8002140:	785b      	ldrb	r3, [r3, #1]
 8002142:	2b57      	cmp	r3, #87	@ 0x57
 8002144:	d003      	beq.n	800214e <HAL_UART_RxCpltCallback+0x1be>
 8002146:	4b2c      	ldr	r3, [pc, #176]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	2b53      	cmp	r3, #83	@ 0x53
 800214c:	d135      	bne.n	80021ba <HAL_UART_RxCpltCallback+0x22a>
		manual_mode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 800214e:	4b2a      	ldr	r3, [pc, #168]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8002150:	789b      	ldrb	r3, [r3, #2]
 8002152:	2b2d      	cmp	r3, #45	@ 0x2d
 8002154:	d105      	bne.n	8002162 <HAL_UART_RxCpltCallback+0x1d2>
 8002156:	4b28      	ldr	r3, [pc, #160]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8002158:	78db      	ldrb	r3, [r3, #3]
 800215a:	2b2d      	cmp	r3, #45	@ 0x2d
 800215c:	d101      	bne.n	8002162 <HAL_UART_RxCpltCallback+0x1d2>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_UART_RxCpltCallback+0x1d4>
 8002162:	2300      	movs	r3, #0
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b25      	ldr	r3, [pc, #148]	@ (80021fc <HAL_UART_RxCpltCallback+0x26c>)
 8002168:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 800216a:	4b23      	ldr	r3, [pc, #140]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 800216c:	785b      	ldrb	r3, [r3, #1]
 800216e:	2b53      	cmp	r3, #83	@ 0x53
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	4b31      	ldr	r3, [pc, #196]	@ (8002240 <HAL_UART_RxCpltCallback+0x2b0>)
 800217c:	701a      	strb	r2, [r3, #0]
		__ADD_CMD(cmdq, 2, val);
 800217e:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	4a28      	ldr	r2, [pc, #160]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	2202      	movs	r2, #2
 800218a:	711a      	strb	r2, [r3, #4]
 800218c:	4b25      	ldr	r3, [pc, #148]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	b291      	uxth	r1, r2
 8002194:	4a23      	ldr	r2, [pc, #140]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	460a      	mov	r2, r1
 800219c:	80da      	strh	r2, [r3, #6]
 800219e:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 80021a6:	7892      	ldrb	r2, [r2, #2]
 80021a8:	fb93 f1f2 	sdiv	r1, r3, r2
 80021ac:	fb01 f202 	mul.w	r2, r1, r2
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <HAL_UART_RxCpltCallback+0x294>)
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e267      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L') { // FL
 80021ba:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b46      	cmp	r3, #70	@ 0x46
 80021c0:	d15f      	bne.n	8002282 <HAL_UART_RxCpltCallback+0x2f2>
 80021c2:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 80021c4:	785b      	ldrb	r3, [r3, #1]
 80021c6:	2b4c      	cmp	r3, #76	@ 0x4c
 80021c8:	d15b      	bne.n	8002282 <HAL_UART_RxCpltCallback+0x2f2>
		manual_mode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 80021ca:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 80021cc:	789b      	ldrb	r3, [r3, #2]
 80021ce:	2b2d      	cmp	r3, #45	@ 0x2d
 80021d0:	d105      	bne.n	80021de <HAL_UART_RxCpltCallback+0x24e>
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 80021d4:	78db      	ldrb	r3, [r3, #3]
 80021d6:	2b2d      	cmp	r3, #45	@ 0x2d
 80021d8:	d101      	bne.n	80021de <HAL_UART_RxCpltCallback+0x24e>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_UART_RxCpltCallback+0x250>
 80021de:	2300      	movs	r3, #0
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_UART_RxCpltCallback+0x26c>)
 80021e4:	701a      	strb	r2, [r3, #0]
		__ADD_CMD(cmdq, 3 + (manual_mode ? 0 : 4), val);
 80021e6:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_UART_RxCpltCallback+0x26c>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d02a      	beq.n	8002244 <HAL_UART_RxCpltCallback+0x2b4>
 80021ee:	2103      	movs	r1, #3
 80021f0:	e029      	b.n	8002246 <HAL_UART_RxCpltCallback+0x2b6>
 80021f2:	bf00      	nop
 80021f4:	2000015d 	.word	0x2000015d
 80021f8:	200006b4 	.word	0x200006b4
 80021fc:	200007ec 	.word	0x200007ec
 8002200:	200005c8 	.word	0x200005c8
 8002204:	20000000 	.word	0x20000000
 8002208:	20000001 	.word	0x20000001
 800220c:	20000798 	.word	0x20000798
 8002210:	20000756 	.word	0x20000756
 8002214:	20000758 	.word	0x20000758
 8002218:	2000076c 	.word	0x2000076c
 800221c:	20000780 	.word	0x20000780
 8002220:	200007a8 	.word	0x200007a8
 8002224:	200007b8 	.word	0x200007b8
 8002228:	200007b4 	.word	0x200007b4
 800222c:	08013970 	.word	0x08013970
 8002230:	200007f0 	.word	0x200007f0
 8002234:	08013978 	.word	0x08013978
 8002238:	20000610 	.word	0x20000610
 800223c:	08013980 	.word	0x08013980
 8002240:	20000002 	.word	0x20000002
 8002244:	2107      	movs	r1, #7
 8002246:	4b8d      	ldr	r3, [pc, #564]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4a8c      	ldr	r2, [pc, #560]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	460a      	mov	r2, r1
 8002252:	711a      	strb	r2, [r3, #4]
 8002254:	4b89      	ldr	r3, [pc, #548]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	b291      	uxth	r1, r2
 800225c:	4a87      	ldr	r2, [pc, #540]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	460a      	mov	r2, r1
 8002264:	80da      	strh	r2, [r3, #6]
 8002266:	4b85      	ldr	r3, [pc, #532]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	4a83      	ldr	r2, [pc, #524]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 800226e:	7892      	ldrb	r2, [r2, #2]
 8002270:	fb93 f1f2 	sdiv	r1, r3, r2
 8002274:	fb01 f202 	mul.w	r2, r1, r2
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	b2da      	uxtb	r2, r3
 800227c:	4b7f      	ldr	r3, [pc, #508]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e203      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R') { // FR
 8002282:	4b7f      	ldr	r3, [pc, #508]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b46      	cmp	r3, #70	@ 0x46
 8002288:	d136      	bne.n	80022f8 <HAL_UART_RxCpltCallback+0x368>
 800228a:	4b7d      	ldr	r3, [pc, #500]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 800228c:	785b      	ldrb	r3, [r3, #1]
 800228e:	2b52      	cmp	r3, #82	@ 0x52
 8002290:	d132      	bne.n	80022f8 <HAL_UART_RxCpltCallback+0x368>
		manual_mode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8002292:	4b7b      	ldr	r3, [pc, #492]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 8002294:	789b      	ldrb	r3, [r3, #2]
 8002296:	2b2d      	cmp	r3, #45	@ 0x2d
 8002298:	d105      	bne.n	80022a6 <HAL_UART_RxCpltCallback+0x316>
 800229a:	4b79      	ldr	r3, [pc, #484]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 800229c:	78db      	ldrb	r3, [r3, #3]
 800229e:	2b2d      	cmp	r3, #45	@ 0x2d
 80022a0:	d101      	bne.n	80022a6 <HAL_UART_RxCpltCallback+0x316>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_UART_RxCpltCallback+0x318>
 80022a6:	2300      	movs	r3, #0
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b76      	ldr	r3, [pc, #472]	@ (8002484 <HAL_UART_RxCpltCallback+0x4f4>)
 80022ac:	701a      	strb	r2, [r3, #0]
		__ADD_CMD(cmdq, 4 + (manual_mode ? 0 : 4), val);
 80022ae:	4b75      	ldr	r3, [pc, #468]	@ (8002484 <HAL_UART_RxCpltCallback+0x4f4>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_UART_RxCpltCallback+0x32a>
 80022b6:	2104      	movs	r1, #4
 80022b8:	e000      	b.n	80022bc <HAL_UART_RxCpltCallback+0x32c>
 80022ba:	2108      	movs	r1, #8
 80022bc:	4b6f      	ldr	r3, [pc, #444]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4a6e      	ldr	r2, [pc, #440]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	460a      	mov	r2, r1
 80022c8:	711a      	strb	r2, [r3, #4]
 80022ca:	4b6c      	ldr	r3, [pc, #432]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	b291      	uxth	r1, r2
 80022d2:	4a6a      	ldr	r2, [pc, #424]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	460a      	mov	r2, r1
 80022da:	80da      	strh	r2, [r3, #6]
 80022dc:	4b67      	ldr	r3, [pc, #412]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	4a66      	ldr	r2, [pc, #408]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80022e4:	7892      	ldrb	r2, [r2, #2]
 80022e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80022ea:	fb01 f202 	mul.w	r2, r1, r2
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b62      	ldr	r3, [pc, #392]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	e1c8      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L') { // BL
 80022f8:	4b61      	ldr	r3, [pc, #388]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b42      	cmp	r3, #66	@ 0x42
 80022fe:	d136      	bne.n	800236e <HAL_UART_RxCpltCallback+0x3de>
 8002300:	4b5f      	ldr	r3, [pc, #380]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 8002302:	785b      	ldrb	r3, [r3, #1]
 8002304:	2b4c      	cmp	r3, #76	@ 0x4c
 8002306:	d132      	bne.n	800236e <HAL_UART_RxCpltCallback+0x3de>
		manual_mode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8002308:	4b5d      	ldr	r3, [pc, #372]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 800230a:	789b      	ldrb	r3, [r3, #2]
 800230c:	2b2d      	cmp	r3, #45	@ 0x2d
 800230e:	d105      	bne.n	800231c <HAL_UART_RxCpltCallback+0x38c>
 8002310:	4b5b      	ldr	r3, [pc, #364]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 8002312:	78db      	ldrb	r3, [r3, #3]
 8002314:	2b2d      	cmp	r3, #45	@ 0x2d
 8002316:	d101      	bne.n	800231c <HAL_UART_RxCpltCallback+0x38c>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_UART_RxCpltCallback+0x38e>
 800231c:	2300      	movs	r3, #0
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b58      	ldr	r3, [pc, #352]	@ (8002484 <HAL_UART_RxCpltCallback+0x4f4>)
 8002322:	701a      	strb	r2, [r3, #0]
		__ADD_CMD(cmdq, 5 + (manual_mode ? 0 : 4), val);
 8002324:	4b57      	ldr	r3, [pc, #348]	@ (8002484 <HAL_UART_RxCpltCallback+0x4f4>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_UART_RxCpltCallback+0x3a0>
 800232c:	2105      	movs	r1, #5
 800232e:	e000      	b.n	8002332 <HAL_UART_RxCpltCallback+0x3a2>
 8002330:	2109      	movs	r1, #9
 8002332:	4b52      	ldr	r3, [pc, #328]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4a51      	ldr	r2, [pc, #324]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	460a      	mov	r2, r1
 800233e:	711a      	strb	r2, [r3, #4]
 8002340:	4b4e      	ldr	r3, [pc, #312]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	b291      	uxth	r1, r2
 8002348:	4a4c      	ldr	r2, [pc, #304]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	460a      	mov	r2, r1
 8002350:	80da      	strh	r2, [r3, #6]
 8002352:	4b4a      	ldr	r3, [pc, #296]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	4a48      	ldr	r2, [pc, #288]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 800235a:	7892      	ldrb	r2, [r2, #2]
 800235c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002360:	fb01 f202 	mul.w	r2, r1, r2
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b44      	ldr	r3, [pc, #272]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e18d      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R') { // BR
 800236e:	4b44      	ldr	r3, [pc, #272]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b42      	cmp	r3, #66	@ 0x42
 8002374:	d136      	bne.n	80023e4 <HAL_UART_RxCpltCallback+0x454>
 8002376:	4b42      	ldr	r3, [pc, #264]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 8002378:	785b      	ldrb	r3, [r3, #1]
 800237a:	2b52      	cmp	r3, #82	@ 0x52
 800237c:	d132      	bne.n	80023e4 <HAL_UART_RxCpltCallback+0x454>
		manual_mode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 800237e:	4b40      	ldr	r3, [pc, #256]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 8002380:	789b      	ldrb	r3, [r3, #2]
 8002382:	2b2d      	cmp	r3, #45	@ 0x2d
 8002384:	d105      	bne.n	8002392 <HAL_UART_RxCpltCallback+0x402>
 8002386:	4b3e      	ldr	r3, [pc, #248]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 8002388:	78db      	ldrb	r3, [r3, #3]
 800238a:	2b2d      	cmp	r3, #45	@ 0x2d
 800238c:	d101      	bne.n	8002392 <HAL_UART_RxCpltCallback+0x402>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_UART_RxCpltCallback+0x404>
 8002392:	2300      	movs	r3, #0
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b3b      	ldr	r3, [pc, #236]	@ (8002484 <HAL_UART_RxCpltCallback+0x4f4>)
 8002398:	701a      	strb	r2, [r3, #0]
		__ADD_CMD(cmdq, 6 + (manual_mode ? 0 : 4), val);
 800239a:	4b3a      	ldr	r3, [pc, #232]	@ (8002484 <HAL_UART_RxCpltCallback+0x4f4>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_UART_RxCpltCallback+0x416>
 80023a2:	2106      	movs	r1, #6
 80023a4:	e000      	b.n	80023a8 <HAL_UART_RxCpltCallback+0x418>
 80023a6:	210a      	movs	r1, #10
 80023a8:	4b34      	ldr	r3, [pc, #208]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4a33      	ldr	r2, [pc, #204]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	460a      	mov	r2, r1
 80023b4:	711a      	strb	r2, [r3, #4]
 80023b6:	4b31      	ldr	r3, [pc, #196]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	b291      	uxth	r1, r2
 80023be:	4a2f      	ldr	r2, [pc, #188]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	460a      	mov	r2, r1
 80023c6:	80da      	strh	r2, [r3, #6]
 80023c8:	4b2c      	ldr	r3, [pc, #176]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	4a2b      	ldr	r2, [pc, #172]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80023d0:	7892      	ldrb	r2, [r2, #2]
 80023d2:	fb93 f1f2 	sdiv	r1, r3, r2
 80023d6:	fb01 f202 	mul.w	r2, r1, r2
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4b27      	ldr	r3, [pc, #156]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	e152      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	}
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L') __ADD_CMD(cmdq, 11, val); // TL turn left max
 80023e4:	4b26      	ldr	r3, [pc, #152]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b54      	cmp	r3, #84	@ 0x54
 80023ea:	d121      	bne.n	8002430 <HAL_UART_RxCpltCallback+0x4a0>
 80023ec:	4b24      	ldr	r3, [pc, #144]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	2b4c      	cmp	r3, #76	@ 0x4c
 80023f2:	d11d      	bne.n	8002430 <HAL_UART_RxCpltCallback+0x4a0>
 80023f4:	4b21      	ldr	r3, [pc, #132]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4a20      	ldr	r2, [pc, #128]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	220b      	movs	r2, #11
 8002400:	711a      	strb	r2, [r3, #4]
 8002402:	4b1e      	ldr	r3, [pc, #120]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	b291      	uxth	r1, r2
 800240a:	4a1c      	ldr	r2, [pc, #112]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	460a      	mov	r2, r1
 8002412:	80da      	strh	r2, [r3, #6]
 8002414:	4b19      	ldr	r3, [pc, #100]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	3301      	adds	r3, #1
 800241a:	4a18      	ldr	r2, [pc, #96]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 800241c:	7892      	ldrb	r2, [r2, #2]
 800241e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002422:	fb01 f202 	mul.w	r2, r1, r2
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b14      	ldr	r3, [pc, #80]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	e12c      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R') __ADD_CMD(cmdq, 12, val); // TR turn right max
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b54      	cmp	r3, #84	@ 0x54
 8002436:	d127      	bne.n	8002488 <HAL_UART_RxCpltCallback+0x4f8>
 8002438:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <HAL_UART_RxCpltCallback+0x4f0>)
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	2b52      	cmp	r3, #82	@ 0x52
 800243e:	d123      	bne.n	8002488 <HAL_UART_RxCpltCallback+0x4f8>
 8002440:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4a0d      	ldr	r2, [pc, #52]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	220c      	movs	r2, #12
 800244c:	711a      	strb	r2, [r3, #4]
 800244e:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	b291      	uxth	r1, r2
 8002456:	4a09      	ldr	r2, [pc, #36]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	460a      	mov	r2, r1
 800245e:	80da      	strh	r2, [r3, #6]
 8002460:	4b06      	ldr	r3, [pc, #24]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	4a05      	ldr	r2, [pc, #20]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002468:	7892      	ldrb	r2, [r2, #2]
 800246a:	fb93 f1f2 	sdiv	r1, r3, r2
 800246e:	fb01 f202 	mul.w	r2, r1, r2
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b01      	ldr	r3, [pc, #4]	@ (800247c <HAL_UART_RxCpltCallback+0x4ec>)
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	e106      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
 800247c:	200007b8 	.word	0x200007b8
 8002480:	200006b4 	.word	0x200006b4
 8002484:	200007ec 	.word	0x200007ec
	else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R') __ADD_CMD(cmdq, 13, val); // test IR sensor
 8002488:	4b97      	ldr	r3, [pc, #604]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b49      	cmp	r3, #73	@ 0x49
 800248e:	d121      	bne.n	80024d4 <HAL_UART_RxCpltCallback+0x544>
 8002490:	4b95      	ldr	r3, [pc, #596]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 8002492:	785b      	ldrb	r3, [r3, #1]
 8002494:	2b52      	cmp	r3, #82	@ 0x52
 8002496:	d11d      	bne.n	80024d4 <HAL_UART_RxCpltCallback+0x544>
 8002498:	4b94      	ldr	r3, [pc, #592]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4a93      	ldr	r2, [pc, #588]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	220d      	movs	r2, #13
 80024a4:	711a      	strb	r2, [r3, #4]
 80024a6:	4b91      	ldr	r3, [pc, #580]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	b291      	uxth	r1, r2
 80024ae:	4a8f      	ldr	r2, [pc, #572]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	460a      	mov	r2, r1
 80024b6:	80da      	strh	r2, [r3, #6]
 80024b8:	4b8c      	ldr	r3, [pc, #560]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	4a8b      	ldr	r2, [pc, #556]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80024c0:	7892      	ldrb	r2, [r2, #2]
 80024c2:	fb93 f1f2 	sdiv	r1, r3, r2
 80024c6:	fb01 f202 	mul.w	r2, r1, r2
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4b87      	ldr	r3, [pc, #540]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e0da      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T') __ADD_CMD(cmdq, 14, val); // DT move until specified distance from obstacle
 80024d4:	4b84      	ldr	r3, [pc, #528]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b44      	cmp	r3, #68	@ 0x44
 80024da:	d121      	bne.n	8002520 <HAL_UART_RxCpltCallback+0x590>
 80024dc:	4b82      	ldr	r3, [pc, #520]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 80024de:	785b      	ldrb	r3, [r3, #1]
 80024e0:	2b54      	cmp	r3, #84	@ 0x54
 80024e2:	d11d      	bne.n	8002520 <HAL_UART_RxCpltCallback+0x590>
 80024e4:	4b81      	ldr	r3, [pc, #516]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4a80      	ldr	r2, [pc, #512]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	220e      	movs	r2, #14
 80024f0:	711a      	strb	r2, [r3, #4]
 80024f2:	4b7e      	ldr	r3, [pc, #504]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	b291      	uxth	r1, r2
 80024fa:	4a7c      	ldr	r2, [pc, #496]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	460a      	mov	r2, r1
 8002502:	80da      	strh	r2, [r3, #6]
 8002504:	4b79      	ldr	r3, [pc, #484]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	4a78      	ldr	r2, [pc, #480]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 800250c:	7892      	ldrb	r2, [r2, #2]
 800250e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002512:	fb01 f202 	mul.w	r2, r1, r2
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b74      	ldr	r3, [pc, #464]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	e0b4      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	else if (aRxBuffer[0] == 'Z' && aRxBuffer[1] == 'Z') __ADD_CMD(cmdq, 15, val); // ZZ buzzer
 8002520:	4b71      	ldr	r3, [pc, #452]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b5a      	cmp	r3, #90	@ 0x5a
 8002526:	d121      	bne.n	800256c <HAL_UART_RxCpltCallback+0x5dc>
 8002528:	4b6f      	ldr	r3, [pc, #444]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b5a      	cmp	r3, #90	@ 0x5a
 800252e:	d11d      	bne.n	800256c <HAL_UART_RxCpltCallback+0x5dc>
 8002530:	4b6e      	ldr	r3, [pc, #440]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4a6d      	ldr	r2, [pc, #436]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	220f      	movs	r2, #15
 800253c:	711a      	strb	r2, [r3, #4]
 800253e:	4b6b      	ldr	r3, [pc, #428]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	b291      	uxth	r1, r2
 8002546:	4a69      	ldr	r2, [pc, #420]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	460a      	mov	r2, r1
 800254e:	80da      	strh	r2, [r3, #6]
 8002550:	4b66      	ldr	r3, [pc, #408]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	4a65      	ldr	r2, [pc, #404]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002558:	7892      	ldrb	r2, [r2, #2]
 800255a:	fb93 f1f2 	sdiv	r1, r3, r2
 800255e:	fb01 f202 	mul.w	r2, r1, r2
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b61      	ldr	r3, [pc, #388]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e08e      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'X') __ADD_CMD(cmdq, 16, val); // WN fastest path
 800256c:	4b5e      	ldr	r3, [pc, #376]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b57      	cmp	r3, #87	@ 0x57
 8002572:	d121      	bne.n	80025b8 <HAL_UART_RxCpltCallback+0x628>
 8002574:	4b5c      	ldr	r3, [pc, #368]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	2b58      	cmp	r3, #88	@ 0x58
 800257a:	d11d      	bne.n	80025b8 <HAL_UART_RxCpltCallback+0x628>
 800257c:	4b5b      	ldr	r3, [pc, #364]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4a5a      	ldr	r2, [pc, #360]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	2210      	movs	r2, #16
 8002588:	711a      	strb	r2, [r3, #4]
 800258a:	4b58      	ldr	r3, [pc, #352]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	b291      	uxth	r1, r2
 8002592:	4a56      	ldr	r2, [pc, #344]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	460a      	mov	r2, r1
 800259a:	80da      	strh	r2, [r3, #6]
 800259c:	4b53      	ldr	r3, [pc, #332]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	3301      	adds	r3, #1
 80025a2:	4a52      	ldr	r2, [pc, #328]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80025a4:	7892      	ldrb	r2, [r2, #2]
 80025a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80025aa:	fb01 f202 	mul.w	r2, r1, r2
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b4e      	ldr	r3, [pc, #312]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e068      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'C') __ADD_CMD(cmdq, 17, val); // FC fastest car
 80025b8:	4b4b      	ldr	r3, [pc, #300]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b46      	cmp	r3, #70	@ 0x46
 80025be:	d121      	bne.n	8002604 <HAL_UART_RxCpltCallback+0x674>
 80025c0:	4b49      	ldr	r3, [pc, #292]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	2b43      	cmp	r3, #67	@ 0x43
 80025c6:	d11d      	bne.n	8002604 <HAL_UART_RxCpltCallback+0x674>
 80025c8:	4b48      	ldr	r3, [pc, #288]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4a47      	ldr	r2, [pc, #284]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	2211      	movs	r2, #17
 80025d4:	711a      	strb	r2, [r3, #4]
 80025d6:	4b45      	ldr	r3, [pc, #276]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	b291      	uxth	r1, r2
 80025de:	4a43      	ldr	r2, [pc, #268]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	460a      	mov	r2, r1
 80025e6:	80da      	strh	r2, [r3, #6]
 80025e8:	4b40      	ldr	r3, [pc, #256]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	3301      	adds	r3, #1
 80025ee:	4a3f      	ldr	r2, [pc, #252]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80025f0:	7892      	ldrb	r2, [r2, #2]
 80025f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80025f6:	fb01 f202 	mul.w	r2, r1, r2
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4b3b      	ldr	r3, [pc, #236]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e042      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	else if (aRxBuffer[0] == 'A') __ADD_CMD(cmdq, 88, val); // anti-clockwise rotation with variable
 8002604:	4b38      	ldr	r3, [pc, #224]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b41      	cmp	r3, #65	@ 0x41
 800260a:	d11d      	bne.n	8002648 <HAL_UART_RxCpltCallback+0x6b8>
 800260c:	4b37      	ldr	r3, [pc, #220]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4a36      	ldr	r2, [pc, #216]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	2258      	movs	r2, #88	@ 0x58
 8002618:	711a      	strb	r2, [r3, #4]
 800261a:	4b34      	ldr	r3, [pc, #208]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	b291      	uxth	r1, r2
 8002622:	4a32      	ldr	r2, [pc, #200]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	460a      	mov	r2, r1
 800262a:	80da      	strh	r2, [r3, #6]
 800262c:	4b2f      	ldr	r3, [pc, #188]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	3301      	adds	r3, #1
 8002632:	4a2e      	ldr	r2, [pc, #184]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002634:	7892      	ldrb	r2, [r2, #2]
 8002636:	fb93 f1f2 	sdiv	r1, r3, r2
 800263a:	fb01 f202 	mul.w	r2, r1, r2
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b2a      	ldr	r3, [pc, #168]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e020      	b.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
	else if (aRxBuffer[0] == 'C') __ADD_CMD(cmdq, 89, val); // clockwise rotation with variable
 8002648:	4b27      	ldr	r3, [pc, #156]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b43      	cmp	r3, #67	@ 0x43
 800264e:	d11c      	bne.n	800268a <HAL_UART_RxCpltCallback+0x6fa>
 8002650:	4b26      	ldr	r3, [pc, #152]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4a25      	ldr	r2, [pc, #148]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	2259      	movs	r2, #89	@ 0x59
 800265c:	711a      	strb	r2, [r3, #4]
 800265e:	4b23      	ldr	r3, [pc, #140]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	b291      	uxth	r1, r2
 8002666:	4a21      	ldr	r2, [pc, #132]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	460a      	mov	r2, r1
 800266e:	80da      	strh	r2, [r3, #6]
 8002670:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	4a1d      	ldr	r2, [pc, #116]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002678:	7892      	ldrb	r2, [r2, #2]
 800267a:	fb93 f1f2 	sdiv	r1, r3, r2
 800267e:	fb01 f202 	mul.w	r2, r1, r2
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002688:	701a      	strb	r2, [r3, #0]

	if (!__IS_EMPTY(cmdq)) {
 800268a:	4b18      	ldr	r3, [pc, #96]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	4b17      	ldr	r3, [pc, #92]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002690:	785b      	ldrb	r3, [r3, #1]
 8002692:	429a      	cmp	r2, r3
 8002694:	d019      	beq.n	80026ca <HAL_UART_RxCpltCallback+0x73a>
		__READ_CMD(cmdq, curCmd, msg);
 8002696:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 8002698:	785b      	ldrb	r3, [r3, #1]
 800269a:	4a15      	ldr	r2, [pc, #84]	@ (80026f0 <HAL_UART_RxCpltCallback+0x760>)
 800269c:	4913      	ldr	r1, [pc, #76]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80026a8:	785b      	ldrb	r3, [r3, #1]
 80026aa:	3301      	adds	r3, #1
 80026ac:	4a0f      	ldr	r2, [pc, #60]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80026ae:	7892      	ldrb	r2, [r2, #2]
 80026b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80026b4:	fb01 f202 	mul.w	r2, r1, r2
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4b0b      	ldr	r3, [pc, #44]	@ (80026ec <HAL_UART_RxCpltCallback+0x75c>)
 80026be:	705a      	strb	r2, [r3, #1]
 80026c0:	4a0c      	ldr	r2, [pc, #48]	@ (80026f4 <HAL_UART_RxCpltCallback+0x764>)
 80026c2:	210f      	movs	r1, #15
 80026c4:	480c      	ldr	r0, [pc, #48]	@ (80026f8 <HAL_UART_RxCpltCallback+0x768>)
 80026c6:	f00e f81b 	bl	8010700 <sniprintf>
	}

	// clear aRx buffer
	  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 80026ca:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <HAL_UART_RxCpltCallback+0x76c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
	  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 80026d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <HAL_UART_RxCpltCallback+0x770>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4904      	ldr	r1, [pc, #16]	@ (80026e8 <HAL_UART_RxCpltCallback+0x758>)
 80026d8:	4808      	ldr	r0, [pc, #32]	@ (80026fc <HAL_UART_RxCpltCallback+0x76c>)
 80026da:	f009 fadc 	bl	800bc96 <HAL_UART_Receive_IT>
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200006b4 	.word	0x200006b4
 80026ec:	200007b8 	.word	0x200007b8
 80026f0:	200007b4 	.word	0x200007b4
 80026f4:	08013980 	.word	0x08013980
 80026f8:	200007f0 	.word	0x200007f0
 80026fc:	20000610 	.word	0x20000610
 8002700:	20000003 	.word	0x20000003
 8002704:	00000000 	.word	0x00000000

08002708 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	//This function is for Interrupt generated by timer input capture
	if(htim==&htim4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) //if the interrupt is from timer4ch4 (ULTRA_ECHO)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a43      	ldr	r2, [pc, #268]	@ (8002820 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d178      	bne.n	800280a <HAL_TIM_IC_CaptureCallback+0x102>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	7f1b      	ldrb	r3, [r3, #28]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d174      	bne.n	800280a <HAL_TIM_IC_CaptureCallback+0x102>
	{
		if(first_capture == 0)
 8002720:	4b40      	ldr	r3, [pc, #256]	@ (8002824 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d11a      	bne.n	800275e <HAL_TIM_IC_CaptureCallback+0x56>
		{
			ultra_tc1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); //read first captured time
 8002728:	210c      	movs	r1, #12
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f008 fc44 	bl	800afb8 <HAL_TIM_ReadCapturedValue>
 8002730:	4603      	mov	r3, r0
 8002732:	4a3d      	ldr	r2, [pc, #244]	@ (8002828 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002734:	6013      	str	r3, [r2, #0]
			first_capture = 1; //Set first capture True; First captured is recorded
 8002736:	4b3b      	ldr	r3, [pc, #236]	@ (8002824 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING); //Change capture polarity to falling
 800273c:	4b38      	ldr	r3, [pc, #224]	@ (8002820 <HAL_TIM_IC_CaptureCallback+0x118>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6a1a      	ldr	r2, [r3, #32]
 8002742:	4b37      	ldr	r3, [pc, #220]	@ (8002820 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 800274a:	621a      	str	r2, [r3, #32]
 800274c:	4b34      	ldr	r3, [pc, #208]	@ (8002820 <HAL_TIM_IC_CaptureCallback+0x118>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6a1a      	ldr	r2, [r3, #32]
 8002752:	4b33      	ldr	r3, [pc, #204]	@ (8002820 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800275a:	621a      	str	r2, [r3, #32]

			//Set polarity to rising
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 800275c:	e055      	b.n	800280a <HAL_TIM_IC_CaptureCallback+0x102>
		else if (first_capture == 1) //for second time capture; first time has already been recorded
 800275e:	4b31      	ldr	r3, [pc, #196]	@ (8002824 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d151      	bne.n	800280a <HAL_TIM_IC_CaptureCallback+0x102>
			ultra_tc2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002766:	210c      	movs	r1, #12
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f008 fc25 	bl	800afb8 <HAL_TIM_ReadCapturedValue>
 800276e:	4603      	mov	r3, r0
 8002770:	4a2e      	ldr	r2, [pc, #184]	@ (800282c <HAL_TIM_IC_CaptureCallback+0x124>)
 8002772:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0); //reset counter
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24
			if(ultra_tc2 > ultra_tc1)
 800277c:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <HAL_TIM_IC_CaptureCallback+0x124>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b29      	ldr	r3, [pc, #164]	@ (8002828 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d907      	bls.n	8002798 <HAL_TIM_IC_CaptureCallback+0x90>
				ultra_diff = ultra_tc2 - ultra_tc1;
 8002788:	4b28      	ldr	r3, [pc, #160]	@ (800282c <HAL_TIM_IC_CaptureCallback+0x124>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b26      	ldr	r3, [pc, #152]	@ (8002828 <HAL_TIM_IC_CaptureCallback+0x120>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	4a27      	ldr	r2, [pc, #156]	@ (8002830 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e009      	b.n	80027ac <HAL_TIM_IC_CaptureCallback+0xa4>
				ultra_diff = (65535 - ultra_tc1) + ultra_tc2;
 8002798:	4b24      	ldr	r3, [pc, #144]	@ (800282c <HAL_TIM_IC_CaptureCallback+0x124>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b22      	ldr	r3, [pc, #136]	@ (8002828 <HAL_TIM_IC_CaptureCallback+0x120>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80027a6:	33ff      	adds	r3, #255	@ 0xff
 80027a8:	4a21      	ldr	r2, [pc, #132]	@ (8002830 <HAL_TIM_IC_CaptureCallback+0x128>)
 80027aa:	6013      	str	r3, [r2, #0]
			ultra_distance = ultra_diff * 0.034/2;
 80027ac:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <HAL_TIM_IC_CaptureCallback+0x128>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fea7 	bl	8000504 <__aeabi_ui2d>
 80027b6:	a318      	add	r3, pc, #96	@ (adr r3, 8002818 <HAL_TIM_IC_CaptureCallback+0x110>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fd ff1c 	bl	80005f8 <__aeabi_dmul>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80027d0:	f7fe f83c 	bl	800084c <__aeabi_ddiv>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe f9e4 	bl	8000ba8 <__aeabi_d2uiz>
 80027e0:	4603      	mov	r3, r0
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80027e6:	701a      	strb	r2, [r3, #0]
			first_capture = 0; //Reset after computation
 80027e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 80027ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <HAL_TIM_IC_CaptureCallback+0x118>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a1a      	ldr	r2, [r3, #32]
 80027f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <HAL_TIM_IC_CaptureCallback+0x118>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80027fc:	621a      	str	r2, [r3, #32]
 80027fe:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a12      	ldr	r2, [r2, #32]
 8002808:	621a      	str	r2, [r3, #32]
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	f3af 8000 	nop.w
 8002818:	b020c49c 	.word	0xb020c49c
 800281c:	3fa16872 	.word	0x3fa16872
 8002820:	20000538 	.word	0x20000538
 8002824:	200006be 	.word	0x200006be
 8002828:	200006c0 	.word	0x200006c0
 800282c:	200006c4 	.word	0x200006c4
 8002830:	200006c8 	.word	0x200006c8
 8002834:	200006bf 	.word	0x200006bf

08002838 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	ir_sensor_a_sum = adcResultsDMA[0] + adcResultsDMA[2] + adcResultsDMA[4] + adcResultsDMA[6] + adcResultsDMA[8]+ adcResultsDMA[10] + adcResultsDMA[12] + adcResultsDMA[14] + adcResultsDMA[16] + adcResultsDMA[18];
 8002840:	4b34      	ldr	r3, [pc, #208]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	b29a      	uxth	r2, r3
 8002846:	4b33      	ldr	r3, [pc, #204]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 8002848:	889b      	ldrh	r3, [r3, #4]
 800284a:	b29b      	uxth	r3, r3
 800284c:	4413      	add	r3, r2
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b30      	ldr	r3, [pc, #192]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 8002852:	891b      	ldrh	r3, [r3, #8]
 8002854:	b29b      	uxth	r3, r3
 8002856:	4413      	add	r3, r2
 8002858:	b29a      	uxth	r2, r3
 800285a:	4b2e      	ldr	r3, [pc, #184]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 800285c:	899b      	ldrh	r3, [r3, #12]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4413      	add	r3, r2
 8002862:	b29a      	uxth	r2, r3
 8002864:	4b2b      	ldr	r3, [pc, #172]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 8002866:	8a1b      	ldrh	r3, [r3, #16]
 8002868:	b29b      	uxth	r3, r3
 800286a:	4413      	add	r3, r2
 800286c:	b29a      	uxth	r2, r3
 800286e:	4b29      	ldr	r3, [pc, #164]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 8002870:	8a9b      	ldrh	r3, [r3, #20]
 8002872:	b29b      	uxth	r3, r3
 8002874:	4413      	add	r3, r2
 8002876:	b29a      	uxth	r2, r3
 8002878:	4b26      	ldr	r3, [pc, #152]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 800287a:	8b1b      	ldrh	r3, [r3, #24]
 800287c:	b29b      	uxth	r3, r3
 800287e:	4413      	add	r3, r2
 8002880:	b29a      	uxth	r2, r3
 8002882:	4b24      	ldr	r3, [pc, #144]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 8002884:	8b9b      	ldrh	r3, [r3, #28]
 8002886:	b29b      	uxth	r3, r3
 8002888:	4413      	add	r3, r2
 800288a:	b29a      	uxth	r2, r3
 800288c:	4b21      	ldr	r3, [pc, #132]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 800288e:	8c1b      	ldrh	r3, [r3, #32]
 8002890:	b29b      	uxth	r3, r3
 8002892:	4413      	add	r3, r2
 8002894:	b29a      	uxth	r2, r3
 8002896:	4b1f      	ldr	r3, [pc, #124]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 8002898:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800289a:	b29b      	uxth	r3, r3
 800289c:	4413      	add	r3, r2
 800289e:	b29a      	uxth	r2, r3
 80028a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <HAL_ADC_ConvHalfCpltCallback+0xe0>)
 80028a2:	801a      	strh	r2, [r3, #0]
	ir_sensor_b_sum = adcResultsDMA[1] + adcResultsDMA[3] + adcResultsDMA[5] + adcResultsDMA[7] + adcResultsDMA[9]+ adcResultsDMA[11] + adcResultsDMA[13] + adcResultsDMA[15] + adcResultsDMA[17] + adcResultsDMA[19];
 80028a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 80028a6:	885b      	ldrh	r3, [r3, #2]
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 80028ac:	88db      	ldrh	r3, [r3, #6]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	4b17      	ldr	r3, [pc, #92]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 80028b6:	895b      	ldrh	r3, [r3, #10]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	b29a      	uxth	r2, r3
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 80028c0:	89db      	ldrh	r3, [r3, #14]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 80028ca:	8a5b      	ldrh	r3, [r3, #18]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 80028d4:	8adb      	ldrh	r3, [r3, #22]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	4413      	add	r3, r2
 80028da:	b29a      	uxth	r2, r3
 80028dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 80028de:	8b5b      	ldrh	r3, [r3, #26]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 80028e8:	8bdb      	ldrh	r3, [r3, #30]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 80028f2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 80028fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4413      	add	r3, r2
 8002902:	b29a      	uxth	r2, r3
 8002904:	4b05      	ldr	r3, [pc, #20]	@ (800291c <HAL_ADC_ConvHalfCpltCallback+0xe4>)
 8002906:	801a      	strh	r2, [r3, #0]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	200006d8 	.word	0x200006d8
 8002918:	20000728 	.word	0x20000728
 800291c:	2000072a 	.word	0x2000072a

08002920 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	ir_sensor_a_sum = adcResultsDMA[20] + adcResultsDMA[22] + adcResultsDMA[24] + adcResultsDMA[26] + adcResultsDMA[28]+ adcResultsDMA[30] + adcResultsDMA[32] + adcResultsDMA[34] + adcResultsDMA[36] + adcResultsDMA[38];
 8002928:	4b38      	ldr	r3, [pc, #224]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 800292a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292c:	b29a      	uxth	r2, r3
 800292e:	4b37      	ldr	r3, [pc, #220]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 8002930:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002932:	b29b      	uxth	r3, r3
 8002934:	4413      	add	r3, r2
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b34      	ldr	r3, [pc, #208]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 800293a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800293c:	b29b      	uxth	r3, r3
 800293e:	4413      	add	r3, r2
 8002940:	b29a      	uxth	r2, r3
 8002942:	4b32      	ldr	r3, [pc, #200]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 8002944:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002946:	b29b      	uxth	r3, r3
 8002948:	4413      	add	r3, r2
 800294a:	b29a      	uxth	r2, r3
 800294c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 800294e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002950:	b29b      	uxth	r3, r3
 8002952:	4413      	add	r3, r2
 8002954:	b29a      	uxth	r2, r3
 8002956:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 8002958:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800295a:	b29b      	uxth	r3, r3
 800295c:	4413      	add	r3, r2
 800295e:	b29a      	uxth	r2, r3
 8002960:	4b2a      	ldr	r3, [pc, #168]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 8002962:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002966:	b29b      	uxth	r3, r3
 8002968:	4413      	add	r3, r2
 800296a:	b29a      	uxth	r2, r3
 800296c:	4b27      	ldr	r3, [pc, #156]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 800296e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002972:	b29b      	uxth	r3, r3
 8002974:	4413      	add	r3, r2
 8002976:	b29a      	uxth	r2, r3
 8002978:	4b24      	ldr	r3, [pc, #144]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 800297a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800297e:	b29b      	uxth	r3, r3
 8002980:	4413      	add	r3, r2
 8002982:	b29a      	uxth	r2, r3
 8002984:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 8002986:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800298a:	b29b      	uxth	r3, r3
 800298c:	4413      	add	r3, r2
 800298e:	b29a      	uxth	r2, r3
 8002990:	4b1f      	ldr	r3, [pc, #124]	@ (8002a10 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002992:	801a      	strh	r2, [r3, #0]
	ir_sensor_b_sum = adcResultsDMA[21] + adcResultsDMA[23] + adcResultsDMA[25] + adcResultsDMA[27] + adcResultsDMA[29]+ adcResultsDMA[31] + adcResultsDMA[33] + adcResultsDMA[35] + adcResultsDMA[37] + adcResultsDMA[39];
 8002994:	4b1d      	ldr	r3, [pc, #116]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29a      	uxth	r2, r3
 800299a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 800299c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 80029a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 80029b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 80029ba:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4413      	add	r3, r2
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 80029c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 80029ce:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 80029da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 80029e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xec>)
 80029f2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <HAL_ADC_ConvCpltCallback+0xf4>)
 80029fe:	801a      	strh	r2, [r3, #0]

}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	200006d8 	.word	0x200006d8
 8002a10:	20000728 	.word	0x20000728
 8002a14:	2000072a 	.word	0x2000072a

08002a18 <delay_us>:
	btnClicked = 0;
}

//////////////// ULTRASONIC HELPER FUNCTIONS ////////////////
void delay_us(uint16_t us)
{ //delay in microseconds for ultrasonic sensor
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8002a22:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <delay_us+0x30>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < us);
 8002a2a:	bf00      	nop
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <delay_us+0x30>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d3f9      	bcc.n	8002a2c <delay_us+0x14>
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000580 	.word	0x20000580
 8002a4c:	00000000 	.word	0x00000000

08002a50 <ADC_To_Dist>:

//////////////// INFRARED HELPER FUNCTIONS ////////////////
uint16_t ADC_To_Dist(uint16_t raw)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]
	float volt = raw * ADC_REF / ADC_STEPS;
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fd fd61 	bl	8000524 <__aeabi_i2d>
 8002a62:	a320      	add	r3, pc, #128	@ (adr r3, 8002ae4 <ADC_To_Dist+0x94>)
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f7fd fdc6 	bl	80005f8 <__aeabi_dmul>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	4b19      	ldr	r3, [pc, #100]	@ (8002ae0 <ADC_To_Dist+0x90>)
 8002a7a:	f7fd fee7 	bl	800084c <__aeabi_ddiv>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	f7fe f8af 	bl	8000be8 <__aeabi_d2f>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	60fb      	str	r3, [r7, #12]
	return (uint16_t)(29.988 * pow(volt, -1.173));
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7fd fd5a 	bl	8000548 <__aeabi_f2d>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 8002ad0 <ADC_To_Dist+0x80>
 8002a9c:	ec43 2b10 	vmov	d0, r2, r3
 8002aa0:	f00f ff90 	bl	80129c4 <pow>
 8002aa4:	ec51 0b10 	vmov	r0, r1, d0
 8002aa8:	a30b      	add	r3, pc, #44	@ (adr r3, 8002ad8 <ADC_To_Dist+0x88>)
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	f7fd fda3 	bl	80005f8 <__aeabi_dmul>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f7fe f875 	bl	8000ba8 <__aeabi_d2uiz>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	b29b      	uxth	r3, r3
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	f3af 8000 	nop.w
 8002ad0:	a5e353f8 	.word	0xa5e353f8
 8002ad4:	bff2c49b 	.word	0xbff2c49b
 8002ad8:	916872b0 	.word	0x916872b0
 8002adc:	403dfced 	.word	0x403dfced
 8002ae0:	40b00000 	.word	0x40b00000
 8002ae4:	66666666 	.word	0x66666666
 8002ae8:	400a6666 	.word	0x400a6666

08002aec <PIDinit>:

//////////////// PID CONTROLLER HELPER FUNCTIONS ////////////////
void PIDinit(PID *pid, const float Kp, const float Ki, const float Kd)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002af8:	edc7 0a01 	vstr	s1, [r7, #4]
 8002afc:	ed87 1a00 	vstr	s2, [r7]
	pid->Kp = Kp;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	609a      	str	r2, [r3, #8]
	pid->e = 0;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
	pid->eSum = 0;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <PIDReset>:

void PIDReset(PID *pid)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
	pid->e = 0;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
	pid->eSum = 0;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <MoveStraight>:

//////////////// MOTOR DRIVER FUNCTIONS ////////////////
void MoveStraight(const uint8_t speed_mode)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af04      	add	r7, sp, #16
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
	__READ_GYRO_Z(&hi2c1, gZData, gyroZ); //poll to update global
 8002b5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b62:	9302      	str	r3, [sp, #8]
 8002b64:	2302      	movs	r3, #2
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	4ba7      	ldr	r3, [pc, #668]	@ (8002e08 <MoveStraight+0x2b4>)
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	2237      	movs	r2, #55	@ 0x37
 8002b70:	21d0      	movs	r1, #208	@ 0xd0
 8002b72:	48a6      	ldr	r0, [pc, #664]	@ (8002e0c <MoveStraight+0x2b8>)
 8002b74:	f006 f814 	bl	8008ba0 <HAL_I2C_Mem_Read>
 8002b78:	4ba3      	ldr	r3, [pc, #652]	@ (8002e08 <MoveStraight+0x2b4>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	b21a      	sxth	r2, r3
 8002b80:	4ba1      	ldr	r3, [pc, #644]	@ (8002e08 <MoveStraight+0x2b4>)
 8002b82:	785b      	ldrb	r3, [r3, #1]
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b21a      	sxth	r2, r3
 8002b8a:	4ba1      	ldr	r3, [pc, #644]	@ (8002e10 <MoveStraight+0x2bc>)
 8002b8c:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? -1 : 1; //Using RMotor to determine robot direction
 8002b8e:	4ba1      	ldr	r3, [pc, #644]	@ (8002e14 <MoveStraight+0x2c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d102      	bne.n	8002ba2 <MoveStraight+0x4e>
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba0:	e000      	b.n	8002ba4 <MoveStraight+0x50>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	4a9c      	ldr	r2, [pc, #624]	@ (8002e18 <MoveStraight+0x2c4>)
 8002ba6:	6013      	str	r3, [r2, #0]
	curAngle += ((gyroZ >= -4 && gyroZ <= 8) ? 0 : gyroZ);
 8002ba8:	4b99      	ldr	r3, [pc, #612]	@ (8002e10 <MoveStraight+0x2bc>)
 8002baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bae:	f113 0f04 	cmn.w	r3, #4
 8002bb2:	db04      	blt.n	8002bbe <MoveStraight+0x6a>
 8002bb4:	4b96      	ldr	r3, [pc, #600]	@ (8002e10 <MoveStraight+0x2bc>)
 8002bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	dd07      	ble.n	8002bce <MoveStraight+0x7a>
 8002bbe:	4b94      	ldr	r3, [pc, #592]	@ (8002e10 <MoveStraight+0x2bc>)
 8002bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc4:	ee07 3a90 	vmov	s15, r3
 8002bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bcc:	e001      	b.n	8002bd2 <MoveStraight+0x7e>
 8002bce:	eddf 7a93 	vldr	s15, [pc, #588]	@ 8002e1c <MoveStraight+0x2c8>
 8002bd2:	4b93      	ldr	r3, [pc, #588]	@ (8002e20 <MoveStraight+0x2cc>)
 8002bd4:	ed93 7a00 	vldr	s14, [r3]
 8002bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bdc:	4b90      	ldr	r3, [pc, #576]	@ (8002e20 <MoveStraight+0x2cc>)
 8002bde:	edc3 7a00 	vstr	s15, [r3]

	if(speed_mode == SPEED_MODE_TURN) __PID_TURN(pidTurn, curAngle, correction, dir, LMotorPWM, RMotorPWM);
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d162      	bne.n	8002cae <MoveStraight+0x15a>
 8002be8:	4b8e      	ldr	r3, [pc, #568]	@ (8002e24 <MoveStraight+0x2d0>)
 8002bea:	ed93 7a00 	vldr	s14, [r3]
 8002bee:	4b8c      	ldr	r3, [pc, #560]	@ (8002e20 <MoveStraight+0x2cc>)
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf8:	4b8a      	ldr	r3, [pc, #552]	@ (8002e24 <MoveStraight+0x2d0>)
 8002bfa:	edd3 6a01 	vldr	s13, [r3, #4]
 8002bfe:	4b89      	ldr	r3, [pc, #548]	@ (8002e24 <MoveStraight+0x2d0>)
 8002c00:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c0c:	4b85      	ldr	r3, [pc, #532]	@ (8002e24 <MoveStraight+0x2d0>)
 8002c0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c12:	4b84      	ldr	r3, [pc, #528]	@ (8002e24 <MoveStraight+0x2d0>)
 8002c14:	ed93 6a03 	vldr	s12, [r3, #12]
 8002c18:	4b81      	ldr	r3, [pc, #516]	@ (8002e20 <MoveStraight+0x2cc>)
 8002c1a:	edd3 7a00 	vldr	s15, [r3]
 8002c1e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c2e:	ee17 2a90 	vmov	r2, s15
 8002c32:	4b7d      	ldr	r3, [pc, #500]	@ (8002e28 <MoveStraight+0x2d4>)
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	4b7a      	ldr	r3, [pc, #488]	@ (8002e20 <MoveStraight+0x2cc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7a      	ldr	r2, [pc, #488]	@ (8002e24 <MoveStraight+0x2d0>)
 8002c3c:	60d3      	str	r3, [r2, #12]
 8002c3e:	4b79      	ldr	r3, [pc, #484]	@ (8002e24 <MoveStraight+0x2d0>)
 8002c40:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c44:	4b76      	ldr	r3, [pc, #472]	@ (8002e20 <MoveStraight+0x2cc>)
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4e:	4b75      	ldr	r3, [pc, #468]	@ (8002e24 <MoveStraight+0x2d0>)
 8002c50:	edc3 7a04 	vstr	s15, [r3, #16]
 8002c54:	4b74      	ldr	r3, [pc, #464]	@ (8002e28 <MoveStraight+0x2d4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002c5c:	dc06      	bgt.n	8002c6c <MoveStraight+0x118>
 8002c5e:	4b72      	ldr	r3, [pc, #456]	@ (8002e28 <MoveStraight+0x2d4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a72      	ldr	r2, [pc, #456]	@ (8002e2c <MoveStraight+0x2d8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	bfb8      	it	lt
 8002c68:	4613      	movlt	r3, r2
 8002c6a:	e001      	b.n	8002c70 <MoveStraight+0x11c>
 8002c6c:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8002c70:	4a6d      	ldr	r2, [pc, #436]	@ (8002e28 <MoveStraight+0x2d4>)
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b6c      	ldr	r3, [pc, #432]	@ (8002e28 <MoveStraight+0x2d4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	4b67      	ldr	r3, [pc, #412]	@ (8002e18 <MoveStraight+0x2c4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	fb12 f303 	smulbb	r3, r2, r3
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	4b68      	ldr	r3, [pc, #416]	@ (8002e30 <MoveStraight+0x2dc>)
 8002c8e:	801a      	strh	r2, [r3, #0]
 8002c90:	4b65      	ldr	r3, [pc, #404]	@ (8002e28 <MoveStraight+0x2d4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	4b60      	ldr	r3, [pc, #384]	@ (8002e18 <MoveStraight+0x2c4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	fb12 f303 	smulbb	r3, r2, r3
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f5c3 6396 	rsb	r3, r3, #1200	@ 0x4b0
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	4b62      	ldr	r3, [pc, #392]	@ (8002e34 <MoveStraight+0x2e0>)
 8002caa:	801a      	strh	r2, [r3, #0]
 8002cac:	e0eb      	b.n	8002e86 <MoveStraight+0x332>
	else if(speed_mode == SPEED_MODE_SLOW) __PID_SLOW(pidSlow, curAngle, correction, dir, LMotorPWM, RMotorPWM);
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d163      	bne.n	8002d7c <MoveStraight+0x228>
 8002cb4:	4b60      	ldr	r3, [pc, #384]	@ (8002e38 <MoveStraight+0x2e4>)
 8002cb6:	ed93 7a00 	vldr	s14, [r3]
 8002cba:	4b59      	ldr	r3, [pc, #356]	@ (8002e20 <MoveStraight+0x2cc>)
 8002cbc:	edd3 7a00 	vldr	s15, [r3]
 8002cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8002e38 <MoveStraight+0x2e4>)
 8002cc6:	edd3 6a01 	vldr	s13, [r3, #4]
 8002cca:	4b5b      	ldr	r3, [pc, #364]	@ (8002e38 <MoveStraight+0x2e4>)
 8002ccc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd8:	4b57      	ldr	r3, [pc, #348]	@ (8002e38 <MoveStraight+0x2e4>)
 8002cda:	edd3 6a02 	vldr	s13, [r3, #8]
 8002cde:	4b56      	ldr	r3, [pc, #344]	@ (8002e38 <MoveStraight+0x2e4>)
 8002ce0:	ed93 6a03 	vldr	s12, [r3, #12]
 8002ce4:	4b4e      	ldr	r3, [pc, #312]	@ (8002e20 <MoveStraight+0x2cc>)
 8002ce6:	edd3 7a00 	vldr	s15, [r3]
 8002cea:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cfa:	ee17 2a90 	vmov	r2, s15
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002e28 <MoveStraight+0x2d4>)
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	4b47      	ldr	r3, [pc, #284]	@ (8002e20 <MoveStraight+0x2cc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a4c      	ldr	r2, [pc, #304]	@ (8002e38 <MoveStraight+0x2e4>)
 8002d08:	60d3      	str	r3, [r2, #12]
 8002d0a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e38 <MoveStraight+0x2e4>)
 8002d0c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002d10:	4b43      	ldr	r3, [pc, #268]	@ (8002e20 <MoveStraight+0x2cc>)
 8002d12:	edd3 7a00 	vldr	s15, [r3]
 8002d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1a:	4b47      	ldr	r3, [pc, #284]	@ (8002e38 <MoveStraight+0x2e4>)
 8002d1c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002d20:	4b41      	ldr	r3, [pc, #260]	@ (8002e28 <MoveStraight+0x2d4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002d28:	dc06      	bgt.n	8002d38 <MoveStraight+0x1e4>
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e28 <MoveStraight+0x2d4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a43      	ldr	r2, [pc, #268]	@ (8002e3c <MoveStraight+0x2e8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	bfb8      	it	lt
 8002d34:	4613      	movlt	r3, r2
 8002d36:	e001      	b.n	8002d3c <MoveStraight+0x1e8>
 8002d38:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002d3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e28 <MoveStraight+0x2d4>)
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b39      	ldr	r3, [pc, #228]	@ (8002e28 <MoveStraight+0x2d4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	4b34      	ldr	r3, [pc, #208]	@ (8002e18 <MoveStraight+0x2c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	fb12 f303 	smulbb	r3, r2, r3
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f603 03fc 	addw	r3, r3, #2300	@ 0x8fc
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	4b35      	ldr	r3, [pc, #212]	@ (8002e30 <MoveStraight+0x2dc>)
 8002d5a:	801a      	strh	r2, [r3, #0]
 8002d5c:	4b32      	ldr	r3, [pc, #200]	@ (8002e28 <MoveStraight+0x2d4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	4b2d      	ldr	r3, [pc, #180]	@ (8002e18 <MoveStraight+0x2c4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	fb12 f303 	smulbb	r3, r2, r3
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f5c3 630f 	rsb	r3, r3, #2288	@ 0x8f0
 8002d72:	330c      	adds	r3, #12
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	4b2f      	ldr	r3, [pc, #188]	@ (8002e34 <MoveStraight+0x2e0>)
 8002d78:	801a      	strh	r2, [r3, #0]
 8002d7a:	e084      	b.n	8002e86 <MoveStraight+0x332>
	else if(speed_mode == SPEED_MODE_FAST) __PID_FAST(pidFast, curAngle, correction, dir, LMotorPWM, RMotorPWM);
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	f040 8081 	bne.w	8002e86 <MoveStraight+0x332>
 8002d84:	4b2e      	ldr	r3, [pc, #184]	@ (8002e40 <MoveStraight+0x2ec>)
 8002d86:	ed93 7a00 	vldr	s14, [r3]
 8002d8a:	4b25      	ldr	r3, [pc, #148]	@ (8002e20 <MoveStraight+0x2cc>)
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d94:	4b2a      	ldr	r3, [pc, #168]	@ (8002e40 <MoveStraight+0x2ec>)
 8002d96:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d9a:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <MoveStraight+0x2ec>)
 8002d9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002da8:	4b25      	ldr	r3, [pc, #148]	@ (8002e40 <MoveStraight+0x2ec>)
 8002daa:	edd3 6a02 	vldr	s13, [r3, #8]
 8002dae:	4b24      	ldr	r3, [pc, #144]	@ (8002e40 <MoveStraight+0x2ec>)
 8002db0:	ed93 6a03 	vldr	s12, [r3, #12]
 8002db4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e20 <MoveStraight+0x2cc>)
 8002db6:	edd3 7a00 	vldr	s15, [r3]
 8002dba:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dca:	ee17 2a90 	vmov	r2, s15
 8002dce:	4b16      	ldr	r3, [pc, #88]	@ (8002e28 <MoveStraight+0x2d4>)
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	4b13      	ldr	r3, [pc, #76]	@ (8002e20 <MoveStraight+0x2cc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e40 <MoveStraight+0x2ec>)
 8002dd8:	60d3      	str	r3, [r2, #12]
 8002dda:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <MoveStraight+0x2ec>)
 8002ddc:	ed93 7a04 	vldr	s14, [r3, #16]
 8002de0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e20 <MoveStraight+0x2cc>)
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <MoveStraight+0x2ec>)
 8002dec:	edc3 7a04 	vstr	s15, [r3, #16]
 8002df0:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <MoveStraight+0x2d4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002df8:	dc24      	bgt.n	8002e44 <MoveStraight+0x2f0>
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <MoveStraight+0x2d4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8002e3c <MoveStraight+0x2e8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	bfb8      	it	lt
 8002e04:	4613      	movlt	r3, r2
 8002e06:	e01f      	b.n	8002e48 <MoveStraight+0x2f4>
 8002e08:	20000754 	.word	0x20000754
 8002e0c:	2000040c 	.word	0x2000040c
 8002e10:	20000756 	.word	0x20000756
 8002e14:	200004a8 	.word	0x200004a8
 8002e18:	20000008 	.word	0x20000008
 8002e1c:	00000000 	.word	0x00000000
 8002e20:	20000798 	.word	0x20000798
 8002e24:	20000758 	.word	0x20000758
 8002e28:	200007b0 	.word	0x200007b0
 8002e2c:	fffffda8 	.word	0xfffffda8
 8002e30:	2000079c 	.word	0x2000079c
 8002e34:	2000079e 	.word	0x2000079e
 8002e38:	2000076c 	.word	0x2000076c
 8002e3c:	fffffd44 	.word	0xfffffd44
 8002e40:	20000780 	.word	0x20000780
 8002e44:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002e48:	4a16      	ldr	r2, [pc, #88]	@ (8002ea4 <MoveStraight+0x350>)
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <MoveStraight+0x350>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <MoveStraight+0x354>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	fb12 f303 	smulbb	r3, r2, r3
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <MoveStraight+0x358>)
 8002e66:	801a      	strh	r2, [r3, #0]
 8002e68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea4 <MoveStraight+0x350>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <MoveStraight+0x354>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	fb12 f303 	smulbb	r3, r2, r3
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f5c3 633b 	rsb	r3, r3, #2992	@ 0xbb0
 8002e7e:	3308      	adds	r3, #8
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <MoveStraight+0x35c>)
 8002e84:	801a      	strh	r2, [r3, #0]

	__SET_MOTOR_PWM(&htim8, LMotorPWM, RMotorPWM);
 8002e86:	4b09      	ldr	r3, [pc, #36]	@ (8002eac <MoveStraight+0x358>)
 8002e88:	881a      	ldrh	r2, [r3, #0]
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <MoveStraight+0x360>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e90:	4b07      	ldr	r3, [pc, #28]	@ (8002eb0 <MoveStraight+0x35c>)
 8002e92:	881a      	ldrh	r2, [r3, #0]
 8002e94:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <MoveStraight+0x360>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200007b0 	.word	0x200007b0
 8002ea8:	20000008 	.word	0x20000008
 8002eac:	2000079c 	.word	0x2000079c
 8002eb0:	2000079e 	.word	0x2000079e
 8002eb4:	200005c8 	.word	0x200005c8

08002eb8 <MoveStraightSpeedScale>:

void MoveStraightSpeedScale(const uint8_t speed_mode, float *speedScale)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af04      	add	r7, sp, #16
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	71fb      	strb	r3, [r7, #7]
	__READ_GYRO_Z(&hi2c1, gZData, gyroZ); //poll to update global
 8002ec4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ec8:	9302      	str	r3, [sp, #8]
 8002eca:	2302      	movs	r3, #2
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	4b99      	ldr	r3, [pc, #612]	@ (8003134 <MoveStraightSpeedScale+0x27c>)
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	2237      	movs	r2, #55	@ 0x37
 8002ed6:	21d0      	movs	r1, #208	@ 0xd0
 8002ed8:	4897      	ldr	r0, [pc, #604]	@ (8003138 <MoveStraightSpeedScale+0x280>)
 8002eda:	f005 fe61 	bl	8008ba0 <HAL_I2C_Mem_Read>
 8002ede:	4b95      	ldr	r3, [pc, #596]	@ (8003134 <MoveStraightSpeedScale+0x27c>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	b21a      	sxth	r2, r3
 8002ee6:	4b93      	ldr	r3, [pc, #588]	@ (8003134 <MoveStraightSpeedScale+0x27c>)
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	4313      	orrs	r3, r2
 8002eee:	b21a      	sxth	r2, r3
 8002ef0:	4b92      	ldr	r3, [pc, #584]	@ (800313c <MoveStraightSpeedScale+0x284>)
 8002ef2:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? -1 : 1; //Using RMotor to determine robot direction
 8002ef4:	4b92      	ldr	r3, [pc, #584]	@ (8003140 <MoveStraightSpeedScale+0x288>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d102      	bne.n	8002f08 <MoveStraightSpeedScale+0x50>
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	e000      	b.n	8002f0a <MoveStraightSpeedScale+0x52>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	4a8e      	ldr	r2, [pc, #568]	@ (8003144 <MoveStraightSpeedScale+0x28c>)
 8002f0c:	6013      	str	r3, [r2, #0]
	curAngle += ((gyroZ >= -4 && gyroZ <= 8) ? 0 : gyroZ);
 8002f0e:	4b8b      	ldr	r3, [pc, #556]	@ (800313c <MoveStraightSpeedScale+0x284>)
 8002f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f14:	f113 0f04 	cmn.w	r3, #4
 8002f18:	db04      	blt.n	8002f24 <MoveStraightSpeedScale+0x6c>
 8002f1a:	4b88      	ldr	r3, [pc, #544]	@ (800313c <MoveStraightSpeedScale+0x284>)
 8002f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	dd07      	ble.n	8002f34 <MoveStraightSpeedScale+0x7c>
 8002f24:	4b85      	ldr	r3, [pc, #532]	@ (800313c <MoveStraightSpeedScale+0x284>)
 8002f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2a:	ee07 3a90 	vmov	s15, r3
 8002f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f32:	e001      	b.n	8002f38 <MoveStraightSpeedScale+0x80>
 8002f34:	eddf 7a84 	vldr	s15, [pc, #528]	@ 8003148 <MoveStraightSpeedScale+0x290>
 8002f38:	4b84      	ldr	r3, [pc, #528]	@ (800314c <MoveStraightSpeedScale+0x294>)
 8002f3a:	ed93 7a00 	vldr	s14, [r3]
 8002f3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f42:	4b82      	ldr	r3, [pc, #520]	@ (800314c <MoveStraightSpeedScale+0x294>)
 8002f44:	edc3 7a00 	vstr	s15, [r3]

	if(speed_mode == SPEED_MODE_SLOW) __PID_SLOW(pidSlow, curAngle, correction, dir, LMotorPWM, RMotorPWM);
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d163      	bne.n	8003016 <MoveStraightSpeedScale+0x15e>
 8002f4e:	4b80      	ldr	r3, [pc, #512]	@ (8003150 <MoveStraightSpeedScale+0x298>)
 8002f50:	ed93 7a00 	vldr	s14, [r3]
 8002f54:	4b7d      	ldr	r3, [pc, #500]	@ (800314c <MoveStraightSpeedScale+0x294>)
 8002f56:	edd3 7a00 	vldr	s15, [r3]
 8002f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003150 <MoveStraightSpeedScale+0x298>)
 8002f60:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f64:	4b7a      	ldr	r3, [pc, #488]	@ (8003150 <MoveStraightSpeedScale+0x298>)
 8002f66:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f72:	4b77      	ldr	r3, [pc, #476]	@ (8003150 <MoveStraightSpeedScale+0x298>)
 8002f74:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f78:	4b75      	ldr	r3, [pc, #468]	@ (8003150 <MoveStraightSpeedScale+0x298>)
 8002f7a:	ed93 6a03 	vldr	s12, [r3, #12]
 8002f7e:	4b73      	ldr	r3, [pc, #460]	@ (800314c <MoveStraightSpeedScale+0x294>)
 8002f80:	edd3 7a00 	vldr	s15, [r3]
 8002f84:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f94:	ee17 2a90 	vmov	r2, s15
 8002f98:	4b6e      	ldr	r3, [pc, #440]	@ (8003154 <MoveStraightSpeedScale+0x29c>)
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800314c <MoveStraightSpeedScale+0x294>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8003150 <MoveStraightSpeedScale+0x298>)
 8002fa2:	60d3      	str	r3, [r2, #12]
 8002fa4:	4b6a      	ldr	r3, [pc, #424]	@ (8003150 <MoveStraightSpeedScale+0x298>)
 8002fa6:	ed93 7a04 	vldr	s14, [r3, #16]
 8002faa:	4b68      	ldr	r3, [pc, #416]	@ (800314c <MoveStraightSpeedScale+0x294>)
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb4:	4b66      	ldr	r3, [pc, #408]	@ (8003150 <MoveStraightSpeedScale+0x298>)
 8002fb6:	edc3 7a04 	vstr	s15, [r3, #16]
 8002fba:	4b66      	ldr	r3, [pc, #408]	@ (8003154 <MoveStraightSpeedScale+0x29c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002fc2:	dc06      	bgt.n	8002fd2 <MoveStraightSpeedScale+0x11a>
 8002fc4:	4b63      	ldr	r3, [pc, #396]	@ (8003154 <MoveStraightSpeedScale+0x29c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a63      	ldr	r2, [pc, #396]	@ (8003158 <MoveStraightSpeedScale+0x2a0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	bfb8      	it	lt
 8002fce:	4613      	movlt	r3, r2
 8002fd0:	e001      	b.n	8002fd6 <MoveStraightSpeedScale+0x11e>
 8002fd2:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002fd6:	4a5f      	ldr	r2, [pc, #380]	@ (8003154 <MoveStraightSpeedScale+0x29c>)
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b5e      	ldr	r3, [pc, #376]	@ (8003154 <MoveStraightSpeedScale+0x29c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	4b58      	ldr	r3, [pc, #352]	@ (8003144 <MoveStraightSpeedScale+0x28c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	fb12 f303 	smulbb	r3, r2, r3
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	f603 03fc 	addw	r3, r3, #2300	@ 0x8fc
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800315c <MoveStraightSpeedScale+0x2a4>)
 8002ff4:	801a      	strh	r2, [r3, #0]
 8002ff6:	4b57      	ldr	r3, [pc, #348]	@ (8003154 <MoveStraightSpeedScale+0x29c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	4b51      	ldr	r3, [pc, #324]	@ (8003144 <MoveStraightSpeedScale+0x28c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	b29b      	uxth	r3, r3
 8003002:	fb12 f303 	smulbb	r3, r2, r3
 8003006:	b29b      	uxth	r3, r3
 8003008:	f5c3 630f 	rsb	r3, r3, #2288	@ 0x8f0
 800300c:	330c      	adds	r3, #12
 800300e:	b29a      	uxth	r2, r3
 8003010:	4b53      	ldr	r3, [pc, #332]	@ (8003160 <MoveStraightSpeedScale+0x2a8>)
 8003012:	801a      	strh	r2, [r3, #0]
 8003014:	e065      	b.n	80030e2 <MoveStraightSpeedScale+0x22a>
	else if(speed_mode == SPEED_MODE_FAST) __PID_FAST(pidFast, curAngle, correction, dir, LMotorPWM, RMotorPWM);
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d162      	bne.n	80030e2 <MoveStraightSpeedScale+0x22a>
 800301c:	4b51      	ldr	r3, [pc, #324]	@ (8003164 <MoveStraightSpeedScale+0x2ac>)
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	4b4a      	ldr	r3, [pc, #296]	@ (800314c <MoveStraightSpeedScale+0x294>)
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800302c:	4b4d      	ldr	r3, [pc, #308]	@ (8003164 <MoveStraightSpeedScale+0x2ac>)
 800302e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003032:	4b4c      	ldr	r3, [pc, #304]	@ (8003164 <MoveStraightSpeedScale+0x2ac>)
 8003034:	edd3 7a04 	vldr	s15, [r3, #16]
 8003038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800303c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003040:	4b48      	ldr	r3, [pc, #288]	@ (8003164 <MoveStraightSpeedScale+0x2ac>)
 8003042:	edd3 6a02 	vldr	s13, [r3, #8]
 8003046:	4b47      	ldr	r3, [pc, #284]	@ (8003164 <MoveStraightSpeedScale+0x2ac>)
 8003048:	ed93 6a03 	vldr	s12, [r3, #12]
 800304c:	4b3f      	ldr	r3, [pc, #252]	@ (800314c <MoveStraightSpeedScale+0x294>)
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800305a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003062:	ee17 2a90 	vmov	r2, s15
 8003066:	4b3b      	ldr	r3, [pc, #236]	@ (8003154 <MoveStraightSpeedScale+0x29c>)
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	4b38      	ldr	r3, [pc, #224]	@ (800314c <MoveStraightSpeedScale+0x294>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a3d      	ldr	r2, [pc, #244]	@ (8003164 <MoveStraightSpeedScale+0x2ac>)
 8003070:	60d3      	str	r3, [r2, #12]
 8003072:	4b3c      	ldr	r3, [pc, #240]	@ (8003164 <MoveStraightSpeedScale+0x2ac>)
 8003074:	ed93 7a04 	vldr	s14, [r3, #16]
 8003078:	4b34      	ldr	r3, [pc, #208]	@ (800314c <MoveStraightSpeedScale+0x294>)
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003082:	4b38      	ldr	r3, [pc, #224]	@ (8003164 <MoveStraightSpeedScale+0x2ac>)
 8003084:	edc3 7a04 	vstr	s15, [r3, #16]
 8003088:	4b32      	ldr	r3, [pc, #200]	@ (8003154 <MoveStraightSpeedScale+0x29c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8003090:	dc06      	bgt.n	80030a0 <MoveStraightSpeedScale+0x1e8>
 8003092:	4b30      	ldr	r3, [pc, #192]	@ (8003154 <MoveStraightSpeedScale+0x29c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a30      	ldr	r2, [pc, #192]	@ (8003158 <MoveStraightSpeedScale+0x2a0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	bfb8      	it	lt
 800309c:	4613      	movlt	r3, r2
 800309e:	e001      	b.n	80030a4 <MoveStraightSpeedScale+0x1ec>
 80030a0:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80030a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003154 <MoveStraightSpeedScale+0x29c>)
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003154 <MoveStraightSpeedScale+0x29c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b25      	ldr	r3, [pc, #148]	@ (8003144 <MoveStraightSpeedScale+0x28c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	fb12 f303 	smulbb	r3, r2, r3
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 80030be:	b29a      	uxth	r2, r3
 80030c0:	4b26      	ldr	r3, [pc, #152]	@ (800315c <MoveStraightSpeedScale+0x2a4>)
 80030c2:	801a      	strh	r2, [r3, #0]
 80030c4:	4b23      	ldr	r3, [pc, #140]	@ (8003154 <MoveStraightSpeedScale+0x29c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003144 <MoveStraightSpeedScale+0x28c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	fb12 f303 	smulbb	r3, r2, r3
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f5c3 633b 	rsb	r3, r3, #2992	@ 0xbb0
 80030da:	3308      	adds	r3, #8
 80030dc:	b29a      	uxth	r2, r3
 80030de:	4b20      	ldr	r3, [pc, #128]	@ (8003160 <MoveStraightSpeedScale+0x2a8>)
 80030e0:	801a      	strh	r2, [r3, #0]

	__SET_MOTOR_PWM(&htim8, LMotorPWM * (*speedScale), RMotorPWM  * (*speedScale));
 80030e2:	4b1e      	ldr	r3, [pc, #120]	@ (800315c <MoveStraightSpeedScale+0x2a4>)
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	edd3 7a00 	vldr	s15, [r3]
 80030f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003168 <MoveStraightSpeedScale+0x2b0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003100:	ee17 2a90 	vmov	r2, s15
 8003104:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003106:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <MoveStraightSpeedScale+0x2a8>)
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311c:	4b12      	ldr	r3, [pc, #72]	@ (8003168 <MoveStraightSpeedScale+0x2b0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003124:	ee17 2a90 	vmov	r2, s15
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000754 	.word	0x20000754
 8003138:	2000040c 	.word	0x2000040c
 800313c:	20000756 	.word	0x20000756
 8003140:	200004a8 	.word	0x200004a8
 8003144:	20000008 	.word	0x20000008
 8003148:	00000000 	.word	0x00000000
 800314c:	20000798 	.word	0x20000798
 8003150:	2000076c 	.word	0x2000076c
 8003154:	200007b0 	.word	0x200007b0
 8003158:	fffffd44 	.word	0xfffffd44
 800315c:	2000079c 	.word	0x2000079c
 8003160:	2000079e 	.word	0x2000079e
 8003164:	20000780 	.word	0x20000780
 8003168:	200005c8 	.word	0x200005c8
 800316c:	00000000 	.word	0x00000000

08003170 <MoveDist>:

void MoveDist(float *targetDist, const uint8_t dir, const uint8_t speedMode)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
 800317c:	4613      	mov	r3, r2
 800317e:	70bb      	strb	r3, [r7, #2]
	curAngle = 0;
 8003180:	4ba7      	ldr	r3, [pc, #668]	@ (8003420 <MoveDist+0x2b0>)
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
	gyroZ = 0;
 8003188:	4ba6      	ldr	r3, [pc, #664]	@ (8003424 <MoveDist+0x2b4>)
 800318a:	2200      	movs	r2, #0
 800318c:	801a      	strh	r2, [r3, #0]
	PIDReset(&pidTurn);
 800318e:	48a6      	ldr	r0, [pc, #664]	@ (8003428 <MoveDist+0x2b8>)
 8003190:	f7ff fccd 	bl	8002b2e <PIDReset>
	PIDReset(&pidSlow);
 8003194:	48a5      	ldr	r0, [pc, #660]	@ (800342c <MoveDist+0x2bc>)
 8003196:	f7ff fcca 	bl	8002b2e <PIDReset>
	PIDReset(&pidFast);
 800319a:	48a5      	ldr	r0, [pc, #660]	@ (8003430 <MoveDist+0x2c0>)
 800319c:	f7ff fcc7 	bl	8002b2e <PIDReset>
	curDistTick = 0;
 80031a0:	4ba4      	ldr	r3, [pc, #656]	@ (8003434 <MoveDist+0x2c4>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	801a      	strh	r2, [r3, #0]

	__GET_TARGETTICK(*targetDist, targetDistTick);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd f9cc 	bl	8000548 <__aeabi_f2d>
 80031b0:	a393      	add	r3, pc, #588	@ (adr r3, 8003400 <MoveDist+0x290>)
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f7fd fa1f 	bl	80005f8 <__aeabi_dmul>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	a391      	add	r3, pc, #580	@ (adr r3, 8003408 <MoveDist+0x298>)
 80031c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c8:	f7fd fb40 	bl	800084c <__aeabi_ddiv>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4610      	mov	r0, r2
 80031d2:	4619      	mov	r1, r3
 80031d4:	a38e      	add	r3, pc, #568	@ (adr r3, 8003410 <MoveDist+0x2a0>)
 80031d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031da:	f7fd fa0d 	bl	80005f8 <__aeabi_dmul>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	4b93      	ldr	r3, [pc, #588]	@ (8003438 <MoveDist+0x2c8>)
 80031ec:	f7fd f84c 	bl	8000288 <__aeabi_dsub>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7fd fcd6 	bl	8000ba8 <__aeabi_d2uiz>
 80031fc:	4603      	mov	r3, r0
 80031fe:	b29a      	uxth	r2, r3
 8003200:	4b8e      	ldr	r3, [pc, #568]	@ (800343c <MoveDist+0x2cc>)
 8003202:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 8003204:	f003 ff7e 	bl	8007104 <HAL_GetTick>
 8003208:	4603      	mov	r3, r0
 800320a:	4a8d      	ldr	r2, [pc, #564]	@ (8003440 <MoveDist+0x2d0>)
 800320c:	6013      	str	r3, [r2, #0]
	__SET_MOTOR_DIR(dir);
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003220:	4888      	ldr	r0, [pc, #544]	@ (8003444 <MoveDist+0x2d4>)
 8003222:	f005 fa4d 	bl	80086c0 <HAL_GPIO_WritePin>
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	2120      	movs	r1, #32
 8003236:	4884      	ldr	r0, [pc, #528]	@ (8003448 <MoveDist+0x2d8>)
 8003238:	f005 fa42 	bl	80086c0 <HAL_GPIO_WritePin>
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf0c      	ite	eq
 8003242:	2301      	moveq	r3, #1
 8003244:	2300      	movne	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800324e:	487f      	ldr	r0, [pc, #508]	@ (800344c <MoveDist+0x2dc>)
 8003250:	f005 fa36 	bl	80086c0 <HAL_GPIO_WritePin>
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	2b00      	cmp	r3, #0
 8003258:	bf14      	ite	ne
 800325a:	2301      	movne	r3, #1
 800325c:	2300      	moveq	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003266:	4879      	ldr	r0, [pc, #484]	@ (800344c <MoveDist+0x2dc>)
 8003268:	f005 fa2a 	bl	80086c0 <HAL_GPIO_WritePin>
	__SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 800326c:	4b78      	ldr	r3, [pc, #480]	@ (8003450 <MoveDist+0x2e0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	b29a      	uxth	r2, r3
 8003274:	4b77      	ldr	r3, [pc, #476]	@ (8003454 <MoveDist+0x2e4>)
 8003276:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8003278:	4b75      	ldr	r3, [pc, #468]	@ (8003450 <MoveDist+0x2e0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	4b73      	ldr	r3, [pc, #460]	@ (8003450 <MoveDist+0x2e0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b10      	cmp	r3, #16
 800328c:	d117      	bne.n	80032be <MoveDist+0x14e>
 800328e:	4b71      	ldr	r3, [pc, #452]	@ (8003454 <MoveDist+0x2e4>)
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4293      	cmp	r3, r2
 8003298:	d806      	bhi.n	80032a8 <MoveDist+0x138>
 800329a:	4b6e      	ldr	r3, [pc, #440]	@ (8003454 <MoveDist+0x2e4>)
 800329c:	881a      	ldrh	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	e007      	b.n	80032b8 <MoveDist+0x148>
 80032a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003454 <MoveDist+0x2e4>)
 80032aa:	881a      	ldrh	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	4a67      	ldr	r2, [pc, #412]	@ (8003458 <MoveDist+0x2e8>)
 80032ba:	8013      	strh	r3, [r2, #0]
 80032bc:	e016      	b.n	80032ec <MoveDist+0x17c>
 80032be:	4b65      	ldr	r3, [pc, #404]	@ (8003454 <MoveDist+0x2e4>)
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d306      	bcc.n	80032d8 <MoveDist+0x168>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	4b61      	ldr	r3, [pc, #388]	@ (8003454 <MoveDist+0x2e4>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	e007      	b.n	80032e8 <MoveDist+0x178>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	b29a      	uxth	r2, r3
 80032dc:	4b5d      	ldr	r3, [pc, #372]	@ (8003454 <MoveDist+0x2e4>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4a5b      	ldr	r2, [pc, #364]	@ (8003458 <MoveDist+0x2e8>)
 80032ea:	8013      	strh	r3, [r2, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	4b58      	ldr	r3, [pc, #352]	@ (8003454 <MoveDist+0x2e4>)
 80032f2:	801a      	strh	r2, [r3, #0]
		curDistTick += dist_dL;
 80032f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003434 <MoveDist+0x2c4>)
 80032f6:	881a      	ldrh	r2, [r3, #0]
 80032f8:	4b57      	ldr	r3, [pc, #348]	@ (8003458 <MoveDist+0x2e8>)
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	b29a      	uxth	r2, r3
 8003300:	4b4c      	ldr	r3, [pc, #304]	@ (8003434 <MoveDist+0x2c4>)
 8003302:	801a      	strh	r2, [r3, #0]

		if(curDistTick >= targetDistTick) break;
 8003304:	4b4b      	ldr	r3, [pc, #300]	@ (8003434 <MoveDist+0x2c4>)
 8003306:	881a      	ldrh	r2, [r3, #0]
 8003308:	4b4c      	ldr	r3, [pc, #304]	@ (800343c <MoveDist+0x2cc>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	f080 80ab 	bcs.w	8003468 <MoveDist+0x2f8>

		if(HAL_GetTick() - last_curTask_tick >= 10) {
 8003312:	f003 fef7 	bl	8007104 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	4b49      	ldr	r3, [pc, #292]	@ (8003440 <MoveDist+0x2d0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b09      	cmp	r3, #9
 8003320:	d9aa      	bls.n	8003278 <MoveDist+0x108>
			if(speedMode == SPEED_MODE_TURN)
 8003322:	78bb      	ldrb	r3, [r7, #2]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d103      	bne.n	8003330 <MoveDist+0x1c0>
				MoveStraight(SPEED_MODE_TURN);
 8003328:	2000      	movs	r0, #0
 800332a:	f7ff fc13 	bl	8002b54 <MoveStraight>
 800332e:	e05f      	b.n	80033f0 <MoveDist+0x280>
			else
			{
				speedScale = abs(curDistTick - targetDistTick) / 990; //slow down at last 15cm (990 ticks)
 8003330:	4b40      	ldr	r3, [pc, #256]	@ (8003434 <MoveDist+0x2c4>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	4b41      	ldr	r3, [pc, #260]	@ (800343c <MoveDist+0x2cc>)
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	bfb8      	it	lt
 8003340:	425b      	neglt	r3, r3
 8003342:	4a46      	ldr	r2, [pc, #280]	@ (800345c <MoveDist+0x2ec>)
 8003344:	fb82 1203 	smull	r1, r2, r2, r3
 8003348:	11d2      	asrs	r2, r2, #7
 800334a:	17db      	asrs	r3, r3, #31
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003356:	4b42      	ldr	r3, [pc, #264]	@ (8003460 <MoveDist+0x2f0>)
 8003358:	edc3 7a00 	vstr	s15, [r3]
				if(speedMode == SPEED_MODE_SLOW) speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 800335c:	78bb      	ldrb	r3, [r7, #2]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d11e      	bne.n	80033a0 <MoveDist+0x230>
 8003362:	4b3f      	ldr	r3, [pc, #252]	@ (8003460 <MoveDist+0x2f0>)
 8003364:	edd3 7a00 	vldr	s15, [r3]
 8003368:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800336c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	dd02      	ble.n	800337c <MoveDist+0x20c>
 8003376:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800337a:	e00e      	b.n	800339a <MoveDist+0x22a>
 800337c:	4b38      	ldr	r3, [pc, #224]	@ (8003460 <MoveDist+0x2f0>)
 800337e:	edd3 7a00 	vldr	s15, [r3]
 8003382:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8003386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338e:	d502      	bpl.n	8003396 <MoveDist+0x226>
 8003390:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8003394:	e001      	b.n	800339a <MoveDist+0x22a>
 8003396:	4b32      	ldr	r3, [pc, #200]	@ (8003460 <MoveDist+0x2f0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a31      	ldr	r2, [pc, #196]	@ (8003460 <MoveDist+0x2f0>)
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e022      	b.n	80033e6 <MoveDist+0x276>
				else if (speedMode == SPEED_MODE_FAST)speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 80033a0:	78bb      	ldrb	r3, [r7, #2]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d11f      	bne.n	80033e6 <MoveDist+0x276>
 80033a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003460 <MoveDist+0x2f0>)
 80033a8:	edd3 7a00 	vldr	s15, [r3]
 80033ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80033b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b8:	dd02      	ble.n	80033c0 <MoveDist+0x250>
 80033ba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80033be:	e010      	b.n	80033e2 <MoveDist+0x272>
 80033c0:	4b27      	ldr	r3, [pc, #156]	@ (8003460 <MoveDist+0x2f0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd f8bf 	bl	8000548 <__aeabi_f2d>
 80033ca:	a313      	add	r3, pc, #76	@ (adr r3, 8003418 <MoveDist+0x2a8>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fd fb84 	bl	8000adc <__aeabi_dcmplt>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MoveDist+0x26e>
 80033da:	4b22      	ldr	r3, [pc, #136]	@ (8003464 <MoveDist+0x2f4>)
 80033dc:	e001      	b.n	80033e2 <MoveDist+0x272>
 80033de:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <MoveDist+0x2f0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003460 <MoveDist+0x2f0>)
 80033e4:	6013      	str	r3, [r2, #0]
				MoveStraightSpeedScale(speedMode, &speedScale);
 80033e6:	78bb      	ldrb	r3, [r7, #2]
 80033e8:	491d      	ldr	r1, [pc, #116]	@ (8003460 <MoveDist+0x2f0>)
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fd64 	bl	8002eb8 <MoveStraightSpeedScale>
			}
		last_curTask_tick = HAL_GetTick();
 80033f0:	f003 fe88 	bl	8007104 <HAL_GetTick>
 80033f4:	4603      	mov	r3, r0
 80033f6:	4a12      	ldr	r2, [pc, #72]	@ (8003440 <MoveDist+0x2d0>)
 80033f8:	6013      	str	r3, [r2, #0]
		__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 80033fa:	e73d      	b.n	8003278 <MoveDist+0x108>
 80033fc:	f3af 8000 	nop.w
 8003400:	9f05fd0b 	.word	0x9f05fd0b
 8003404:	3fbf0cc3 	.word	0x3fbf0cc3
 8003408:	66666666 	.word	0x66666666
 800340c:	4035a666 	.word	0x4035a666
 8003410:	00000000 	.word	0x00000000
 8003414:	40c9a000 	.word	0x40c9a000
 8003418:	9999999a 	.word	0x9999999a
 800341c:	3fd99999 	.word	0x3fd99999
 8003420:	20000798 	.word	0x20000798
 8003424:	20000756 	.word	0x20000756
 8003428:	20000758 	.word	0x20000758
 800342c:	2000076c 	.word	0x2000076c
 8003430:	20000780 	.word	0x20000780
 8003434:	200007a8 	.word	0x200007a8
 8003438:	40240000 	.word	0x40240000
 800343c:	200007aa 	.word	0x200007aa
 8003440:	200007a0 	.word	0x200007a0
 8003444:	40021000 	.word	0x40021000
 8003448:	40020800 	.word	0x40020800
 800344c:	40020400 	.word	0x40020400
 8003450:	200004a8 	.word	0x200004a8
 8003454:	200007ae 	.word	0x200007ae
 8003458:	200007ac 	.word	0x200007ac
 800345c:	21195767 	.word	0x21195767
 8003460:	20000004 	.word	0x20000004
 8003464:	3ecccccd 	.word	0x3ecccccd
		if(curDistTick >= targetDistTick) break;
 8003468:	bf00      	nop
		}
	}
	__SET_MOTOR_PWM(&htim8, 0, 0);
 800346a:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <MoveDist+0x314>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2200      	movs	r2, #0
 8003470:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003472:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <MoveDist+0x314>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2200      	movs	r2, #0
 8003478:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200005c8 	.word	0x200005c8

08003488 <Turn>:

void Turn(float *targetAngle)
{
 8003488:	b5b0      	push	{r4, r5, r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af04      	add	r7, sp, #16
 800348e:	6078      	str	r0, [r7, #4]
	curAngle = 0;
 8003490:	4b49      	ldr	r3, [pc, #292]	@ (80035b8 <Turn+0x130>)
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
	gyroZ = 0;
 8003498:	4b48      	ldr	r3, [pc, #288]	@ (80035bc <Turn+0x134>)
 800349a:	2200      	movs	r2, #0
 800349c:	801a      	strh	r2, [r3, #0]

	last_curTask_tick = HAL_GetTick();
 800349e:	f003 fe31 	bl	8007104 <HAL_GetTick>
 80034a2:	4603      	mov	r3, r0
 80034a4:	4a46      	ldr	r2, [pc, #280]	@ (80035c0 <Turn+0x138>)
 80034a6:	6013      	str	r3, [r2, #0]

	while(1)
	{
//		printf(HAL_GetTick() - last_curTask_tick);
		if(HAL_GetTick() - last_curTask_tick >= 10)
 80034a8:	f003 fe2c 	bl	8007104 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b44      	ldr	r3, [pc, #272]	@ (80035c0 <Turn+0x138>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b09      	cmp	r3, #9
 80034b6:	d9f7      	bls.n	80034a8 <Turn+0x20>
		{
			__READ_GYRO_Z(&hi2c1, gZData, gyroZ);
 80034b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034bc:	9302      	str	r3, [sp, #8]
 80034be:	2302      	movs	r3, #2
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	4b40      	ldr	r3, [pc, #256]	@ (80035c4 <Turn+0x13c>)
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	2301      	movs	r3, #1
 80034c8:	2237      	movs	r2, #55	@ 0x37
 80034ca:	21d0      	movs	r1, #208	@ 0xd0
 80034cc:	483e      	ldr	r0, [pc, #248]	@ (80035c8 <Turn+0x140>)
 80034ce:	f005 fb67 	bl	8008ba0 <HAL_I2C_Mem_Read>
 80034d2:	4b3c      	ldr	r3, [pc, #240]	@ (80035c4 <Turn+0x13c>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	b21a      	sxth	r2, r3
 80034da:	4b3a      	ldr	r3, [pc, #232]	@ (80035c4 <Turn+0x13c>)
 80034dc:	785b      	ldrb	r3, [r3, #1]
 80034de:	b21b      	sxth	r3, r3
 80034e0:	4313      	orrs	r3, r2
 80034e2:	b21a      	sxth	r2, r3
 80034e4:	4b35      	ldr	r3, [pc, #212]	@ (80035bc <Turn+0x134>)
 80034e6:	801a      	strh	r2, [r3, #0]
			curAngle += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80034e8:	4b33      	ldr	r3, [pc, #204]	@ (80035b8 <Turn+0x130>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd f82b 	bl	8000548 <__aeabi_f2d>
 80034f2:	4604      	mov	r4, r0
 80034f4:	460d      	mov	r5, r1
 80034f6:	4b31      	ldr	r3, [pc, #196]	@ (80035bc <Turn+0x134>)
 80034f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f811 	bl	8000524 <__aeabi_i2d>
 8003502:	a329      	add	r3, pc, #164	@ (adr r3, 80035a8 <Turn+0x120>)
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f7fd f9a0 	bl	800084c <__aeabi_ddiv>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	a326      	add	r3, pc, #152	@ (adr r3, 80035b0 <Turn+0x128>)
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	f7fd f86d 	bl	80005f8 <__aeabi_dmul>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4620      	mov	r0, r4
 8003524:	4629      	mov	r1, r5
 8003526:	f7fc feb1 	bl	800028c <__adddf3>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f7fd fb59 	bl	8000be8 <__aeabi_d2f>
 8003536:	4603      	mov	r3, r0
 8003538:	4a1f      	ldr	r2, [pc, #124]	@ (80035b8 <Turn+0x130>)
 800353a:	6013      	str	r3, [r2, #0]

			if(abs(curAngle - *targetAngle) < 0.01) break;
 800353c:	4b1e      	ldr	r3, [pc, #120]	@ (80035b8 <Turn+0x130>)
 800353e:	ed93 7a00 	vldr	s14, [r3]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800354c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003550:	ee17 3a90 	vmov	r3, s15
 8003554:	2b00      	cmp	r3, #0
 8003556:	db0d      	blt.n	8003574 <Turn+0xec>
 8003558:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <Turn+0x130>)
 800355a:	ed93 7a00 	vldr	s14, [r3]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800356c:	ee17 3a90 	vmov	r3, s15
 8003570:	2b00      	cmp	r3, #0
 8003572:	dd05      	ble.n	8003580 <Turn+0xf8>

			last_curTask_tick = HAL_GetTick();
 8003574:	f003 fdc6 	bl	8007104 <HAL_GetTick>
 8003578:	4603      	mov	r3, r0
 800357a:	4a11      	ldr	r2, [pc, #68]	@ (80035c0 <Turn+0x138>)
 800357c:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick() - last_curTask_tick >= 10)
 800357e:	e793      	b.n	80034a8 <Turn+0x20>
			if(abs(curAngle - *targetAngle) < 0.01) break;
 8003580:	bf00      	nop
		}
	}

	__SET_MOTOR_PWM(&htim8, 0, 0);
 8003582:	4b12      	ldr	r3, [pc, #72]	@ (80035cc <Turn+0x144>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	63da      	str	r2, [r3, #60]	@ 0x3c
 800358a:	4b10      	ldr	r3, [pc, #64]	@ (80035cc <Turn+0x144>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2200      	movs	r2, #0
 8003590:	641a      	str	r2, [r3, #64]	@ 0x40
	__RESET_SMOTOR_ANGLE(&htim1);
 8003592:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <Turn+0x148>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	228e      	movs	r2, #142	@ 0x8e
 8003598:	641a      	str	r2, [r3, #64]	@ 0x40
 800359a:	20fa      	movs	r0, #250	@ 0xfa
 800359c:	f003 fdbe 	bl	800711c <HAL_Delay>
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bdb0      	pop	{r4, r5, r7, pc}
 80035a8:	66666666 	.word	0x66666666
 80035ac:	40306666 	.word	0x40306666
 80035b0:	47ae147b 	.word	0x47ae147b
 80035b4:	3f847ae1 	.word	0x3f847ae1
 80035b8:	20000798 	.word	0x20000798
 80035bc:	20000756 	.word	0x20000756
 80035c0:	200007a0 	.word	0x200007a0
 80035c4:	20000754 	.word	0x20000754
 80035c8:	2000040c 	.word	0x2000040c
 80035cc:	200005c8 	.word	0x200005c8
 80035d0:	20000460 	.word	0x20000460

080035d4 <USavg>:
	__SET_MOTOR_PWM(&htim8, 0, 0);
	HAL_ADC_Stop(&hadc1);
}


float USavg(){
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
	  float sum = 0;
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	607b      	str	r3, [r7, #4]
	    for (int i = 0; i < 10; i++) {
 80035e0:	2300      	movs	r3, #0
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	e011      	b.n	800360a <USavg+0x36>
	        sum += ultra_distance;
 80035e6:	4b11      	ldr	r3, [pc, #68]	@ (800362c <USavg+0x58>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80035f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fa:	edc7 7a01 	vstr	s15, [r7, #4]
	        osDelay(5);
 80035fe:	2005      	movs	r0, #5
 8003600:	f009 fbd4 	bl	800cdac <osDelay>
	    for (int i = 0; i < 10; i++) {
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b09      	cmp	r3, #9
 800360e:	ddea      	ble.n	80035e6 <USavg+0x12>
	    }
	    return (sum / 10);
 8003610:	edd7 7a01 	vldr	s15, [r7, #4]
 8003614:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003618:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800361c:	eef0 7a66 	vmov.f32	s15, s13
}
 8003620:	eeb0 0a67 	vmov.f32	s0, s15
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200006bf 	.word	0x200006bf

08003630 <MoveDistObstacleUS>:
void MoveDistObstacleUS(float *targetDist, const uint8_t speedMode)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	70fb      	strb	r3, [r7, #3]
	curAngle = 0; gyroZ = 0;
 800363c:	4ba4      	ldr	r3, [pc, #656]	@ (80038d0 <MoveDistObstacleUS+0x2a0>)
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	4ba3      	ldr	r3, [pc, #652]	@ (80038d4 <MoveDistObstacleUS+0x2a4>)
 8003646:	2200      	movs	r2, #0
 8003648:	801a      	strh	r2, [r3, #0]
	PIDReset(&pidTurn);
 800364a:	48a3      	ldr	r0, [pc, #652]	@ (80038d8 <MoveDistObstacleUS+0x2a8>)
 800364c:	f7ff fa6f 	bl	8002b2e <PIDReset>
	PIDReset(&pidSlow);
 8003650:	48a2      	ldr	r0, [pc, #648]	@ (80038dc <MoveDistObstacleUS+0x2ac>)
 8003652:	f7ff fa6c 	bl	8002b2e <PIDReset>
	PIDReset(&pidFast);
 8003656:	48a2      	ldr	r0, [pc, #648]	@ (80038e0 <MoveDistObstacleUS+0x2b0>)
 8003658:	f7ff fa69 	bl	8002b2e <PIDReset>
//	obsDist_US = 1000;
//	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
	last_curTask_tick = HAL_GetTick();
 800365c:	f003 fd52 	bl	8007104 <HAL_GetTick>
 8003660:	4603      	mov	r3, r0
 8003662:	4aa0      	ldr	r2, [pc, #640]	@ (80038e4 <MoveDistObstacleUS+0x2b4>)
 8003664:	6013      	str	r3, [r2, #0]
	while(1)
	{
		if (abs(*targetDist - ultra_distance) < 0.2) break;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	ed93 7a00 	vldr	s14, [r3]
 800366c:	4b9e      	ldr	r3, [pc, #632]	@ (80038e8 <MoveDistObstacleUS+0x2b8>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	ee07 3a90 	vmov	s15, r3
 8003674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800367c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003680:	ee17 3a90 	vmov	r3, s15
 8003684:	2b00      	cmp	r3, #0
 8003686:	db11      	blt.n	80036ac <MoveDistObstacleUS+0x7c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	ed93 7a00 	vldr	s14, [r3]
 800368e:	4b96      	ldr	r3, [pc, #600]	@ (80038e8 <MoveDistObstacleUS+0x2b8>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800369a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a2:	ee17 3a90 	vmov	r3, s15
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f340 80ff 	ble.w	80038aa <MoveDistObstacleUS+0x27a>
		__SET_MOTOR_DIR(ultra_distance >= *targetDist);
 80036ac:	4b8e      	ldr	r3, [pc, #568]	@ (80038e8 <MoveDistObstacleUS+0x2b8>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	ee07 3a90 	vmov	s15, r3
 80036b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	edd3 7a00 	vldr	s15, [r3]
 80036be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c6:	bfac      	ite	ge
 80036c8:	2301      	movge	r3, #1
 80036ca:	2300      	movlt	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f083 0301 	eor.w	r3, r3, #1
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80036dc:	4883      	ldr	r0, [pc, #524]	@ (80038ec <MoveDistObstacleUS+0x2bc>)
 80036de:	f004 ffef 	bl	80086c0 <HAL_GPIO_WritePin>
 80036e2:	4b81      	ldr	r3, [pc, #516]	@ (80038e8 <MoveDistObstacleUS+0x2b8>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fc:	bfac      	ite	ge
 80036fe:	2301      	movge	r3, #1
 8003700:	2300      	movlt	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	2120      	movs	r1, #32
 8003708:	4879      	ldr	r0, [pc, #484]	@ (80038f0 <MoveDistObstacleUS+0x2c0>)
 800370a:	f004 ffd9 	bl	80086c0 <HAL_GPIO_WritePin>
 800370e:	4b76      	ldr	r3, [pc, #472]	@ (80038e8 <MoveDistObstacleUS+0x2b8>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	edd3 7a00 	vldr	s15, [r3]
 8003720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003728:	bfac      	ite	ge
 800372a:	2301      	movge	r3, #1
 800372c:	2300      	movlt	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f083 0301 	eor.w	r3, r3, #1
 8003734:	b2db      	uxtb	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800373e:	486d      	ldr	r0, [pc, #436]	@ (80038f4 <MoveDistObstacleUS+0x2c4>)
 8003740:	f004 ffbe 	bl	80086c0 <HAL_GPIO_WritePin>
 8003744:	4b68      	ldr	r3, [pc, #416]	@ (80038e8 <MoveDistObstacleUS+0x2b8>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	bfac      	ite	ge
 8003760:	2301      	movge	r3, #1
 8003762:	2300      	movlt	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800376c:	4861      	ldr	r0, [pc, #388]	@ (80038f4 <MoveDistObstacleUS+0x2c4>)
 800376e:	f004 ffa7 	bl	80086c0 <HAL_GPIO_WritePin>

		if (HAL_GetTick() - last_curTask_tick >=20) {
 8003772:	f003 fcc7 	bl	8007104 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	4b5a      	ldr	r3, [pc, #360]	@ (80038e4 <MoveDistObstacleUS+0x2b4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b13      	cmp	r3, #19
 8003780:	f240 808f 	bls.w	80038a2 <MoveDistObstacleUS+0x272>
			//		  speedScale = 1;
			if (speedMode == SPEED_MODE_SLOW)
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d142      	bne.n	8003810 <MoveDistObstacleUS+0x1e0>
			{
				speedScale = abs(ultra_distance - *targetDist) / 15; // slow down at 15cm
 800378a:	4b57      	ldr	r3, [pc, #348]	@ (80038e8 <MoveDistObstacleUS+0x2b8>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	edd3 7a00 	vldr	s15, [r3]
 800379c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037a4:	ee17 3a90 	vmov	r3, s15
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bfb8      	it	lt
 80037ac:	425b      	neglt	r3, r3
 80037ae:	4a52      	ldr	r2, [pc, #328]	@ (80038f8 <MoveDistObstacleUS+0x2c8>)
 80037b0:	fb82 1203 	smull	r1, r2, r2, r3
 80037b4:	441a      	add	r2, r3
 80037b6:	10d2      	asrs	r2, r2, #3
 80037b8:	17db      	asrs	r3, r3, #31
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037c4:	4b4d      	ldr	r3, [pc, #308]	@ (80038fc <MoveDistObstacleUS+0x2cc>)
 80037c6:	edc3 7a00 	vstr	s15, [r3]
				speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 80037ca:	4b4c      	ldr	r3, [pc, #304]	@ (80038fc <MoveDistObstacleUS+0x2cc>)
 80037cc:	edd3 7a00 	vldr	s15, [r3]
 80037d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80037d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037dc:	dd02      	ble.n	80037e4 <MoveDistObstacleUS+0x1b4>
 80037de:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80037e2:	e00e      	b.n	8003802 <MoveDistObstacleUS+0x1d2>
 80037e4:	4b45      	ldr	r3, [pc, #276]	@ (80038fc <MoveDistObstacleUS+0x2cc>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 80037ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	d502      	bpl.n	80037fe <MoveDistObstacleUS+0x1ce>
 80037f8:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 80037fc:	e001      	b.n	8003802 <MoveDistObstacleUS+0x1d2>
 80037fe:	4b3f      	ldr	r3, [pc, #252]	@ (80038fc <MoveDistObstacleUS+0x2cc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a3e      	ldr	r2, [pc, #248]	@ (80038fc <MoveDistObstacleUS+0x2cc>)
 8003804:	6013      	str	r3, [r2, #0]
				MoveStraightSpeedScale(SPEED_MODE_SLOW, &speedScale);
 8003806:	493d      	ldr	r1, [pc, #244]	@ (80038fc <MoveDistObstacleUS+0x2cc>)
 8003808:	2001      	movs	r0, #1
 800380a:	f7ff fb55 	bl	8002eb8 <MoveStraightSpeedScale>
 800380e:	e043      	b.n	8003898 <MoveDistObstacleUS+0x268>
			}
			else
			{
				speedScale = abs(ultra_distance - *targetDist) / 15; // slow down at 15cm
 8003810:	4b35      	ldr	r3, [pc, #212]	@ (80038e8 <MoveDistObstacleUS+0x2b8>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	edd3 7a00 	vldr	s15, [r3]
 8003822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800382a:	ee17 3a90 	vmov	r3, s15
 800382e:	2b00      	cmp	r3, #0
 8003830:	bfb8      	it	lt
 8003832:	425b      	neglt	r3, r3
 8003834:	4a30      	ldr	r2, [pc, #192]	@ (80038f8 <MoveDistObstacleUS+0x2c8>)
 8003836:	fb82 1203 	smull	r1, r2, r2, r3
 800383a:	441a      	add	r2, r3
 800383c:	10d2      	asrs	r2, r2, #3
 800383e:	17db      	asrs	r3, r3, #31
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800384a:	4b2c      	ldr	r3, [pc, #176]	@ (80038fc <MoveDistObstacleUS+0x2cc>)
 800384c:	edc3 7a00 	vstr	s15, [r3]
				speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8003850:	4b2a      	ldr	r3, [pc, #168]	@ (80038fc <MoveDistObstacleUS+0x2cc>)
 8003852:	edd3 7a00 	vldr	s15, [r3]
 8003856:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800385a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800385e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003862:	dd02      	ble.n	800386a <MoveDistObstacleUS+0x23a>
 8003864:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003868:	e010      	b.n	800388c <MoveDistObstacleUS+0x25c>
 800386a:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <MoveDistObstacleUS+0x2cc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fc fe6a 	bl	8000548 <__aeabi_f2d>
 8003874:	a314      	add	r3, pc, #80	@ (adr r3, 80038c8 <MoveDistObstacleUS+0x298>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f7fd f92f 	bl	8000adc <__aeabi_dcmplt>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MoveDistObstacleUS+0x258>
 8003884:	4b1e      	ldr	r3, [pc, #120]	@ (8003900 <MoveDistObstacleUS+0x2d0>)
 8003886:	e001      	b.n	800388c <MoveDistObstacleUS+0x25c>
 8003888:	4b1c      	ldr	r3, [pc, #112]	@ (80038fc <MoveDistObstacleUS+0x2cc>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a1b      	ldr	r2, [pc, #108]	@ (80038fc <MoveDistObstacleUS+0x2cc>)
 800388e:	6013      	str	r3, [r2, #0]
				MoveStraightSpeedScale(SPEED_MODE_FAST, &speedScale);
 8003890:	491a      	ldr	r1, [pc, #104]	@ (80038fc <MoveDistObstacleUS+0x2cc>)
 8003892:	2002      	movs	r0, #2
 8003894:	f7ff fb10 	bl	8002eb8 <MoveStraightSpeedScale>
			}
			last_curTask_tick = HAL_GetTick();
 8003898:	f003 fc34 	bl	8007104 <HAL_GetTick>
 800389c:	4603      	mov	r3, r0
 800389e:	4a11      	ldr	r2, [pc, #68]	@ (80038e4 <MoveDistObstacleUS+0x2b4>)
 80038a0:	6013      	str	r3, [r2, #0]
		}
		osDelay(10);
 80038a2:	200a      	movs	r0, #10
 80038a4:	f009 fa82 	bl	800cdac <osDelay>
		if (abs(*targetDist - ultra_distance) < 0.2) break;
 80038a8:	e6dd      	b.n	8003666 <MoveDistObstacleUS+0x36>
 80038aa:	bf00      	nop
	}
	__SET_MOTOR_PWM(&htim8, 0, 0);
 80038ac:	4b15      	ldr	r3, [pc, #84]	@ (8003904 <MoveDistObstacleUS+0x2d4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2200      	movs	r2, #0
 80038b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038b4:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <MoveDistObstacleUS+0x2d4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2200      	movs	r2, #0
 80038ba:	641a      	str	r2, [r3, #64]	@ 0x40
//	distTravelled = abs(startDist - ultra_dist);
	//TODO: send distTravelled
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	f3af 8000 	nop.w
 80038c8:	9999999a 	.word	0x9999999a
 80038cc:	3fd99999 	.word	0x3fd99999
 80038d0:	20000798 	.word	0x20000798
 80038d4:	20000756 	.word	0x20000756
 80038d8:	20000758 	.word	0x20000758
 80038dc:	2000076c 	.word	0x2000076c
 80038e0:	20000780 	.word	0x20000780
 80038e4:	200007a0 	.word	0x200007a0
 80038e8:	200006bf 	.word	0x200006bf
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40020800 	.word	0x40020800
 80038f4:	40020400 	.word	0x40020400
 80038f8:	88888889 	.word	0x88888889
 80038fc:	20000004 	.word	0x20000004
 8003900:	3ecccccd 	.word	0x3ecccccd
 8003904:	200005c8 	.word	0x200005c8

08003908 <RobotMoveUntilIRHitR>:

void RobotMoveUntilIRHitR() {
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
    last_curTask_tick = HAL_GetTick();
 800390c:	f003 fbfa 	bl	8007104 <HAL_GetTick>
 8003910:	4603      	mov	r3, r0
 8003912:	4a16      	ldr	r2, [pc, #88]	@ (800396c <RobotMoveUntilIRHitR+0x64>)
 8003914:	6013      	str	r3, [r2, #0]
    do {
        // Assume IR_distances[] is updated elsewhere, like in an ADC interrupt
        if (abs(IR_distances[1]) < 40) break; // Check left IR sensor
 8003916:	4b16      	ldr	r3, [pc, #88]	@ (8003970 <RobotMoveUntilIRHitR+0x68>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f113 0f27 	cmn.w	r3, #39	@ 0x27
 800391e:	db03      	blt.n	8003928 <RobotMoveUntilIRHitR+0x20>
 8003920:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <RobotMoveUntilIRHitR+0x68>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b27      	cmp	r3, #39	@ 0x27
 8003926:	dd15      	ble.n	8003954 <RobotMoveUntilIRHitR+0x4c>
        if (HAL_GetTick() - last_curTask_tick >= 10) {
 8003928:	f003 fbec 	bl	8007104 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	4b0f      	ldr	r3, [pc, #60]	@ (800396c <RobotMoveUntilIRHitR+0x64>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b09      	cmp	r3, #9
 8003936:	d9ee      	bls.n	8003916 <RobotMoveUntilIRHitR+0xe>
        	speedScale = 0.5;
 8003938:	4b0e      	ldr	r3, [pc, #56]	@ (8003974 <RobotMoveUntilIRHitR+0x6c>)
 800393a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800393e:	601a      	str	r2, [r3, #0]
        	MoveStraightSpeedScale(SPEED_MODE_FAST, &speedScale);
 8003940:	490c      	ldr	r1, [pc, #48]	@ (8003974 <RobotMoveUntilIRHitR+0x6c>)
 8003942:	2002      	movs	r0, #2
 8003944:	f7ff fab8 	bl	8002eb8 <MoveStraightSpeedScale>
            last_curTask_tick = HAL_GetTick();
 8003948:	f003 fbdc 	bl	8007104 <HAL_GetTick>
 800394c:	4603      	mov	r3, r0
 800394e:	4a07      	ldr	r2, [pc, #28]	@ (800396c <RobotMoveUntilIRHitR+0x64>)
 8003950:	6013      	str	r3, [r2, #0]
        if (abs(IR_distances[1]) < 40) break; // Check left IR sensor
 8003952:	e7e0      	b.n	8003916 <RobotMoveUntilIRHitR+0xe>
 8003954:	bf00      	nop
        }
    } while (1);
    __SET_MOTOR_PWM(&htim8, 0, 0);
 8003956:	4b08      	ldr	r3, [pc, #32]	@ (8003978 <RobotMoveUntilIRHitR+0x70>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800395e:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <RobotMoveUntilIRHitR+0x70>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2200      	movs	r2, #0
 8003964:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200007a0 	.word	0x200007a0
 8003970:	2000072c 	.word	0x2000072c
 8003974:	20000004 	.word	0x20000004
 8003978:	200005c8 	.word	0x200005c8

0800397c <RobotMoveUntilIRHitL>:

void RobotMoveUntilIRHitL() {
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
    last_curTask_tick = HAL_GetTick();
 8003980:	f003 fbc0 	bl	8007104 <HAL_GetTick>
 8003984:	4603      	mov	r3, r0
 8003986:	4a16      	ldr	r2, [pc, #88]	@ (80039e0 <RobotMoveUntilIRHitL+0x64>)
 8003988:	6013      	str	r3, [r2, #0]
    do {
        // Assume IR_distances[] is updated elsewhere, like in an ADC interrupt
        if (abs(IR_distances[0]) < 40) break; // Check left IR sensor
 800398a:	4b16      	ldr	r3, [pc, #88]	@ (80039e4 <RobotMoveUntilIRHitL+0x68>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f113 0f27 	cmn.w	r3, #39	@ 0x27
 8003992:	db03      	blt.n	800399c <RobotMoveUntilIRHitL+0x20>
 8003994:	4b13      	ldr	r3, [pc, #76]	@ (80039e4 <RobotMoveUntilIRHitL+0x68>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b27      	cmp	r3, #39	@ 0x27
 800399a:	dd15      	ble.n	80039c8 <RobotMoveUntilIRHitL+0x4c>
        if (HAL_GetTick() - last_curTask_tick >= 10) {
 800399c:	f003 fbb2 	bl	8007104 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b0f      	ldr	r3, [pc, #60]	@ (80039e0 <RobotMoveUntilIRHitL+0x64>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b09      	cmp	r3, #9
 80039aa:	d9ee      	bls.n	800398a <RobotMoveUntilIRHitL+0xe>
        	speedScale = 0.5;
 80039ac:	4b0e      	ldr	r3, [pc, #56]	@ (80039e8 <RobotMoveUntilIRHitL+0x6c>)
 80039ae:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80039b2:	601a      	str	r2, [r3, #0]
        	MoveStraightSpeedScale(SPEED_MODE_FAST, &speedScale);
 80039b4:	490c      	ldr	r1, [pc, #48]	@ (80039e8 <RobotMoveUntilIRHitL+0x6c>)
 80039b6:	2002      	movs	r0, #2
 80039b8:	f7ff fa7e 	bl	8002eb8 <MoveStraightSpeedScale>
            last_curTask_tick = HAL_GetTick();
 80039bc:	f003 fba2 	bl	8007104 <HAL_GetTick>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4a07      	ldr	r2, [pc, #28]	@ (80039e0 <RobotMoveUntilIRHitL+0x64>)
 80039c4:	6013      	str	r3, [r2, #0]
        if (abs(IR_distances[0]) < 40) break; // Check left IR sensor
 80039c6:	e7e0      	b.n	800398a <RobotMoveUntilIRHitL+0xe>
 80039c8:	bf00      	nop
        }
    } while (1);
    __SET_MOTOR_PWM(&htim8, 0, 0);
 80039ca:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <RobotMoveUntilIRHitL+0x70>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2200      	movs	r2, #0
 80039d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <RobotMoveUntilIRHitL+0x70>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2200      	movs	r2, #0
 80039d8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	200007a0 	.word	0x200007a0
 80039e4:	2000072c 	.word	0x2000072c
 80039e8:	20000004 	.word	0x20000004
 80039ec:	200005c8 	.word	0x200005c8

080039f0 <RobotMoveUntilIROvershootR>:

void RobotMoveUntilIROvershootR() {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
//	obsDist_IR = 0;
//	curAngle = 0; gyroZ = 0;
	  last_curTask_tick = HAL_GetTick();
 80039f4:	f003 fb86 	bl	8007104 <HAL_GetTick>
 80039f8:	4603      	mov	r3, r0
 80039fa:	4a15      	ldr	r2, [pc, #84]	@ (8003a50 <RobotMoveUntilIROvershootR+0x60>)
 80039fc:	6013      	str	r3, [r2, #0]
	  do {
//		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
//		  if (obsDist_IR > 50) break;
		  if(abs(IR_distances[1]) > 40) break;
 80039fe:	4b15      	ldr	r3, [pc, #84]	@ (8003a54 <RobotMoveUntilIROvershootR+0x64>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bfb8      	it	lt
 8003a06:	425b      	neglt	r3, r3
 8003a08:	2b28      	cmp	r3, #40	@ 0x28
 8003a0a:	dc15      	bgt.n	8003a38 <RobotMoveUntilIROvershootR+0x48>
		  if (HAL_GetTick() - last_curTask_tick >= 10) {
 8003a0c:	f003 fb7a 	bl	8007104 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b0f      	ldr	r3, [pc, #60]	@ (8003a50 <RobotMoveUntilIROvershootR+0x60>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b09      	cmp	r3, #9
 8003a1a:	d9f0      	bls.n	80039fe <RobotMoveUntilIROvershootR+0xe>
			  speedScale = 0.5;
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a58 <RobotMoveUntilIROvershootR+0x68>)
 8003a1e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003a22:	601a      	str	r2, [r3, #0]
			  MoveStraightSpeedScale(SPEED_MODE_FAST, &speedScale);
 8003a24:	490c      	ldr	r1, [pc, #48]	@ (8003a58 <RobotMoveUntilIROvershootR+0x68>)
 8003a26:	2002      	movs	r0, #2
 8003a28:	f7ff fa46 	bl	8002eb8 <MoveStraightSpeedScale>
			  last_curTask_tick = HAL_GetTick();
 8003a2c:	f003 fb6a 	bl	8007104 <HAL_GetTick>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4a07      	ldr	r2, [pc, #28]	@ (8003a50 <RobotMoveUntilIROvershootR+0x60>)
 8003a34:	6013      	str	r3, [r2, #0]
		  if(abs(IR_distances[1]) > 40) break;
 8003a36:	e7e2      	b.n	80039fe <RobotMoveUntilIROvershootR+0xe>
 8003a38:	bf00      	nop
		  }
	  } while (1);
	  __SET_MOTOR_PWM(&htim8, 0, 0);
 8003a3a:	4b08      	ldr	r3, [pc, #32]	@ (8003a5c <RobotMoveUntilIROvershootR+0x6c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a42:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <RobotMoveUntilIROvershootR+0x6c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	200007a0 	.word	0x200007a0
 8003a54:	2000072c 	.word	0x2000072c
 8003a58:	20000004 	.word	0x20000004
 8003a5c:	200005c8 	.word	0x200005c8

08003a60 <RobotMoveUntilIROvershootL>:

void RobotMoveUntilIROvershootL() {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
//	obsDist_IR = 0;
//	curAngle = 0; gyroZ = 0;
	  last_curTask_tick = HAL_GetTick();
 8003a64:	f003 fb4e 	bl	8007104 <HAL_GetTick>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a15      	ldr	r2, [pc, #84]	@ (8003ac0 <RobotMoveUntilIROvershootL+0x60>)
 8003a6c:	6013      	str	r3, [r2, #0]
	  do {
//		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
//		  if (obsDist_IR > 50) break;
		  if(abs(IR_distances[0]) > 40) break;
 8003a6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <RobotMoveUntilIROvershootL+0x64>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bfb8      	it	lt
 8003a76:	425b      	neglt	r3, r3
 8003a78:	2b28      	cmp	r3, #40	@ 0x28
 8003a7a:	dc15      	bgt.n	8003aa8 <RobotMoveUntilIROvershootL+0x48>
		  if (HAL_GetTick() - last_curTask_tick >= 10) {
 8003a7c:	f003 fb42 	bl	8007104 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <RobotMoveUntilIROvershootL+0x60>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b09      	cmp	r3, #9
 8003a8a:	d9f0      	bls.n	8003a6e <RobotMoveUntilIROvershootL+0xe>
			  speedScale = 0.5;
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac8 <RobotMoveUntilIROvershootL+0x68>)
 8003a8e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003a92:	601a      	str	r2, [r3, #0]
			  MoveStraightSpeedScale(SPEED_MODE_FAST, &speedScale);
 8003a94:	490c      	ldr	r1, [pc, #48]	@ (8003ac8 <RobotMoveUntilIROvershootL+0x68>)
 8003a96:	2002      	movs	r0, #2
 8003a98:	f7ff fa0e 	bl	8002eb8 <MoveStraightSpeedScale>
			  last_curTask_tick = HAL_GetTick();
 8003a9c:	f003 fb32 	bl	8007104 <HAL_GetTick>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4a07      	ldr	r2, [pc, #28]	@ (8003ac0 <RobotMoveUntilIROvershootL+0x60>)
 8003aa4:	6013      	str	r3, [r2, #0]
		  if(abs(IR_distances[0]) > 40) break;
 8003aa6:	e7e2      	b.n	8003a6e <RobotMoveUntilIROvershootL+0xe>
 8003aa8:	bf00      	nop
		  }
	  } while (1);
	  __SET_MOTOR_PWM(&htim8, 0, 0);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <RobotMoveUntilIROvershootL+0x6c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ab2:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <RobotMoveUntilIROvershootL+0x6c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200007a0 	.word	0x200007a0
 8003ac4:	2000072c 	.word	0x2000072c
 8003ac8:	20000004 	.word	0x20000004
 8003acc:	200005c8 	.word	0x200005c8

08003ad0 <FastestCar_Turn_L180>:

void FastestCar_Turn_L180(uint8_t turnSize) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
	__SET_MOTOR_DIR(1);
 8003ada:	2200      	movs	r2, #0
 8003adc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ae0:	4823      	ldr	r0, [pc, #140]	@ (8003b70 <FastestCar_Turn_L180+0xa0>)
 8003ae2:	f004 fded 	bl	80086c0 <HAL_GPIO_WritePin>
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	2120      	movs	r1, #32
 8003aea:	4822      	ldr	r0, [pc, #136]	@ (8003b74 <FastestCar_Turn_L180+0xa4>)
 8003aec:	f004 fde8 	bl	80086c0 <HAL_GPIO_WritePin>
 8003af0:	2200      	movs	r2, #0
 8003af2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003af6:	4820      	ldr	r0, [pc, #128]	@ (8003b78 <FastestCar_Turn_L180+0xa8>)
 8003af8:	f004 fde2 	bl	80086c0 <HAL_GPIO_WritePin>
 8003afc:	2201      	movs	r2, #1
 8003afe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b02:	481d      	ldr	r0, [pc, #116]	@ (8003b78 <FastestCar_Turn_L180+0xa8>)
 8003b04:	f004 fddc 	bl	80086c0 <HAL_GPIO_WritePin>
	switch (turnSize) {
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d114      	bne.n	8003b38 <FastestCar_Turn_L180+0x68>
	case 1:
		targetAngle = 172;
 8003b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b7c <FastestCar_Turn_L180+0xac>)
 8003b10:	4a1b      	ldr	r2, [pc, #108]	@ (8003b80 <FastestCar_Turn_L180+0xb0>)
 8003b12:	601a      	str	r2, [r3, #0]
		__SET_SMOTOR_ANGLE(&htim1, 83);
 8003b14:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <FastestCar_Turn_L180+0xb4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2253      	movs	r2, #83	@ 0x53
 8003b1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b1c:	20fa      	movs	r0, #250	@ 0xfa
 8003b1e:	f003 fafd 	bl	800711c <HAL_Delay>
		__SET_MOTOR_PWM(&htim8, 2000, 3500);
 8003b22:	4b19      	ldr	r3, [pc, #100]	@ (8003b88 <FastestCar_Turn_L180+0xb8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b2c:	4b16      	ldr	r3, [pc, #88]	@ (8003b88 <FastestCar_Turn_L180+0xb8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8003b34:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8003b36:	e014      	b.n	8003b62 <FastestCar_Turn_L180+0x92>

	case 3:
	case 4:
	default:
//		targetAngle = -176;
		targetAngle = 170;
 8003b38:	4b10      	ldr	r3, [pc, #64]	@ (8003b7c <FastestCar_Turn_L180+0xac>)
 8003b3a:	4a14      	ldr	r2, [pc, #80]	@ (8003b8c <FastestCar_Turn_L180+0xbc>)
 8003b3c:	601a      	str	r2, [r3, #0]
		__SET_SMOTOR_ANGLE(&htim1, 83);
 8003b3e:	4b11      	ldr	r3, [pc, #68]	@ (8003b84 <FastestCar_Turn_L180+0xb4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2253      	movs	r2, #83	@ 0x53
 8003b44:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b46:	20fa      	movs	r0, #250	@ 0xfa
 8003b48:	f003 fae8 	bl	800711c <HAL_Delay>
//		__SET_MOTOR_PWM(&htim8, 2700, 2500);
		__SET_MOTOR_PWM(&htim8, 3500, 3240);
 8003b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b88 <FastestCar_Turn_L180+0xb8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8003b54:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b56:	4b0c      	ldr	r3, [pc, #48]	@ (8003b88 <FastestCar_Turn_L180+0xb8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f640 42a8 	movw	r2, #3240	@ 0xca8
 8003b5e:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8003b60:	bf00      	nop
	}
	Turn(&targetAngle);
 8003b62:	4806      	ldr	r0, [pc, #24]	@ (8003b7c <FastestCar_Turn_L180+0xac>)
 8003b64:	f7ff fc90 	bl	8003488 <Turn>
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40020800 	.word	0x40020800
 8003b78:	40020400 	.word	0x40020400
 8003b7c:	20000794 	.word	0x20000794
 8003b80:	432c0000 	.word	0x432c0000
 8003b84:	20000460 	.word	0x20000460
 8003b88:	200005c8 	.word	0x200005c8
 8003b8c:	432a0000 	.word	0x432a0000

08003b90 <FastestCar_Turn_R180>:


void FastestCar_Turn_R180(uint8_t turnSize) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	71fb      	strb	r3, [r7, #7]
	__SET_MOTOR_DIR(1);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ba0:	4823      	ldr	r0, [pc, #140]	@ (8003c30 <FastestCar_Turn_R180+0xa0>)
 8003ba2:	f004 fd8d 	bl	80086c0 <HAL_GPIO_WritePin>
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	2120      	movs	r1, #32
 8003baa:	4822      	ldr	r0, [pc, #136]	@ (8003c34 <FastestCar_Turn_R180+0xa4>)
 8003bac:	f004 fd88 	bl	80086c0 <HAL_GPIO_WritePin>
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bb6:	4820      	ldr	r0, [pc, #128]	@ (8003c38 <FastestCar_Turn_R180+0xa8>)
 8003bb8:	f004 fd82 	bl	80086c0 <HAL_GPIO_WritePin>
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003bc2:	481d      	ldr	r0, [pc, #116]	@ (8003c38 <FastestCar_Turn_R180+0xa8>)
 8003bc4:	f004 fd7c 	bl	80086c0 <HAL_GPIO_WritePin>
	switch (turnSize) {
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d114      	bne.n	8003bf8 <FastestCar_Turn_R180+0x68>
	case 1:
		targetAngle = -172;
 8003bce:	4b1b      	ldr	r3, [pc, #108]	@ (8003c3c <FastestCar_Turn_R180+0xac>)
 8003bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c40 <FastestCar_Turn_R180+0xb0>)
 8003bd2:	601a      	str	r2, [r3, #0]
		__SET_SMOTOR_ANGLE(&htim1, 200);
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c44 <FastestCar_Turn_R180+0xb4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	22c8      	movs	r2, #200	@ 0xc8
 8003bda:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bdc:	20fa      	movs	r0, #250	@ 0xfa
 8003bde:	f003 fa9d 	bl	800711c <HAL_Delay>
		__SET_MOTOR_PWM(&htim8, 3500, 2000);
 8003be2:	4b19      	ldr	r3, [pc, #100]	@ (8003c48 <FastestCar_Turn_R180+0xb8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8003bea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003bec:	4b16      	ldr	r3, [pc, #88]	@ (8003c48 <FastestCar_Turn_R180+0xb8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003bf4:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8003bf6:	e014      	b.n	8003c22 <FastestCar_Turn_R180+0x92>

	case 3:
	case 4:
	default:
//		targetAngle = -176;
		targetAngle = -170;
 8003bf8:	4b10      	ldr	r3, [pc, #64]	@ (8003c3c <FastestCar_Turn_R180+0xac>)
 8003bfa:	4a14      	ldr	r2, [pc, #80]	@ (8003c4c <FastestCar_Turn_R180+0xbc>)
 8003bfc:	601a      	str	r2, [r3, #0]
		__SET_SMOTOR_ANGLE(&htim1, 240);
 8003bfe:	4b11      	ldr	r3, [pc, #68]	@ (8003c44 <FastestCar_Turn_R180+0xb4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	22f0      	movs	r2, #240	@ 0xf0
 8003c04:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c06:	20fa      	movs	r0, #250	@ 0xfa
 8003c08:	f003 fa88 	bl	800711c <HAL_Delay>
//		__SET_MOTOR_PWM(&htim8, 2700, 2500);
		__SET_MOTOR_PWM(&htim8, 3500, 3240);
 8003c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c48 <FastestCar_Turn_R180+0xb8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8003c14:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c16:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <FastestCar_Turn_R180+0xb8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f640 42a8 	movw	r2, #3240	@ 0xca8
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8003c20:	bf00      	nop
	}
	Turn(&targetAngle);
 8003c22:	4806      	ldr	r0, [pc, #24]	@ (8003c3c <FastestCar_Turn_R180+0xac>)
 8003c24:	f7ff fc30 	bl	8003488 <Turn>
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40020800 	.word	0x40020800
 8003c38:	40020400 	.word	0x40020400
 8003c3c:	20000794 	.word	0x20000794
 8003c40:	c32c0000 	.word	0xc32c0000
 8003c44:	20000460 	.word	0x20000460
 8003c48:	200005c8 	.word	0x200005c8
 8003c4c:	c32a0000 	.word	0xc32a0000

08003c50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	sprintf(showTask, "Task: ", 0);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	4904      	ldr	r1, [pc, #16]	@ (8003c6c <StartDefaultTask+0x1c>)
 8003c5c:	4804      	ldr	r0, [pc, #16]	@ (8003c70 <StartDefaultTask+0x20>)
 8003c5e:	f00c fd83 	bl	8010768 <siprintf>
//    if(ch < 'Z')
//    	ch++;
//    else
//    	ch = 'A';
//    HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
    osDelay(1000);
 8003c62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c66:	f009 f8a1 	bl	800cdac <osDelay>
 8003c6a:	e7fa      	b.n	8003c62 <StartDefaultTask+0x12>
 8003c6c:	08013988 	.word	0x08013988
 8003c70:	200006a0 	.word	0x200006a0

08003c74 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

//  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //Start PWM timer for Rear Motor Left
//  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); //Start PWM timer for Rear Motor Right
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //Start PWM timer for Servo Motor
  /* Infinite loop */
  for(;;)
 8003c7c:	bf00      	nop
 8003c7e:	e7fd      	b.n	8003c7c <motors+0x8>

08003c80 <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    //sprintf(oled_buf, "Clicked: %d\0", btnClicked);
    //OLED_ShowString(10, 0, oled_buf);
	sprintf(oled_buf, "CMD: %5s\0", aRxBuffer);
 8003c88:	f107 030c 	add.w	r3, r7, #12
 8003c8c:	4a2f      	ldr	r2, [pc, #188]	@ (8003d4c <show+0xcc>)
 8003c8e:	4930      	ldr	r1, [pc, #192]	@ (8003d50 <show+0xd0>)
 8003c90:	4618      	mov	r0, r3
 8003c92:	f00c fd69 	bl	8010768 <siprintf>
	OLED_ShowString(0, 0, oled_buf);
 8003c96:	f107 030c 	add.w	r3, r7, #12
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f00b ff56 	bl	800fb50 <OLED_ShowString>
    sprintf(oled_buf, "USDist: %5d\0", ultra_distance);
 8003ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d54 <show+0xd4>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f107 030c 	add.w	r3, r7, #12
 8003cae:	492a      	ldr	r1, [pc, #168]	@ (8003d58 <show+0xd8>)
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f00c fd59 	bl	8010768 <siprintf>
    OLED_ShowString(0, 10, oled_buf);
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	461a      	mov	r2, r3
 8003cbc:	210a      	movs	r1, #10
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f00b ff46 	bl	800fb50 <OLED_ShowString>
    //sprintf(oled_buf, "Ticks %5d\0", record_ticks);

    // sprintf(oled_buf, "county: %5d\0", total_count_y);
    sprintf(oled_buf, "IRDistL: %5d\0", IR_distances[0]);
 8003cc4:	4b25      	ldr	r3, [pc, #148]	@ (8003d5c <show+0xdc>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	f107 030c 	add.w	r3, r7, #12
 8003ccc:	4924      	ldr	r1, [pc, #144]	@ (8003d60 <show+0xe0>)
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f00c fd4a 	bl	8010768 <siprintf>
	OLED_ShowString(0, 20, oled_buf);
 8003cd4:	f107 030c 	add.w	r3, r7, #12
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2114      	movs	r1, #20
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f00b ff37 	bl	800fb50 <OLED_ShowString>
	// sprintf(oled_buf, "countx: %5d\0", total_count_x);
	sprintf(oled_buf, "IRDistR: %5d\0", IR_distances[1]);
 8003ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d5c <show+0xdc>)
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	f107 030c 	add.w	r3, r7, #12
 8003cea:	491e      	ldr	r1, [pc, #120]	@ (8003d64 <show+0xe4>)
 8003cec:	4618      	mov	r0, r3
 8003cee:	f00c fd3b 	bl	8010768 <siprintf>
	OLED_ShowString(0, 30, oled_buf);
 8003cf2:	f107 030c 	add.w	r3, r7, #12
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	211e      	movs	r1, #30
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f00b ff28 	bl	800fb50 <OLED_ShowString>
	// sprintf(oled_buf, "ObsLen: %5d\0", test_obslen);
	sprintf(oled_buf, "count_Y: %5d\0", total_count_y);
 8003d00:	4b19      	ldr	r3, [pc, #100]	@ (8003d68 <show+0xe8>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	f107 030c 	add.w	r3, r7, #12
 8003d08:	4918      	ldr	r1, [pc, #96]	@ (8003d6c <show+0xec>)
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f00c fd2c 	bl	8010768 <siprintf>
	OLED_ShowString(0, 40, oled_buf);
 8003d10:	f107 030c 	add.w	r3, r7, #12
 8003d14:	461a      	mov	r2, r3
 8003d16:	2128      	movs	r1, #40	@ 0x28
 8003d18:	2000      	movs	r0, #0
 8003d1a:	f00b ff19 	bl	800fb50 <OLED_ShowString>
	sprintf(oled_buf, "count_X: %5d\0", total_count_x);
 8003d1e:	4b14      	ldr	r3, [pc, #80]	@ (8003d70 <show+0xf0>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	f107 030c 	add.w	r3, r7, #12
 8003d26:	4913      	ldr	r1, [pc, #76]	@ (8003d74 <show+0xf4>)
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f00c fd1d 	bl	8010768 <siprintf>
	OLED_ShowString(0, 50, oled_buf);
 8003d2e:	f107 030c 	add.w	r3, r7, #12
 8003d32:	461a      	mov	r2, r3
 8003d34:	2132      	movs	r1, #50	@ 0x32
 8003d36:	2000      	movs	r0, #0
 8003d38:	f00b ff0a 	bl	800fb50 <OLED_ShowString>
	//sprintf(oled_buf, "ObsLen: %5d\0", test_obslen);
	//OLED_ShowString(0, 50, oled_buf);
    OLED_Refresh_Gram();
 8003d3c:	f00b fd94 	bl	800f868 <OLED_Refresh_Gram>

    //To test transmission of data every time OLED refreshes
//    HAL_UART_Transmit(&huart3, oled_buf, 11, 0xFFFF);

    osDelay(100);
 8003d40:	2064      	movs	r0, #100	@ 0x64
 8003d42:	f009 f833 	bl	800cdac <osDelay>
	sprintf(oled_buf, "CMD: %5s\0", aRxBuffer);
 8003d46:	bf00      	nop
 8003d48:	e79e      	b.n	8003c88 <show+0x8>
 8003d4a:	bf00      	nop
 8003d4c:	200006b4 	.word	0x200006b4
 8003d50:	08013990 	.word	0x08013990
 8003d54:	200006bf 	.word	0x200006bf
 8003d58:	0801399c 	.word	0x0801399c
 8003d5c:	2000072c 	.word	0x2000072c
 8003d60:	080139ac 	.word	0x080139ac
 8003d64:	080139bc 	.word	0x080139bc
 8003d68:	2000074c 	.word	0x2000074c
 8003d6c:	080139cc 	.word	0x080139cc
 8003d70:	20000750 	.word	0x20000750
 8003d74:	080139dc 	.word	0x080139dc

08003d78 <ultrasonic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultrasonic */
void ultrasonic(void *argument)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ultrasonic */
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1); //Enable interrupt for echo
 8003d80:	4b15      	ldr	r3, [pc, #84]	@ (8003dd8 <ultrasonic+0x60>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	4b14      	ldr	r3, [pc, #80]	@ (8003dd8 <ultrasonic+0x60>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0202 	orr.w	r2, r2, #2
 8003d8e:	60da      	str	r2, [r3, #12]
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4); //Start timer interrupt for echo
 8003d90:	210c      	movs	r1, #12
 8003d92:	4811      	ldr	r0, [pc, #68]	@ (8003dd8 <ultrasonic+0x60>)
 8003d94:	f006 fb9e 	bl	800a4d4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim6); //Start timer for delay_us
 8003d98:	4810      	ldr	r0, [pc, #64]	@ (8003ddc <ultrasonic+0x64>)
 8003d9a:	f006 f9b7 	bl	800a10c <HAL_TIM_Base_Start>
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(ULTRA_TRIG_GPIO_Port, ULTRA_TRIG_Pin, GPIO_PIN_RESET);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003da4:	480e      	ldr	r0, [pc, #56]	@ (8003de0 <ultrasonic+0x68>)
 8003da6:	f004 fc8b 	bl	80086c0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8003daa:	2032      	movs	r0, #50	@ 0x32
 8003dac:	f003 f9b6 	bl	800711c <HAL_Delay>
	HAL_GPIO_WritePin(ULTRA_TRIG_GPIO_Port, ULTRA_TRIG_Pin, GPIO_PIN_SET);
 8003db0:	2201      	movs	r2, #1
 8003db2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003db6:	480a      	ldr	r0, [pc, #40]	@ (8003de0 <ultrasonic+0x68>)
 8003db8:	f004 fc82 	bl	80086c0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_SET);
    delay_us(10); //wait for 10us (use tim6 to generate this delay?)
 8003dbc:	200a      	movs	r0, #10
 8003dbe:	f7fe fe2b 	bl	8002a18 <delay_us>
    HAL_GPIO_WritePin(ULTRA_TRIG_GPIO_Port, ULTRA_TRIG_Pin, GPIO_PIN_RESET);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003dc8:	4805      	ldr	r0, [pc, #20]	@ (8003de0 <ultrasonic+0x68>)
 8003dca:	f004 fc79 	bl	80086c0 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_RESET);
    HAL_Delay(50);
 8003dce:	2032      	movs	r0, #50	@ 0x32
 8003dd0:	f003 f9a4 	bl	800711c <HAL_Delay>
	HAL_GPIO_WritePin(ULTRA_TRIG_GPIO_Port, ULTRA_TRIG_Pin, GPIO_PIN_RESET);
 8003dd4:	bf00      	nop
 8003dd6:	e7e2      	b.n	8003d9e <ultrasonic+0x26>
 8003dd8:	20000538 	.word	0x20000538
 8003ddc:	20000580 	.word	0x20000580
 8003de0:	40020c00 	.word	0x40020c00

08003de4 <lencoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lencoder */
void lencoder(void *argument)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
//
//			//Restart process
//			lcnt1 = __HAL_TIM_GET_COUNTER(&htim2);
//			ltick = HAL_GetTick();
//	}
    osDelay(1); //Don't delay, it'll cause encoder to be inaccurate
 8003dec:	2001      	movs	r0, #1
 8003dee:	f008 ffdd 	bl	800cdac <osDelay>
 8003df2:	e7fb      	b.n	8003dec <lencoder+0x8>

08003df4 <rencoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rencoder */
void rencoder(void *argument)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
//	uint16_t rdir;
//
//	rcnt1 = __HAL_TIM_GET_COUNTER(&htim3);
//	rtick = HAL_GetTick();
  /* Infinite loop */
  for(;;)
 8003dfc:	bf00      	nop
 8003dfe:	e7fd      	b.n	8003dfc <rencoder+0x8>

08003e00 <infrared>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_infrared */
void infrared(void *argument)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN infrared */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, adcChannelCount);
 8003e08:	2328      	movs	r3, #40	@ 0x28
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4913      	ldr	r1, [pc, #76]	@ (8003e5c <infrared+0x5c>)
 8003e0e:	4814      	ldr	r0, [pc, #80]	@ (8003e60 <infrared+0x60>)
 8003e10:	f003 f9ec 	bl	80071ec <HAL_ADC_Start_DMA>
	IR_distances[0] = ADC_To_Dist((uint16_t)(ir_sensor_a_sum / 10));
 8003e14:	4b13      	ldr	r3, [pc, #76]	@ (8003e64 <infrared+0x64>)
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	4a13      	ldr	r2, [pc, #76]	@ (8003e68 <infrared+0x68>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	08db      	lsrs	r3, r3, #3
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fe fe13 	bl	8002a50 <ADC_To_Dist>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e6c <infrared+0x6c>)
 8003e30:	601a      	str	r2, [r3, #0]
	IR_distances[1] = ADC_To_Dist((uint16_t)(ir_sensor_b_sum / 10));
 8003e32:	4b0f      	ldr	r3, [pc, #60]	@ (8003e70 <infrared+0x70>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	4a0b      	ldr	r2, [pc, #44]	@ (8003e68 <infrared+0x68>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	08db      	lsrs	r3, r3, #3
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fe04 	bl	8002a50 <ADC_To_Dist>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <infrared+0x6c>)
 8003e4e:	605a      	str	r2, [r3, #4]
    osDelay(500);
 8003e50:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e54:	f008 ffaa 	bl	800cdac <osDelay>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, adcChannelCount);
 8003e58:	bf00      	nop
 8003e5a:	e7d5      	b.n	8003e08 <infrared+0x8>
 8003e5c:	200006d8 	.word	0x200006d8
 8003e60:	20000364 	.word	0x20000364
 8003e64:	20000728 	.word	0x20000728
 8003e68:	cccccccd 	.word	0xcccccccd
 8003e6c:	2000072c 	.word	0x2000072c
 8003e70:	2000072a 	.word	0x2000072a

08003e74 <processCmd>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_processCmd */
void processCmd(void *argument)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN processCmd */
//	uint8_t tmp[20];
  /* Infinite loop */
  for(;;)
  {
	  switch(curCmd.index)
 8003e7c:	4bc7      	ldr	r3, [pc, #796]	@ (800419c <processCmd+0x328>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	2b63      	cmp	r3, #99	@ 0x63
 8003e84:	f200 81f6 	bhi.w	8004274 <processCmd+0x400>
 8003e88:	a201      	add	r2, pc, #4	@ (adr r2, 8003e90 <processCmd+0x1c>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08004021 	.word	0x08004021
 8003e94:	08004021 	.word	0x08004021
 8003e98:	0800403d 	.word	0x0800403d
 8003e9c:	0800403d 	.word	0x0800403d
 8003ea0:	0800403d 	.word	0x0800403d
 8003ea4:	0800403d 	.word	0x0800403d
 8003ea8:	08004219 	.word	0x08004219
 8003eac:	08004227 	.word	0x08004227
 8003eb0:	08004235 	.word	0x08004235
 8003eb4:	08004243 	.word	0x08004243
 8003eb8:	08004275 	.word	0x08004275
 8003ebc:	08004275 	.word	0x08004275
 8003ec0:	08004251 	.word	0x08004251
 8003ec4:	08004259 	.word	0x08004259
 8003ec8:	08004275 	.word	0x08004275
 8003ecc:	08004275 	.word	0x08004275
 8003ed0:	08004267 	.word	0x08004267
 8003ed4:	08004275 	.word	0x08004275
 8003ed8:	08004275 	.word	0x08004275
 8003edc:	08004275 	.word	0x08004275
 8003ee0:	08004275 	.word	0x08004275
 8003ee4:	08004275 	.word	0x08004275
 8003ee8:	08004275 	.word	0x08004275
 8003eec:	08004275 	.word	0x08004275
 8003ef0:	08004275 	.word	0x08004275
 8003ef4:	08004275 	.word	0x08004275
 8003ef8:	08004275 	.word	0x08004275
 8003efc:	08004275 	.word	0x08004275
 8003f00:	08004275 	.word	0x08004275
 8003f04:	08004275 	.word	0x08004275
 8003f08:	08004275 	.word	0x08004275
 8003f0c:	08004275 	.word	0x08004275
 8003f10:	08004275 	.word	0x08004275
 8003f14:	08004275 	.word	0x08004275
 8003f18:	08004275 	.word	0x08004275
 8003f1c:	08004275 	.word	0x08004275
 8003f20:	08004275 	.word	0x08004275
 8003f24:	08004275 	.word	0x08004275
 8003f28:	08004275 	.word	0x08004275
 8003f2c:	08004275 	.word	0x08004275
 8003f30:	08004275 	.word	0x08004275
 8003f34:	08004275 	.word	0x08004275
 8003f38:	08004275 	.word	0x08004275
 8003f3c:	08004275 	.word	0x08004275
 8003f40:	08004275 	.word	0x08004275
 8003f44:	08004275 	.word	0x08004275
 8003f48:	08004275 	.word	0x08004275
 8003f4c:	08004275 	.word	0x08004275
 8003f50:	08004275 	.word	0x08004275
 8003f54:	08004275 	.word	0x08004275
 8003f58:	08004275 	.word	0x08004275
 8003f5c:	08004275 	.word	0x08004275
 8003f60:	08004275 	.word	0x08004275
 8003f64:	08004275 	.word	0x08004275
 8003f68:	08004275 	.word	0x08004275
 8003f6c:	08004275 	.word	0x08004275
 8003f70:	08004275 	.word	0x08004275
 8003f74:	08004275 	.word	0x08004275
 8003f78:	08004275 	.word	0x08004275
 8003f7c:	08004275 	.word	0x08004275
 8003f80:	08004275 	.word	0x08004275
 8003f84:	08004275 	.word	0x08004275
 8003f88:	08004275 	.word	0x08004275
 8003f8c:	08004275 	.word	0x08004275
 8003f90:	08004275 	.word	0x08004275
 8003f94:	08004275 	.word	0x08004275
 8003f98:	08004275 	.word	0x08004275
 8003f9c:	08004275 	.word	0x08004275
 8003fa0:	08004275 	.word	0x08004275
 8003fa4:	08004275 	.word	0x08004275
 8003fa8:	08004275 	.word	0x08004275
 8003fac:	08004275 	.word	0x08004275
 8003fb0:	08004275 	.word	0x08004275
 8003fb4:	08004275 	.word	0x08004275
 8003fb8:	08004275 	.word	0x08004275
 8003fbc:	08004275 	.word	0x08004275
 8003fc0:	08004275 	.word	0x08004275
 8003fc4:	08004275 	.word	0x08004275
 8003fc8:	08004275 	.word	0x08004275
 8003fcc:	08004275 	.word	0x08004275
 8003fd0:	08004275 	.word	0x08004275
 8003fd4:	08004275 	.word	0x08004275
 8003fd8:	08004275 	.word	0x08004275
 8003fdc:	08004275 	.word	0x08004275
 8003fe0:	08004275 	.word	0x08004275
 8003fe4:	08004275 	.word	0x08004275
 8003fe8:	08004275 	.word	0x08004275
 8003fec:	08004275 	.word	0x08004275
 8003ff0:	08004275 	.word	0x08004275
 8003ff4:	08004275 	.word	0x08004275
 8003ff8:	08004275 	.word	0x08004275
 8003ffc:	08004275 	.word	0x08004275
 8004000:	08004275 	.word	0x08004275
 8004004:	08004275 	.word	0x08004275
 8004008:	08004275 	.word	0x08004275
 800400c:	08004275 	.word	0x08004275
 8004010:	08004275 	.word	0x08004275
 8004014:	08004275 	.word	0x08004275
 8004018:	08004275 	.word	0x08004275
 800401c:	08004275 	.word	0x08004275
	  {
	  //	  	 case 0: // STOP handled in UART IRQ directly
	  //	  	  	  break;
	  	  	 case 1: //FW
	  	  	 case 2: //BW
	  	  		curTask = curCmd.index == 1 ? TASK_MOVE : TASK_MOVE_BACKWARD;
 8004020:	4b5e      	ldr	r3, [pc, #376]	@ (800419c <processCmd+0x328>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b01      	cmp	r3, #1
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	4b5b      	ldr	r3, [pc, #364]	@ (80041a0 <processCmd+0x32c>)
 8004032:	701a      	strb	r2, [r3, #0]
	  	  		__PEND_CURCMD(curCmd);
 8004034:	4b59      	ldr	r3, [pc, #356]	@ (800419c <processCmd+0x328>)
 8004036:	2263      	movs	r2, #99	@ 0x63
 8004038:	701a      	strb	r2, [r3, #0]
	  	  		 break;
 800403a:	e11c      	b.n	8004276 <processCmd+0x402>
	  	  	case 3: //FL manual
	  		case 4: //FR manual
	  		case 5: //BL manual
	  		case 6: //BR manual
	  			__SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 800403c:	4b57      	ldr	r3, [pc, #348]	@ (800419c <processCmd+0x328>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4a58      	ldr	r2, [pc, #352]	@ (80041a4 <processCmd+0x330>)
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	4413      	add	r3, r2
 8004046:	3304      	adds	r3, #4
 8004048:	edd3 7a00 	vldr	s15, [r3]
 800404c:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80041a8 <processCmd+0x334>
 8004050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004058:	dd01      	ble.n	800405e <processCmd+0x1ea>
 800405a:	23f0      	movs	r3, #240	@ 0xf0
 800405c:	e01c      	b.n	8004098 <processCmd+0x224>
 800405e:	4b4f      	ldr	r3, [pc, #316]	@ (800419c <processCmd+0x328>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	4a50      	ldr	r2, [pc, #320]	@ (80041a4 <processCmd+0x330>)
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	4413      	add	r3, r2
 8004068:	3304      	adds	r3, #4
 800406a:	edd3 7a00 	vldr	s15, [r3]
 800406e:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80041ac <processCmd+0x338>
 8004072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407a:	d501      	bpl.n	8004080 <processCmd+0x20c>
 800407c:	2353      	movs	r3, #83	@ 0x53
 800407e:	e00b      	b.n	8004098 <processCmd+0x224>
 8004080:	4b46      	ldr	r3, [pc, #280]	@ (800419c <processCmd+0x328>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	4a47      	ldr	r2, [pc, #284]	@ (80041a4 <processCmd+0x330>)
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	4413      	add	r3, r2
 800408a:	3304      	adds	r3, #4
 800408c:	edd3 7a00 	vldr	s15, [r3]
 8004090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004094:	ee17 3a90 	vmov	r3, s15
 8004098:	4a45      	ldr	r2, [pc, #276]	@ (80041b0 <processCmd+0x33c>)
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	6413      	str	r3, [r2, #64]	@ 0x40
 800409e:	20fa      	movs	r0, #250	@ 0xfa
 80040a0:	f003 f83c 	bl	800711c <HAL_Delay>
 80040a4:	4b3d      	ldr	r3, [pc, #244]	@ (800419c <processCmd+0x328>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	4a3e      	ldr	r2, [pc, #248]	@ (80041a4 <processCmd+0x330>)
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	4413      	add	r3, r2
 80040ae:	3308      	adds	r3, #8
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a40      	ldr	r2, [pc, #256]	@ (80041b4 <processCmd+0x340>)
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b39      	ldr	r3, [pc, #228]	@ (800419c <processCmd+0x328>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	4a3a      	ldr	r2, [pc, #232]	@ (80041a4 <processCmd+0x330>)
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	4413      	add	r3, r2
 80040c0:	330c      	adds	r3, #12
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040d4:	4838      	ldr	r0, [pc, #224]	@ (80041b8 <processCmd+0x344>)
 80040d6:	f004 faf3 	bl	80086c0 <HAL_GPIO_WritePin>
 80040da:	4b30      	ldr	r3, [pc, #192]	@ (800419c <processCmd+0x328>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	4a31      	ldr	r2, [pc, #196]	@ (80041a4 <processCmd+0x330>)
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	4413      	add	r3, r2
 80040e4:	330c      	adds	r3, #12
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	2120      	movs	r1, #32
 80040f6:	4831      	ldr	r0, [pc, #196]	@ (80041bc <processCmd+0x348>)
 80040f8:	f004 fae2 	bl	80086c0 <HAL_GPIO_WritePin>
 80040fc:	4b27      	ldr	r3, [pc, #156]	@ (800419c <processCmd+0x328>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	4a28      	ldr	r2, [pc, #160]	@ (80041a4 <processCmd+0x330>)
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	4413      	add	r3, r2
 8004106:	330c      	adds	r3, #12
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800411a:	4829      	ldr	r0, [pc, #164]	@ (80041c0 <processCmd+0x34c>)
 800411c:	f004 fad0 	bl	80086c0 <HAL_GPIO_WritePin>
 8004120:	4b1e      	ldr	r3, [pc, #120]	@ (800419c <processCmd+0x328>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	4a1f      	ldr	r2, [pc, #124]	@ (80041a4 <processCmd+0x330>)
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	4413      	add	r3, r2
 800412a:	330c      	adds	r3, #12
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800413e:	4820      	ldr	r0, [pc, #128]	@ (80041c0 <processCmd+0x34c>)
 8004140:	f004 fabe 	bl	80086c0 <HAL_GPIO_WritePin>
 8004144:	4b15      	ldr	r3, [pc, #84]	@ (800419c <processCmd+0x328>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	4a16      	ldr	r2, [pc, #88]	@ (80041a4 <processCmd+0x330>)
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	4413      	add	r3, r2
 800414e:	881a      	ldrh	r2, [r3, #0]
 8004150:	4b1c      	ldr	r3, [pc, #112]	@ (80041c4 <processCmd+0x350>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004156:	4b11      	ldr	r3, [pc, #68]	@ (800419c <processCmd+0x328>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	4a12      	ldr	r2, [pc, #72]	@ (80041a4 <processCmd+0x330>)
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	4413      	add	r3, r2
 8004160:	3302      	adds	r3, #2
 8004162:	881a      	ldrh	r2, [r3, #0]
 8004164:	4b17      	ldr	r3, [pc, #92]	@ (80041c4 <processCmd+0x350>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	641a      	str	r2, [r3, #64]	@ 0x40
	  			if (__IS_EMPTY(cmdq)) {
 800416a:	4b17      	ldr	r3, [pc, #92]	@ (80041c8 <processCmd+0x354>)
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	4b16      	ldr	r3, [pc, #88]	@ (80041c8 <processCmd+0x354>)
 8004170:	785b      	ldrb	r3, [r3, #1]
 8004172:	429a      	cmp	r2, r3
 8004174:	d132      	bne.n	80041dc <processCmd+0x368>
	  				__CLEAR_CURCMD(curCmd);
 8004176:	4b09      	ldr	r3, [pc, #36]	@ (800419c <processCmd+0x328>)
 8004178:	2264      	movs	r2, #100	@ 0x64
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	4b07      	ldr	r3, [pc, #28]	@ (800419c <processCmd+0x328>)
 800417e:	2200      	movs	r2, #0
 8004180:	805a      	strh	r2, [r3, #2]
	  				__ACK_TASK_DONE(&huart3, msg);
 8004182:	4a12      	ldr	r2, [pc, #72]	@ (80041cc <processCmd+0x358>)
 8004184:	210f      	movs	r1, #15
 8004186:	4812      	ldr	r0, [pc, #72]	@ (80041d0 <processCmd+0x35c>)
 8004188:	f00c faba 	bl	8010700 <sniprintf>
 800418c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004190:	2206      	movs	r2, #6
 8004192:	4910      	ldr	r1, [pc, #64]	@ (80041d4 <processCmd+0x360>)
 8004194:	4810      	ldr	r0, [pc, #64]	@ (80041d8 <processCmd+0x364>)
 8004196:	f007 fcf3 	bl	800bb80 <HAL_UART_Transmit>
 800419a:	e039      	b.n	8004210 <processCmd+0x39c>
 800419c:	200007b4 	.word	0x200007b4
 80041a0:	20000000 	.word	0x20000000
 80041a4:	2000000c 	.word	0x2000000c
 80041a8:	43700000 	.word	0x43700000
 80041ac:	42a60000 	.word	0x42a60000
 80041b0:	20000460 	.word	0x20000460
 80041b4:	20000794 	.word	0x20000794
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40020800 	.word	0x40020800
 80041c0:	40020400 	.word	0x40020400
 80041c4:	200005c8 	.word	0x200005c8
 80041c8:	200007b8 	.word	0x200007b8
 80041cc:	08013970 	.word	0x08013970
 80041d0:	200007f0 	.word	0x200007f0
 80041d4:	08013978 	.word	0x08013978
 80041d8:	20000610 	.word	0x20000610
	  			} else __READ_CMD(cmdq, curCmd, msg);
 80041dc:	4b28      	ldr	r3, [pc, #160]	@ (8004280 <processCmd+0x40c>)
 80041de:	785b      	ldrb	r3, [r3, #1]
 80041e0:	4a28      	ldr	r2, [pc, #160]	@ (8004284 <processCmd+0x410>)
 80041e2:	4927      	ldr	r1, [pc, #156]	@ (8004280 <processCmd+0x40c>)
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b24      	ldr	r3, [pc, #144]	@ (8004280 <processCmd+0x40c>)
 80041ee:	785b      	ldrb	r3, [r3, #1]
 80041f0:	3301      	adds	r3, #1
 80041f2:	4a23      	ldr	r2, [pc, #140]	@ (8004280 <processCmd+0x40c>)
 80041f4:	7892      	ldrb	r2, [r2, #2]
 80041f6:	fb93 f1f2 	sdiv	r1, r3, r2
 80041fa:	fb01 f202 	mul.w	r2, r1, r2
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	b2da      	uxtb	r2, r3
 8004202:	4b1f      	ldr	r3, [pc, #124]	@ (8004280 <processCmd+0x40c>)
 8004204:	705a      	strb	r2, [r3, #1]
 8004206:	4a20      	ldr	r2, [pc, #128]	@ (8004288 <processCmd+0x414>)
 8004208:	210f      	movs	r1, #15
 800420a:	4820      	ldr	r0, [pc, #128]	@ (800428c <processCmd+0x418>)
 800420c:	f00c fa78 	bl	8010700 <sniprintf>
	  			__PEND_CURCMD(curCmd);
 8004210:	4b1c      	ldr	r3, [pc, #112]	@ (8004284 <processCmd+0x410>)
 8004212:	2263      	movs	r2, #99	@ 0x63
 8004214:	701a      	strb	r2, [r3, #0]
	  			 break;
 8004216:	e02e      	b.n	8004276 <processCmd+0x402>
	  	  	 case 7: // FL
//	  			sprintf(tmp, "curCmdi: %5d\0", curCmd.index);
//	  			OLED_ShowString(10, 30, tmp);
//	  			OLED_Refresh_Gram();

	  	  		 curTask = TASK_FL;
 8004218:	4b1d      	ldr	r3, [pc, #116]	@ (8004290 <processCmd+0x41c>)
 800421a:	2202      	movs	r2, #2
 800421c:	701a      	strb	r2, [r3, #0]
	  	  		__PEND_CURCMD(curCmd);
 800421e:	4b19      	ldr	r3, [pc, #100]	@ (8004284 <processCmd+0x410>)
 8004220:	2263      	movs	r2, #99	@ 0x63
 8004222:	701a      	strb	r2, [r3, #0]
	  	  		 break;
 8004224:	e027      	b.n	8004276 <processCmd+0x402>
	  	  	 case 8: // FR
	  	  		curTask = TASK_FR;
 8004226:	4b1a      	ldr	r3, [pc, #104]	@ (8004290 <processCmd+0x41c>)
 8004228:	2203      	movs	r2, #3
 800422a:	701a      	strb	r2, [r3, #0]
	  	  		__PEND_CURCMD(curCmd);
 800422c:	4b15      	ldr	r3, [pc, #84]	@ (8004284 <processCmd+0x410>)
 800422e:	2263      	movs	r2, #99	@ 0x63
 8004230:	701a      	strb	r2, [r3, #0]
	  	  		break;
 8004232:	e020      	b.n	8004276 <processCmd+0x402>
	  	  	 case 9: // BL
	  	  		curTask = TASK_BL;
 8004234:	4b16      	ldr	r3, [pc, #88]	@ (8004290 <processCmd+0x41c>)
 8004236:	2204      	movs	r2, #4
 8004238:	701a      	strb	r2, [r3, #0]
	  	  		__PEND_CURCMD(curCmd);
 800423a:	4b12      	ldr	r3, [pc, #72]	@ (8004284 <processCmd+0x410>)
 800423c:	2263      	movs	r2, #99	@ 0x63
 800423e:	701a      	strb	r2, [r3, #0]
	  	  		break;
 8004240:	e019      	b.n	8004276 <processCmd+0x402>
	  	  	 case 10: //BR
	  	  		curTask = TASK_BR;
 8004242:	4b13      	ldr	r3, [pc, #76]	@ (8004290 <processCmd+0x41c>)
 8004244:	2205      	movs	r2, #5
 8004246:	701a      	strb	r2, [r3, #0]
	  	  		__PEND_CURCMD(curCmd);
 8004248:	4b0e      	ldr	r3, [pc, #56]	@ (8004284 <processCmd+0x410>)
 800424a:	2263      	movs	r2, #99	@ 0x63
 800424c:	701a      	strb	r2, [r3, #0]
	  	  		break;
 800424e:	e012      	b.n	8004276 <processCmd+0x402>
//	  	  		 __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
//	  	  		__CLEAR_CURCMD(curCmd);
//	  			__ACK_TASK_DONE(&huart3, rxMsg);
	  	  		 break;
	  	  	 case 13: // debug IR sensor
	  	  		 curTask = TASK_ADC;
 8004250:	4b0f      	ldr	r3, [pc, #60]	@ (8004290 <processCmd+0x41c>)
 8004252:	2206      	movs	r2, #6
 8004254:	701a      	strb	r2, [r3, #0]
	  	  		 break;
 8004256:	e00e      	b.n	8004276 <processCmd+0x402>
	  	  	 case 14: // DT move until specified distance from obstacle
	  	  		  curTask = TASK_MOVE_OBS;
 8004258:	4b0d      	ldr	r3, [pc, #52]	@ (8004290 <processCmd+0x41c>)
 800425a:	2207      	movs	r2, #7
 800425c:	701a      	strb	r2, [r3, #0]
	  	  		  __PEND_CURCMD(curCmd);
 800425e:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <processCmd+0x410>)
 8004260:	2263      	movs	r2, #99	@ 0x63
 8004262:	701a      	strb	r2, [r3, #0]
	  	  		 break;
 8004264:	e007      	b.n	8004276 <processCmd+0x402>
	  	  	 case 16:
//	  	  		 curTask = TASK_FASTESTPATH;
//	  	  		__PEND_CURCMD(curCmd);
	  	  		 break;
	  	  	 case 17:
	  	  		 curTask = TASK_FASTESTCAR;
 8004266:	4b0a      	ldr	r3, [pc, #40]	@ (8004290 <processCmd+0x41c>)
 8004268:	2209      	movs	r2, #9
 800426a:	701a      	strb	r2, [r3, #0]
	  	  		__PEND_CURCMD(curCmd);
 800426c:	4b05      	ldr	r3, [pc, #20]	@ (8004284 <processCmd+0x410>)
 800426e:	2263      	movs	r2, #99	@ 0x63
 8004270:	701a      	strb	r2, [r3, #0]
	  	  		 break;
 8004272:	e000      	b.n	8004276 <processCmd+0x402>
	  	  		 break;
	  	  	 case 100:
	  	  		 break;
	  	  	 default:
	  	  //		 curCmd.index = 99;
	  	  		 break;
 8004274:	bf00      	nop
	  	  	 }
    osDelay(100);
 8004276:	2064      	movs	r0, #100	@ 0x64
 8004278:	f008 fd98 	bl	800cdac <osDelay>
	  switch(curCmd.index)
 800427c:	e5fe      	b.n	8003e7c <processCmd+0x8>
 800427e:	bf00      	nop
 8004280:	200007b8 	.word	0x200007b8
 8004284:	200007b4 	.word	0x200007b4
 8004288:	08013980 	.word	0x08013980
 800428c:	200007f0 	.word	0x200007f0
 8004290:	20000000 	.word	0x20000000

08004294 <moveDist>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveDist */
void moveDist(void *argument)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveDist */
//	uint8_t tmp[20];
  /* Infinite loop */
  for(;;)
  {
	  if(curTask != TASK_MOVE && curTask != TASK_MOVE_BACKWARD) osDelay(1000);
 800429c:	4b87      	ldr	r3, [pc, #540]	@ (80044bc <moveDist+0x228>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <moveDist+0x22>
 80042a4:	4b85      	ldr	r3, [pc, #532]	@ (80044bc <moveDist+0x228>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d004      	beq.n	80042b6 <moveDist+0x22>
 80042ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80042b0:	f008 fd7c 	bl	800cdac <osDelay>
 80042b4:	e100      	b.n	80044b8 <moveDist+0x224>
	  else
	  {
//		  uint32_t startTimer = HAL_GetTick(); //for getting task time elapsed
		  if(manual_mode)
 80042b6:	4b82      	ldr	r3, [pc, #520]	@ (80044c0 <moveDist+0x22c>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8082 	beq.w	80043c4 <moveDist+0x130>
		  {
			  curAngle = 0;
 80042c0:	4b80      	ldr	r3, [pc, #512]	@ (80044c4 <moveDist+0x230>)
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
			  gyroZ = 0;
 80042c8:	4b7f      	ldr	r3, [pc, #508]	@ (80044c8 <moveDist+0x234>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	801a      	strh	r2, [r3, #0]
			  PIDReset(&pidTurn);
 80042ce:	487f      	ldr	r0, [pc, #508]	@ (80044cc <moveDist+0x238>)
 80042d0:	f7fe fc2d 	bl	8002b2e <PIDReset>
			  PIDReset(&pidSlow);
 80042d4:	487e      	ldr	r0, [pc, #504]	@ (80044d0 <moveDist+0x23c>)
 80042d6:	f7fe fc2a 	bl	8002b2e <PIDReset>
			  PIDReset(&pidFast);
 80042da:	487e      	ldr	r0, [pc, #504]	@ (80044d4 <moveDist+0x240>)
 80042dc:	f7fe fc27 	bl	8002b2e <PIDReset>

			  __SET_MOTOR_DIR(curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD);
 80042e0:	4b76      	ldr	r3, [pc, #472]	@ (80044bc <moveDist+0x228>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80042f4:	4878      	ldr	r0, [pc, #480]	@ (80044d8 <moveDist+0x244>)
 80042f6:	f004 f9e3 	bl	80086c0 <HAL_GPIO_WritePin>
 80042fa:	4b70      	ldr	r3, [pc, #448]	@ (80044bc <moveDist+0x228>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	2120      	movs	r1, #32
 800430c:	4873      	ldr	r0, [pc, #460]	@ (80044dc <moveDist+0x248>)
 800430e:	f004 f9d7 	bl	80086c0 <HAL_GPIO_WritePin>
 8004312:	4b6a      	ldr	r3, [pc, #424]	@ (80044bc <moveDist+0x228>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	bf14      	ite	ne
 800431a:	2301      	movne	r3, #1
 800431c:	2300      	moveq	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004326:	486e      	ldr	r0, [pc, #440]	@ (80044e0 <moveDist+0x24c>)
 8004328:	f004 f9ca 	bl	80086c0 <HAL_GPIO_WritePin>
 800432c:	4b63      	ldr	r3, [pc, #396]	@ (80044bc <moveDist+0x228>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004340:	4867      	ldr	r0, [pc, #412]	@ (80044e0 <moveDist+0x24c>)
 8004342:	f004 f9bd 	bl	80086c0 <HAL_GPIO_WritePin>

			  __TASK_END(&htim8, prevTask, curTask);
 8004346:	4b67      	ldr	r3, [pc, #412]	@ (80044e4 <moveDist+0x250>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2200      	movs	r2, #0
 800434c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800434e:	4b65      	ldr	r3, [pc, #404]	@ (80044e4 <moveDist+0x250>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	641a      	str	r2, [r3, #64]	@ 0x40
 8004356:	4b59      	ldr	r3, [pc, #356]	@ (80044bc <moveDist+0x228>)
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	4b63      	ldr	r3, [pc, #396]	@ (80044e8 <moveDist+0x254>)
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	4b57      	ldr	r3, [pc, #348]	@ (80044bc <moveDist+0x228>)
 8004360:	220b      	movs	r2, #11
 8004362:	701a      	strb	r2, [r3, #0]
			  btnClicked = 0;
 8004364:	4b61      	ldr	r3, [pc, #388]	@ (80044ec <moveDist+0x258>)
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
			  __CLEAR_CURCMD(curCmd);
 800436a:	4b61      	ldr	r3, [pc, #388]	@ (80044f0 <moveDist+0x25c>)
 800436c:	2264      	movs	r2, #100	@ 0x64
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	4b5f      	ldr	r3, [pc, #380]	@ (80044f0 <moveDist+0x25c>)
 8004372:	2200      	movs	r2, #0
 8004374:	805a      	strh	r2, [r3, #2]
			  __ACK_TASK_DONE(&huart3, msg);
 8004376:	4a5f      	ldr	r2, [pc, #380]	@ (80044f4 <moveDist+0x260>)
 8004378:	210f      	movs	r1, #15
 800437a:	485f      	ldr	r0, [pc, #380]	@ (80044f8 <moveDist+0x264>)
 800437c:	f00c f9c0 	bl	8010700 <sniprintf>
 8004380:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004384:	2206      	movs	r2, #6
 8004386:	495d      	ldr	r1, [pc, #372]	@ (80044fc <moveDist+0x268>)
 8004388:	485d      	ldr	r0, [pc, #372]	@ (8004500 <moveDist+0x26c>)
 800438a:	f007 fbf9 	bl	800bb80 <HAL_UART_Transmit>

			  last_curTask_tick = HAL_GetTick();
 800438e:	f002 feb9 	bl	8007104 <HAL_GetTick>
 8004392:	4603      	mov	r3, r0
 8004394:	4a5b      	ldr	r2, [pc, #364]	@ (8004504 <moveDist+0x270>)
 8004396:	6013      	str	r3, [r2, #0]
			  while(1)
			  {
				  if(!manual_mode) break;
 8004398:	4b49      	ldr	r3, [pc, #292]	@ (80044c0 <moveDist+0x22c>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 808a 	beq.w	80044b6 <moveDist+0x222>

				  if(HAL_GetTick() - last_curTask_tick >= 10)
 80043a2:	f002 feaf 	bl	8007104 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	4b56      	ldr	r3, [pc, #344]	@ (8004504 <moveDist+0x270>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b09      	cmp	r3, #9
 80043b0:	d9f2      	bls.n	8004398 <moveDist+0x104>
				  {
					  MoveStraight(SPEED_MODE_TURN);
 80043b2:	2000      	movs	r0, #0
 80043b4:	f7fe fbce 	bl	8002b54 <MoveStraight>
					  last_curTask_tick = HAL_GetTick();
 80043b8:	f002 fea4 	bl	8007104 <HAL_GetTick>
 80043bc:	4603      	mov	r3, r0
 80043be:	4a51      	ldr	r2, [pc, #324]	@ (8004504 <moveDist+0x270>)
 80043c0:	6013      	str	r3, [r2, #0]
				  if(!manual_mode) break;
 80043c2:	e7e9      	b.n	8004398 <moveDist+0x104>
				  }
			  }
		  }
		  else
		  {
			  targetDist = (float) curCmd.val;
 80043c4:	4b4a      	ldr	r3, [pc, #296]	@ (80044f0 <moveDist+0x25c>)
 80043c6:	885b      	ldrh	r3, [r3, #2]
 80043c8:	ee07 3a90 	vmov	s15, r3
 80043cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004508 <moveDist+0x274>)
 80043d2:	edc3 7a00 	vstr	s15, [r3]
//			  targetDist = (float) 4;
			  if(targetDist <= 15) moveMode = SLOW; //if target distance is lesser than 15, force move mode to SLOW
 80043d6:	4b4c      	ldr	r3, [pc, #304]	@ (8004508 <moveDist+0x274>)
 80043d8:	edd3 7a00 	vldr	s15, [r3]
 80043dc:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80043e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	d802      	bhi.n	80043f0 <moveDist+0x15c>
 80043ea:	4b48      	ldr	r3, [pc, #288]	@ (800450c <moveDist+0x278>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]

			  if(moveMode == SLOW)
 80043f0:	4b46      	ldr	r3, [pc, #280]	@ (800450c <moveDist+0x278>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10c      	bne.n	8004412 <moveDist+0x17e>
				  MoveDist(&targetDist, curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_SLOW);
 80043f8:	4b30      	ldr	r3, [pc, #192]	@ (80044bc <moveDist+0x228>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2201      	movs	r2, #1
 8004408:	4619      	mov	r1, r3
 800440a:	483f      	ldr	r0, [pc, #252]	@ (8004508 <moveDist+0x274>)
 800440c:	f7fe feb0 	bl	8003170 <MoveDist>
 8004410:	e00b      	b.n	800442a <moveDist+0x196>
			  else
				  MoveDist(&targetDist, curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_FAST);
 8004412:	4b2a      	ldr	r3, [pc, #168]	@ (80044bc <moveDist+0x228>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	bf0c      	ite	eq
 800441a:	2301      	moveq	r3, #1
 800441c:	2300      	movne	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2202      	movs	r2, #2
 8004422:	4619      	mov	r1, r3
 8004424:	4838      	ldr	r0, [pc, #224]	@ (8004508 <moveDist+0x274>)
 8004426:	f7fe fea3 	bl	8003170 <MoveDist>

			  __TASK_END(&htim8, prevTask, curTask);
 800442a:	4b2e      	ldr	r3, [pc, #184]	@ (80044e4 <moveDist+0x250>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2200      	movs	r2, #0
 8004430:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004432:	4b2c      	ldr	r3, [pc, #176]	@ (80044e4 <moveDist+0x250>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2200      	movs	r2, #0
 8004438:	641a      	str	r2, [r3, #64]	@ 0x40
 800443a:	4b20      	ldr	r3, [pc, #128]	@ (80044bc <moveDist+0x228>)
 800443c:	781a      	ldrb	r2, [r3, #0]
 800443e:	4b2a      	ldr	r3, [pc, #168]	@ (80044e8 <moveDist+0x254>)
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	4b1e      	ldr	r3, [pc, #120]	@ (80044bc <moveDist+0x228>)
 8004444:	220b      	movs	r2, #11
 8004446:	701a      	strb	r2, [r3, #0]
//			  uint32_t timeElapse = HAL_GetTick() - startTimer;
//			  sprintf(tmp, "timeMoved: %5.2fs\0", timeElapse * 0.001);
//			  OLED_ShowString(10, 10, tmp);
//			  OLED_Refresh_Gram();
			  btnClicked = 0;
 8004448:	4b28      	ldr	r3, [pc, #160]	@ (80044ec <moveDist+0x258>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]

			  if(__IS_EMPTY(cmdq))
 800444e:	4b30      	ldr	r3, [pc, #192]	@ (8004510 <moveDist+0x27c>)
 8004450:	781a      	ldrb	r2, [r3, #0]
 8004452:	4b2f      	ldr	r3, [pc, #188]	@ (8004510 <moveDist+0x27c>)
 8004454:	785b      	ldrb	r3, [r3, #1]
 8004456:	429a      	cmp	r2, r3
 8004458:	d112      	bne.n	8004480 <moveDist+0x1ec>
			  {
				  __CLEAR_CURCMD(curCmd);
 800445a:	4b25      	ldr	r3, [pc, #148]	@ (80044f0 <moveDist+0x25c>)
 800445c:	2264      	movs	r2, #100	@ 0x64
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	4b23      	ldr	r3, [pc, #140]	@ (80044f0 <moveDist+0x25c>)
 8004462:	2200      	movs	r2, #0
 8004464:	805a      	strh	r2, [r3, #2]
				  __ACK_TASK_DONE(&huart3, msg);
 8004466:	4a23      	ldr	r2, [pc, #140]	@ (80044f4 <moveDist+0x260>)
 8004468:	210f      	movs	r1, #15
 800446a:	4823      	ldr	r0, [pc, #140]	@ (80044f8 <moveDist+0x264>)
 800446c:	f00c f948 	bl	8010700 <sniprintf>
 8004470:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004474:	2206      	movs	r2, #6
 8004476:	4921      	ldr	r1, [pc, #132]	@ (80044fc <moveDist+0x268>)
 8004478:	4821      	ldr	r0, [pc, #132]	@ (8004500 <moveDist+0x26c>)
 800447a:	f007 fb81 	bl	800bb80 <HAL_UART_Transmit>
 800447e:	e70d      	b.n	800429c <moveDist+0x8>
			  }
			  else
				  __READ_CMD(cmdq, curCmd, msg);
 8004480:	4b23      	ldr	r3, [pc, #140]	@ (8004510 <moveDist+0x27c>)
 8004482:	785b      	ldrb	r3, [r3, #1]
 8004484:	4a1a      	ldr	r2, [pc, #104]	@ (80044f0 <moveDist+0x25c>)
 8004486:	4922      	ldr	r1, [pc, #136]	@ (8004510 <moveDist+0x27c>)
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b1f      	ldr	r3, [pc, #124]	@ (8004510 <moveDist+0x27c>)
 8004492:	785b      	ldrb	r3, [r3, #1]
 8004494:	3301      	adds	r3, #1
 8004496:	4a1e      	ldr	r2, [pc, #120]	@ (8004510 <moveDist+0x27c>)
 8004498:	7892      	ldrb	r2, [r2, #2]
 800449a:	fb93 f1f2 	sdiv	r1, r3, r2
 800449e:	fb01 f202 	mul.w	r2, r1, r2
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004510 <moveDist+0x27c>)
 80044a8:	705a      	strb	r2, [r3, #1]
 80044aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004514 <moveDist+0x280>)
 80044ac:	210f      	movs	r1, #15
 80044ae:	4812      	ldr	r0, [pc, #72]	@ (80044f8 <moveDist+0x264>)
 80044b0:	f00c f926 	bl	8010700 <sniprintf>
 80044b4:	e6f2      	b.n	800429c <moveDist+0x8>
				  if(!manual_mode) break;
 80044b6:	bf00      	nop
	  if(curTask != TASK_MOVE && curTask != TASK_MOVE_BACKWARD) osDelay(1000);
 80044b8:	e6f0      	b.n	800429c <moveDist+0x8>
 80044ba:	bf00      	nop
 80044bc:	20000000 	.word	0x20000000
 80044c0:	200007ec 	.word	0x200007ec
 80044c4:	20000798 	.word	0x20000798
 80044c8:	20000756 	.word	0x20000756
 80044cc:	20000758 	.word	0x20000758
 80044d0:	2000076c 	.word	0x2000076c
 80044d4:	20000780 	.word	0x20000780
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40020800 	.word	0x40020800
 80044e0:	40020400 	.word	0x40020400
 80044e4:	200005c8 	.word	0x200005c8
 80044e8:	20000001 	.word	0x20000001
 80044ec:	20000698 	.word	0x20000698
 80044f0:	200007b4 	.word	0x200007b4
 80044f4:	08013970 	.word	0x08013970
 80044f8:	200007f0 	.word	0x200007f0
 80044fc:	08013978 	.word	0x08013978
 8004500:	20000610 	.word	0x20000610
 8004504:	200007a0 	.word	0x200007a0
 8004508:	200007a4 	.word	0x200007a4
 800450c:	20000002 	.word	0x20000002
 8004510:	200007b8 	.word	0x200007b8
 8004514:	08013980 	.word	0x08013980

08004518 <moveFL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveFL */
void moveFL(void *argument)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveFL */
	uint8_t tmp[20];
  /* Infinite loop */
  for(;;)
  {
	  if(curTask != TASK_FL) osDelay(1000);
 8004520:	4b99      	ldr	r3, [pc, #612]	@ (8004788 <moveFL+0x270>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d004      	beq.n	8004532 <moveFL+0x1a>
 8004528:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800452c:	f008 fc3e 	bl	800cdac <osDelay>
 8004530:	e7f6      	b.n	8004520 <moveFL+0x8>
	  else
	  {
		  switch(curCmd.val){
 8004532:	4b96      	ldr	r3, [pc, #600]	@ (800478c <moveFL+0x274>)
 8004534:	885b      	ldrh	r3, [r3, #2]
 8004536:	2b14      	cmp	r3, #20
 8004538:	f000 8083 	beq.w	8004642 <moveFL+0x12a>
 800453c:	2b1e      	cmp	r3, #30
 800453e:	f040 810b 	bne.w	8004758 <moveFL+0x240>
		  	  case 30: //FL30 (4x2)
		  		  __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 8004542:	4b93      	ldr	r3, [pc, #588]	@ (8004790 <moveFL+0x278>)
 8004544:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8004548:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8004794 <moveFL+0x27c>
 800454c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004554:	dd01      	ble.n	800455a <moveFL+0x42>
 8004556:	23f0      	movs	r3, #240	@ 0xf0
 8004558:	e012      	b.n	8004580 <moveFL+0x68>
 800455a:	4b8d      	ldr	r3, [pc, #564]	@ (8004790 <moveFL+0x278>)
 800455c:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8004560:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8004798 <moveFL+0x280>
 8004564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456c:	d501      	bpl.n	8004572 <moveFL+0x5a>
 800456e:	2353      	movs	r3, #83	@ 0x53
 8004570:	e006      	b.n	8004580 <moveFL+0x68>
 8004572:	4b87      	ldr	r3, [pc, #540]	@ (8004790 <moveFL+0x278>)
 8004574:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8004578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800457c:	ee17 3a90 	vmov	r3, s15
 8004580:	4a86      	ldr	r2, [pc, #536]	@ (800479c <moveFL+0x284>)
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	6413      	str	r3, [r2, #64]	@ 0x40
 8004586:	20fa      	movs	r0, #250	@ 0xfa
 8004588:	f002 fdc8 	bl	800711c <HAL_Delay>
 800458c:	4b80      	ldr	r3, [pc, #512]	@ (8004790 <moveFL+0x278>)
 800458e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004592:	4a83      	ldr	r2, [pc, #524]	@ (80047a0 <moveFL+0x288>)
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b7e      	ldr	r3, [pc, #504]	@ (8004790 <moveFL+0x278>)
 8004598:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045ac:	487d      	ldr	r0, [pc, #500]	@ (80047a4 <moveFL+0x28c>)
 80045ae:	f004 f887 	bl	80086c0 <HAL_GPIO_WritePin>
 80045b2:	4b77      	ldr	r3, [pc, #476]	@ (8004790 <moveFL+0x278>)
 80045b4:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	2120      	movs	r1, #32
 80045c6:	4878      	ldr	r0, [pc, #480]	@ (80047a8 <moveFL+0x290>)
 80045c8:	f004 f87a 	bl	80086c0 <HAL_GPIO_WritePin>
 80045cc:	4b70      	ldr	r3, [pc, #448]	@ (8004790 <moveFL+0x278>)
 80045ce:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bf0c      	ite	eq
 80045d6:	2301      	moveq	r3, #1
 80045d8:	2300      	movne	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045e2:	4872      	ldr	r0, [pc, #456]	@ (80047ac <moveFL+0x294>)
 80045e4:	f004 f86c 	bl	80086c0 <HAL_GPIO_WritePin>
 80045e8:	4b69      	ldr	r3, [pc, #420]	@ (8004790 <moveFL+0x278>)
 80045ea:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80045fe:	486b      	ldr	r0, [pc, #428]	@ (80047ac <moveFL+0x294>)
 8004600:	f004 f85e 	bl	80086c0 <HAL_GPIO_WritePin>
 8004604:	4b62      	ldr	r3, [pc, #392]	@ (8004790 <moveFL+0x278>)
 8004606:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	@ 0xf0
 800460a:	4b69      	ldr	r3, [pc, #420]	@ (80047b0 <moveFL+0x298>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004610:	4b5f      	ldr	r3, [pc, #380]	@ (8004790 <moveFL+0x278>)
 8004612:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	@ 0xf2
 8004616:	4b66      	ldr	r3, [pc, #408]	@ (80047b0 <moveFL+0x298>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	641a      	str	r2, [r3, #64]	@ 0x40
		  		  Turn(&targetAngle);
 800461c:	4860      	ldr	r0, [pc, #384]	@ (80047a0 <moveFL+0x288>)
 800461e:	f7fe ff33 	bl	8003488 <Turn>
		  		  osDelay(10);
 8004622:	200a      	movs	r0, #10
 8004624:	f008 fbc2 	bl	800cdac <osDelay>
		  		  targetDist = 4;
 8004628:	4b62      	ldr	r3, [pc, #392]	@ (80047b4 <moveFL+0x29c>)
 800462a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800462e:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
 8004630:	2200      	movs	r2, #0
 8004632:	2100      	movs	r1, #0
 8004634:	485f      	ldr	r0, [pc, #380]	@ (80047b4 <moveFL+0x29c>)
 8004636:	f7fe fd9b 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 800463a:	200a      	movs	r0, #10
 800463c:	f008 fbb6 	bl	800cdac <osDelay>
		  		  break;
 8004640:	e122      	b.n	8004888 <moveFL+0x370>

		  	  case 20: //FL20 (3x1)
		  		  targetDist = (float) 4;
 8004642:	4b5c      	ldr	r3, [pc, #368]	@ (80047b4 <moveFL+0x29c>)
 8004644:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8004648:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
 800464a:	2200      	movs	r2, #0
 800464c:	2100      	movs	r1, #0
 800464e:	4859      	ldr	r0, [pc, #356]	@ (80047b4 <moveFL+0x29c>)
 8004650:	f7fe fd8e 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8004654:	200a      	movs	r0, #10
 8004656:	f008 fba9 	bl	800cdac <osDelay>
		  		  __SET_CMD_CONFIG(cfgs[CONFIG_FL20], &htim8, &htim1, targetAngle);
 800465a:	4b4d      	ldr	r3, [pc, #308]	@ (8004790 <moveFL+0x278>)
 800465c:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8004660:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8004794 <moveFL+0x27c>
 8004664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466c:	dd01      	ble.n	8004672 <moveFL+0x15a>
 800466e:	23f0      	movs	r3, #240	@ 0xf0
 8004670:	e012      	b.n	8004698 <moveFL+0x180>
 8004672:	4b47      	ldr	r3, [pc, #284]	@ (8004790 <moveFL+0x278>)
 8004674:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8004678:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8004798 <moveFL+0x280>
 800467c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004684:	d501      	bpl.n	800468a <moveFL+0x172>
 8004686:	2353      	movs	r3, #83	@ 0x53
 8004688:	e006      	b.n	8004698 <moveFL+0x180>
 800468a:	4b41      	ldr	r3, [pc, #260]	@ (8004790 <moveFL+0x278>)
 800468c:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8004690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004694:	ee17 3a90 	vmov	r3, s15
 8004698:	4a40      	ldr	r2, [pc, #256]	@ (800479c <moveFL+0x284>)
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	6413      	str	r3, [r2, #64]	@ 0x40
 800469e:	20fa      	movs	r0, #250	@ 0xfa
 80046a0:	f002 fd3c 	bl	800711c <HAL_Delay>
 80046a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004790 <moveFL+0x278>)
 80046a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80046aa:	4a3d      	ldr	r2, [pc, #244]	@ (80047a0 <moveFL+0x288>)
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b38      	ldr	r3, [pc, #224]	@ (8004790 <moveFL+0x278>)
 80046b0:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	461a      	mov	r2, r3
 80046c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80046c4:	4837      	ldr	r0, [pc, #220]	@ (80047a4 <moveFL+0x28c>)
 80046c6:	f003 fffb 	bl	80086c0 <HAL_GPIO_WritePin>
 80046ca:	4b31      	ldr	r3, [pc, #196]	@ (8004790 <moveFL+0x278>)
 80046cc:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	2120      	movs	r1, #32
 80046de:	4832      	ldr	r0, [pc, #200]	@ (80047a8 <moveFL+0x290>)
 80046e0:	f003 ffee 	bl	80086c0 <HAL_GPIO_WritePin>
 80046e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004790 <moveFL+0x278>)
 80046e6:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf0c      	ite	eq
 80046ee:	2301      	moveq	r3, #1
 80046f0:	2300      	movne	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046fa:	482c      	ldr	r0, [pc, #176]	@ (80047ac <moveFL+0x294>)
 80046fc:	f003 ffe0 	bl	80086c0 <HAL_GPIO_WritePin>
 8004700:	4b23      	ldr	r3, [pc, #140]	@ (8004790 <moveFL+0x278>)
 8004702:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8004706:	2b00      	cmp	r3, #0
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004716:	4825      	ldr	r0, [pc, #148]	@ (80047ac <moveFL+0x294>)
 8004718:	f003 ffd2 	bl	80086c0 <HAL_GPIO_WritePin>
 800471c:	4b1c      	ldr	r3, [pc, #112]	@ (8004790 <moveFL+0x278>)
 800471e:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8004722:	4b23      	ldr	r3, [pc, #140]	@ (80047b0 <moveFL+0x298>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004728:	4b19      	ldr	r3, [pc, #100]	@ (8004790 <moveFL+0x278>)
 800472a:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 800472e:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <moveFL+0x298>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	641a      	str	r2, [r3, #64]	@ 0x40
		  		  Turn(&targetAngle);
 8004734:	481a      	ldr	r0, [pc, #104]	@ (80047a0 <moveFL+0x288>)
 8004736:	f7fe fea7 	bl	8003488 <Turn>
		  		  osDelay(10);
 800473a:	200a      	movs	r0, #10
 800473c:	f008 fb36 	bl	800cdac <osDelay>
		  		  targetDist = (float) 7;
 8004740:	4b1c      	ldr	r3, [pc, #112]	@ (80047b4 <moveFL+0x29c>)
 8004742:	4a1d      	ldr	r2, [pc, #116]	@ (80047b8 <moveFL+0x2a0>)
 8004744:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
 8004746:	2200      	movs	r2, #0
 8004748:	2100      	movs	r1, #0
 800474a:	481a      	ldr	r0, [pc, #104]	@ (80047b4 <moveFL+0x29c>)
 800474c:	f7fe fd10 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8004750:	200a      	movs	r0, #10
 8004752:	f008 fb2b 	bl	800cdac <osDelay>
		  		  break;
 8004756:	e097      	b.n	8004888 <moveFL+0x370>
//		  		  osDelay(10);

//		  		  targetDist = 5; //


		  		  __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 8004758:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <moveFL+0x278>)
 800475a:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 800475e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004794 <moveFL+0x27c>
 8004762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476a:	dd01      	ble.n	8004770 <moveFL+0x258>
 800476c:	23f0      	movs	r3, #240	@ 0xf0
 800476e:	e02c      	b.n	80047ca <moveFL+0x2b2>
 8004770:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <moveFL+0x278>)
 8004772:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8004776:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004798 <moveFL+0x280>
 800477a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800477e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004782:	d51b      	bpl.n	80047bc <moveFL+0x2a4>
 8004784:	2353      	movs	r3, #83	@ 0x53
 8004786:	e020      	b.n	80047ca <moveFL+0x2b2>
 8004788:	20000000 	.word	0x20000000
 800478c:	200007b4 	.word	0x200007b4
 8004790:	2000000c 	.word	0x2000000c
 8004794:	43700000 	.word	0x43700000
 8004798:	42a60000 	.word	0x42a60000
 800479c:	20000460 	.word	0x20000460
 80047a0:	20000794 	.word	0x20000794
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40020800 	.word	0x40020800
 80047ac:	40020400 	.word	0x40020400
 80047b0:	200005c8 	.word	0x200005c8
 80047b4:	200007a4 	.word	0x200007a4
 80047b8:	40e00000 	.word	0x40e00000
 80047bc:	4b51      	ldr	r3, [pc, #324]	@ (8004904 <moveFL+0x3ec>)
 80047be:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 80047c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c6:	ee17 3a90 	vmov	r3, s15
 80047ca:	4a4f      	ldr	r2, [pc, #316]	@ (8004908 <moveFL+0x3f0>)
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80047d0:	20fa      	movs	r0, #250	@ 0xfa
 80047d2:	f002 fca3 	bl	800711c <HAL_Delay>
 80047d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004904 <moveFL+0x3ec>)
 80047d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047da:	4a4c      	ldr	r2, [pc, #304]	@ (800490c <moveFL+0x3f4>)
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	4b49      	ldr	r3, [pc, #292]	@ (8004904 <moveFL+0x3ec>)
 80047e0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80047f4:	4846      	ldr	r0, [pc, #280]	@ (8004910 <moveFL+0x3f8>)
 80047f6:	f003 ff63 	bl	80086c0 <HAL_GPIO_WritePin>
 80047fa:	4b42      	ldr	r3, [pc, #264]	@ (8004904 <moveFL+0x3ec>)
 80047fc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf14      	ite	ne
 8004804:	2301      	movne	r3, #1
 8004806:	2300      	moveq	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	2120      	movs	r1, #32
 800480e:	4841      	ldr	r0, [pc, #260]	@ (8004914 <moveFL+0x3fc>)
 8004810:	f003 ff56 	bl	80086c0 <HAL_GPIO_WritePin>
 8004814:	4b3b      	ldr	r3, [pc, #236]	@ (8004904 <moveFL+0x3ec>)
 8004816:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800481a:	2b00      	cmp	r3, #0
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800482a:	483b      	ldr	r0, [pc, #236]	@ (8004918 <moveFL+0x400>)
 800482c:	f003 ff48 	bl	80086c0 <HAL_GPIO_WritePin>
 8004830:	4b34      	ldr	r3, [pc, #208]	@ (8004904 <moveFL+0x3ec>)
 8004832:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004836:	2b00      	cmp	r3, #0
 8004838:	bf14      	ite	ne
 800483a:	2301      	movne	r3, #1
 800483c:	2300      	moveq	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004846:	4834      	ldr	r0, [pc, #208]	@ (8004918 <moveFL+0x400>)
 8004848:	f003 ff3a 	bl	80086c0 <HAL_GPIO_WritePin>
 800484c:	4b2d      	ldr	r3, [pc, #180]	@ (8004904 <moveFL+0x3ec>)
 800484e:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 8004852:	4b32      	ldr	r3, [pc, #200]	@ (800491c <moveFL+0x404>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004858:	4b2a      	ldr	r3, [pc, #168]	@ (8004904 <moveFL+0x3ec>)
 800485a:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800485e:	4b2f      	ldr	r3, [pc, #188]	@ (800491c <moveFL+0x404>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	641a      	str	r2, [r3, #64]	@ 0x40
		  		  Turn(&targetAngle);
 8004864:	4829      	ldr	r0, [pc, #164]	@ (800490c <moveFL+0x3f4>)
 8004866:	f7fe fe0f 	bl	8003488 <Turn>
		  		  osDelay(10);
 800486a:	200a      	movs	r0, #10
 800486c:	f008 fa9e 	bl	800cdac <osDelay>

		  		  targetDist = 12.5; // 10.25;
 8004870:	4b2b      	ldr	r3, [pc, #172]	@ (8004920 <moveFL+0x408>)
 8004872:	4a2c      	ldr	r2, [pc, #176]	@ (8004924 <moveFL+0x40c>)
 8004874:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_TURN);
 8004876:	2200      	movs	r2, #0
 8004878:	2101      	movs	r1, #1
 800487a:	4829      	ldr	r0, [pc, #164]	@ (8004920 <moveFL+0x408>)
 800487c:	f7fe fc78 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8004880:	200a      	movs	r0, #10
 8004882:	f008 fa93 	bl	800cdac <osDelay>
//		  		  osDelay(10);
//		  		  uint32_t timeElapse = HAL_GetTick() - startTimer;
//		  		  sprintf(tmp, "timeTurn: %5.2fs\0", timeElapse * 0.001);
//		  		  OLED_ShowString(10, 10, tmp);
//		  		  OLED_Refresh_Gram();
		  		  break;
 8004886:	bf00      	nop
		}
		btnClicked = 0;
 8004888:	4b27      	ldr	r3, [pc, #156]	@ (8004928 <moveFL+0x410>)
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
		prevTask = curTask;
 800488e:	4b27      	ldr	r3, [pc, #156]	@ (800492c <moveFL+0x414>)
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	4b27      	ldr	r3, [pc, #156]	@ (8004930 <moveFL+0x418>)
 8004894:	701a      	strb	r2, [r3, #0]
		curTask = TASK_NONE;
 8004896:	4b25      	ldr	r3, [pc, #148]	@ (800492c <moveFL+0x414>)
 8004898:	220b      	movs	r2, #11
 800489a:	701a      	strb	r2, [r3, #0]

		if(__IS_EMPTY(cmdq))
 800489c:	4b25      	ldr	r3, [pc, #148]	@ (8004934 <moveFL+0x41c>)
 800489e:	781a      	ldrb	r2, [r3, #0]
 80048a0:	4b24      	ldr	r3, [pc, #144]	@ (8004934 <moveFL+0x41c>)
 80048a2:	785b      	ldrb	r3, [r3, #1]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d112      	bne.n	80048ce <moveFL+0x3b6>
		{
			__CLEAR_CURCMD(curCmd);
 80048a8:	4b23      	ldr	r3, [pc, #140]	@ (8004938 <moveFL+0x420>)
 80048aa:	2264      	movs	r2, #100	@ 0x64
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	4b22      	ldr	r3, [pc, #136]	@ (8004938 <moveFL+0x420>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, msg);
 80048b4:	4a21      	ldr	r2, [pc, #132]	@ (800493c <moveFL+0x424>)
 80048b6:	210f      	movs	r1, #15
 80048b8:	4821      	ldr	r0, [pc, #132]	@ (8004940 <moveFL+0x428>)
 80048ba:	f00b ff21 	bl	8010700 <sniprintf>
 80048be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048c2:	2206      	movs	r2, #6
 80048c4:	491f      	ldr	r1, [pc, #124]	@ (8004944 <moveFL+0x42c>)
 80048c6:	4820      	ldr	r0, [pc, #128]	@ (8004948 <moveFL+0x430>)
 80048c8:	f007 f95a 	bl	800bb80 <HAL_UART_Transmit>
 80048cc:	e628      	b.n	8004520 <moveFL+0x8>
		}
		else
			__READ_CMD(cmdq, curCmd, msg);
 80048ce:	4b19      	ldr	r3, [pc, #100]	@ (8004934 <moveFL+0x41c>)
 80048d0:	785b      	ldrb	r3, [r3, #1]
 80048d2:	4a19      	ldr	r2, [pc, #100]	@ (8004938 <moveFL+0x420>)
 80048d4:	4917      	ldr	r1, [pc, #92]	@ (8004934 <moveFL+0x41c>)
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	440b      	add	r3, r1
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4b15      	ldr	r3, [pc, #84]	@ (8004934 <moveFL+0x41c>)
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	3301      	adds	r3, #1
 80048e4:	4a13      	ldr	r2, [pc, #76]	@ (8004934 <moveFL+0x41c>)
 80048e6:	7892      	ldrb	r2, [r2, #2]
 80048e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80048ec:	fb01 f202 	mul.w	r2, r1, r2
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004934 <moveFL+0x41c>)
 80048f6:	705a      	strb	r2, [r3, #1]
 80048f8:	4a14      	ldr	r2, [pc, #80]	@ (800494c <moveFL+0x434>)
 80048fa:	210f      	movs	r1, #15
 80048fc:	4810      	ldr	r0, [pc, #64]	@ (8004940 <moveFL+0x428>)
 80048fe:	f00b feff 	bl	8010700 <sniprintf>
	  if(curTask != TASK_FL) osDelay(1000);
 8004902:	e60d      	b.n	8004520 <moveFL+0x8>
 8004904:	2000000c 	.word	0x2000000c
 8004908:	20000460 	.word	0x20000460
 800490c:	20000794 	.word	0x20000794
 8004910:	40021000 	.word	0x40021000
 8004914:	40020800 	.word	0x40020800
 8004918:	40020400 	.word	0x40020400
 800491c:	200005c8 	.word	0x200005c8
 8004920:	200007a4 	.word	0x200007a4
 8004924:	41480000 	.word	0x41480000
 8004928:	20000698 	.word	0x20000698
 800492c:	20000000 	.word	0x20000000
 8004930:	20000001 	.word	0x20000001
 8004934:	200007b8 	.word	0x200007b8
 8004938:	200007b4 	.word	0x200007b4
 800493c:	08013970 	.word	0x08013970
 8004940:	200007f0 	.word	0x200007f0
 8004944:	08013978 	.word	0x08013978
 8004948:	20000610 	.word	0x20000610
 800494c:	08013980 	.word	0x08013980

08004950 <moveFR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveFR */
void moveFR(void *argument)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveFR */
  /* Infinite loop */
  for(;;)
  {
	  if(curTask != TASK_FR) osDelay(1000);
 8004958:	4b9f      	ldr	r3, [pc, #636]	@ (8004bd8 <moveFR+0x288>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b03      	cmp	r3, #3
 800495e:	d004      	beq.n	800496a <moveFR+0x1a>
 8004960:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004964:	f008 fa22 	bl	800cdac <osDelay>
 8004968:	e7f6      	b.n	8004958 <moveFR+0x8>
	  else
	  {
		  switch(curCmd.val){
 800496a:	4b9c      	ldr	r3, [pc, #624]	@ (8004bdc <moveFR+0x28c>)
 800496c:	885b      	ldrh	r3, [r3, #2]
 800496e:	2b14      	cmp	r3, #20
 8004970:	f000 8083 	beq.w	8004a7a <moveFR+0x12a>
 8004974:	2b1e      	cmp	r3, #30
 8004976:	f040 810c 	bne.w	8004b92 <moveFR+0x242>
		  	  case 30: //FR30 (4x2)
		  		  __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 800497a:	4b99      	ldr	r3, [pc, #612]	@ (8004be0 <moveFR+0x290>)
 800497c:	edd3 7a41 	vldr	s15, [r3, #260]	@ 0x104
 8004980:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8004be4 <moveFR+0x294>
 8004984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498c:	dd01      	ble.n	8004992 <moveFR+0x42>
 800498e:	23f0      	movs	r3, #240	@ 0xf0
 8004990:	e012      	b.n	80049b8 <moveFR+0x68>
 8004992:	4b93      	ldr	r3, [pc, #588]	@ (8004be0 <moveFR+0x290>)
 8004994:	edd3 7a41 	vldr	s15, [r3, #260]	@ 0x104
 8004998:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8004be8 <moveFR+0x298>
 800499c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a4:	d501      	bpl.n	80049aa <moveFR+0x5a>
 80049a6:	2353      	movs	r3, #83	@ 0x53
 80049a8:	e006      	b.n	80049b8 <moveFR+0x68>
 80049aa:	4b8d      	ldr	r3, [pc, #564]	@ (8004be0 <moveFR+0x290>)
 80049ac:	edd3 7a41 	vldr	s15, [r3, #260]	@ 0x104
 80049b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b4:	ee17 3a90 	vmov	r3, s15
 80049b8:	4a8c      	ldr	r2, [pc, #560]	@ (8004bec <moveFR+0x29c>)
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80049be:	20fa      	movs	r0, #250	@ 0xfa
 80049c0:	f002 fbac 	bl	800711c <HAL_Delay>
 80049c4:	4b86      	ldr	r3, [pc, #536]	@ (8004be0 <moveFR+0x290>)
 80049c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80049ca:	4a89      	ldr	r2, [pc, #548]	@ (8004bf0 <moveFR+0x2a0>)
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	4b84      	ldr	r3, [pc, #528]	@ (8004be0 <moveFR+0x290>)
 80049d0:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80049e4:	4883      	ldr	r0, [pc, #524]	@ (8004bf4 <moveFR+0x2a4>)
 80049e6:	f003 fe6b 	bl	80086c0 <HAL_GPIO_WritePin>
 80049ea:	4b7d      	ldr	r3, [pc, #500]	@ (8004be0 <moveFR+0x290>)
 80049ec:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	2120      	movs	r1, #32
 80049fe:	487e      	ldr	r0, [pc, #504]	@ (8004bf8 <moveFR+0x2a8>)
 8004a00:	f003 fe5e 	bl	80086c0 <HAL_GPIO_WritePin>
 8004a04:	4b76      	ldr	r3, [pc, #472]	@ (8004be0 <moveFR+0x290>)
 8004a06:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a1a:	4878      	ldr	r0, [pc, #480]	@ (8004bfc <moveFR+0x2ac>)
 8004a1c:	f003 fe50 	bl	80086c0 <HAL_GPIO_WritePin>
 8004a20:	4b6f      	ldr	r3, [pc, #444]	@ (8004be0 <moveFR+0x290>)
 8004a22:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a36:	4871      	ldr	r0, [pc, #452]	@ (8004bfc <moveFR+0x2ac>)
 8004a38:	f003 fe42 	bl	80086c0 <HAL_GPIO_WritePin>
 8004a3c:	4b68      	ldr	r3, [pc, #416]	@ (8004be0 <moveFR+0x290>)
 8004a3e:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 8004a42:	4b6f      	ldr	r3, [pc, #444]	@ (8004c00 <moveFR+0x2b0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a48:	4b65      	ldr	r3, [pc, #404]	@ (8004be0 <moveFR+0x290>)
 8004a4a:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8004a4e:	4b6c      	ldr	r3, [pc, #432]	@ (8004c00 <moveFR+0x2b0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	641a      	str	r2, [r3, #64]	@ 0x40
		  		  Turn(&targetAngle);
 8004a54:	4866      	ldr	r0, [pc, #408]	@ (8004bf0 <moveFR+0x2a0>)
 8004a56:	f7fe fd17 	bl	8003488 <Turn>
		  		  osDelay(10);
 8004a5a:	200a      	movs	r0, #10
 8004a5c:	f008 f9a6 	bl	800cdac <osDelay>
		  		  targetDist = 4;
 8004a60:	4b68      	ldr	r3, [pc, #416]	@ (8004c04 <moveFR+0x2b4>)
 8004a62:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8004a66:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4865      	ldr	r0, [pc, #404]	@ (8004c04 <moveFR+0x2b4>)
 8004a6e:	f7fe fb7f 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8004a72:	200a      	movs	r0, #10
 8004a74:	f008 f99a 	bl	800cdac <osDelay>
		  		  break;
 8004a78:	e12d      	b.n	8004cd6 <moveFR+0x386>

		  	  case 20: //FR20 (3x1)
		  		  targetDist = 4;
 8004a7a:	4b62      	ldr	r3, [pc, #392]	@ (8004c04 <moveFR+0x2b4>)
 8004a7c:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8004a80:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
 8004a82:	2200      	movs	r2, #0
 8004a84:	2100      	movs	r1, #0
 8004a86:	485f      	ldr	r0, [pc, #380]	@ (8004c04 <moveFR+0x2b4>)
 8004a88:	f7fe fb72 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8004a8c:	200a      	movs	r0, #10
 8004a8e:	f008 f98d 	bl	800cdac <osDelay>
		  		  __SET_CMD_CONFIG(cfgs[CONFIG_FR20], &htim8, &htim1, targetAngle);
 8004a92:	4b53      	ldr	r3, [pc, #332]	@ (8004be0 <moveFR+0x290>)
 8004a94:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8004a98:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8004be4 <moveFR+0x294>
 8004a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa4:	dd01      	ble.n	8004aaa <moveFR+0x15a>
 8004aa6:	23f0      	movs	r3, #240	@ 0xf0
 8004aa8:	e012      	b.n	8004ad0 <moveFR+0x180>
 8004aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8004be0 <moveFR+0x290>)
 8004aac:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8004ab0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8004be8 <moveFR+0x298>
 8004ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004abc:	d501      	bpl.n	8004ac2 <moveFR+0x172>
 8004abe:	2353      	movs	r3, #83	@ 0x53
 8004ac0:	e006      	b.n	8004ad0 <moveFR+0x180>
 8004ac2:	4b47      	ldr	r3, [pc, #284]	@ (8004be0 <moveFR+0x290>)
 8004ac4:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8004ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004acc:	ee17 3a90 	vmov	r3, s15
 8004ad0:	4a46      	ldr	r2, [pc, #280]	@ (8004bec <moveFR+0x29c>)
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ad6:	20fa      	movs	r0, #250	@ 0xfa
 8004ad8:	f002 fb20 	bl	800711c <HAL_Delay>
 8004adc:	4b40      	ldr	r3, [pc, #256]	@ (8004be0 <moveFR+0x290>)
 8004ade:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004ae2:	4a43      	ldr	r2, [pc, #268]	@ (8004bf0 <moveFR+0x2a0>)
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8004be0 <moveFR+0x290>)
 8004ae8:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004afc:	483d      	ldr	r0, [pc, #244]	@ (8004bf4 <moveFR+0x2a4>)
 8004afe:	f003 fddf 	bl	80086c0 <HAL_GPIO_WritePin>
 8004b02:	4b37      	ldr	r3, [pc, #220]	@ (8004be0 <moveFR+0x290>)
 8004b04:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf14      	ite	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2300      	moveq	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	2120      	movs	r1, #32
 8004b16:	4838      	ldr	r0, [pc, #224]	@ (8004bf8 <moveFR+0x2a8>)
 8004b18:	f003 fdd2 	bl	80086c0 <HAL_GPIO_WritePin>
 8004b1c:	4b30      	ldr	r3, [pc, #192]	@ (8004be0 <moveFR+0x290>)
 8004b1e:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b32:	4832      	ldr	r0, [pc, #200]	@ (8004bfc <moveFR+0x2ac>)
 8004b34:	f003 fdc4 	bl	80086c0 <HAL_GPIO_WritePin>
 8004b38:	4b29      	ldr	r3, [pc, #164]	@ (8004be0 <moveFR+0x290>)
 8004b3a:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b4e:	482b      	ldr	r0, [pc, #172]	@ (8004bfc <moveFR+0x2ac>)
 8004b50:	f003 fdb6 	bl	80086c0 <HAL_GPIO_WritePin>
 8004b54:	4b22      	ldr	r3, [pc, #136]	@ (8004be0 <moveFR+0x290>)
 8004b56:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8004b5a:	4b29      	ldr	r3, [pc, #164]	@ (8004c00 <moveFR+0x2b0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b60:	4b1f      	ldr	r3, [pc, #124]	@ (8004be0 <moveFR+0x290>)
 8004b62:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 8004b66:	4b26      	ldr	r3, [pc, #152]	@ (8004c00 <moveFR+0x2b0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	641a      	str	r2, [r3, #64]	@ 0x40
		  		  Turn(&targetAngle);
 8004b6c:	4820      	ldr	r0, [pc, #128]	@ (8004bf0 <moveFR+0x2a0>)
 8004b6e:	f7fe fc8b 	bl	8003488 <Turn>
		  		  osDelay(10);
 8004b72:	200a      	movs	r0, #10
 8004b74:	f008 f91a 	bl	800cdac <osDelay>
		  		  targetDist = 8;
 8004b78:	4b22      	ldr	r3, [pc, #136]	@ (8004c04 <moveFR+0x2b4>)
 8004b7a:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004b7e:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
 8004b80:	2200      	movs	r2, #0
 8004b82:	2100      	movs	r1, #0
 8004b84:	481f      	ldr	r0, [pc, #124]	@ (8004c04 <moveFR+0x2b4>)
 8004b86:	f7fe faf3 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8004b8a:	200a      	movs	r0, #10
 8004b8c:	f008 f90e 	bl	800cdac <osDelay>
		  		  break;
 8004b90:	e0a1      	b.n	8004cd6 <moveFR+0x386>
//		  		  osDelay(10);
//		  		  targetDist = 2.3;
//		  		  MoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_TURN);
//		  		  osDelay(10);

		  		  targetDist = 10; // 2.5;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	@ (8004c04 <moveFR+0x2b4>)
 8004b94:	4a1c      	ldr	r2, [pc, #112]	@ (8004c08 <moveFR+0x2b8>)
 8004b96:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4819      	ldr	r0, [pc, #100]	@ (8004c04 <moveFR+0x2b4>)
 8004b9e:	f7fe fae7 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8004ba2:	200a      	movs	r0, #10
 8004ba4:	f008 f902 	bl	800cdac <osDelay>


		  		  __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <moveFR+0x290>)
 8004baa:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8004bae:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004be4 <moveFR+0x294>
 8004bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bba:	dd01      	ble.n	8004bc0 <moveFR+0x270>
 8004bbc:	23f0      	movs	r3, #240	@ 0xf0
 8004bbe:	e02c      	b.n	8004c1a <moveFR+0x2ca>
 8004bc0:	4b07      	ldr	r3, [pc, #28]	@ (8004be0 <moveFR+0x290>)
 8004bc2:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8004bc6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004be8 <moveFR+0x298>
 8004bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd2:	d51b      	bpl.n	8004c0c <moveFR+0x2bc>
 8004bd4:	2353      	movs	r3, #83	@ 0x53
 8004bd6:	e020      	b.n	8004c1a <moveFR+0x2ca>
 8004bd8:	20000000 	.word	0x20000000
 8004bdc:	200007b4 	.word	0x200007b4
 8004be0:	2000000c 	.word	0x2000000c
 8004be4:	43700000 	.word	0x43700000
 8004be8:	42a60000 	.word	0x42a60000
 8004bec:	20000460 	.word	0x20000460
 8004bf0:	20000794 	.word	0x20000794
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40020800 	.word	0x40020800
 8004bfc:	40020400 	.word	0x40020400
 8004c00:	200005c8 	.word	0x200005c8
 8004c04:	200007a4 	.word	0x200007a4
 8004c08:	41200000 	.word	0x41200000
 8004c0c:	4b51      	ldr	r3, [pc, #324]	@ (8004d54 <moveFR+0x404>)
 8004c0e:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8004c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c16:	ee17 3a90 	vmov	r3, s15
 8004c1a:	4a4f      	ldr	r2, [pc, #316]	@ (8004d58 <moveFR+0x408>)
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c20:	20fa      	movs	r0, #250	@ 0xfa
 8004c22:	f002 fa7b 	bl	800711c <HAL_Delay>
 8004c26:	4b4b      	ldr	r3, [pc, #300]	@ (8004d54 <moveFR+0x404>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2c:	4a4b      	ldr	r2, [pc, #300]	@ (8004d5c <moveFR+0x40c>)
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	4b48      	ldr	r3, [pc, #288]	@ (8004d54 <moveFR+0x404>)
 8004c32:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004c46:	4846      	ldr	r0, [pc, #280]	@ (8004d60 <moveFR+0x410>)
 8004c48:	f003 fd3a 	bl	80086c0 <HAL_GPIO_WritePin>
 8004c4c:	4b41      	ldr	r3, [pc, #260]	@ (8004d54 <moveFR+0x404>)
 8004c4e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bf14      	ite	ne
 8004c56:	2301      	movne	r3, #1
 8004c58:	2300      	moveq	r3, #0
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	2120      	movs	r1, #32
 8004c60:	4840      	ldr	r0, [pc, #256]	@ (8004d64 <moveFR+0x414>)
 8004c62:	f003 fd2d 	bl	80086c0 <HAL_GPIO_WritePin>
 8004c66:	4b3b      	ldr	r3, [pc, #236]	@ (8004d54 <moveFR+0x404>)
 8004c68:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf0c      	ite	eq
 8004c70:	2301      	moveq	r3, #1
 8004c72:	2300      	movne	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c7c:	483a      	ldr	r0, [pc, #232]	@ (8004d68 <moveFR+0x418>)
 8004c7e:	f003 fd1f 	bl	80086c0 <HAL_GPIO_WritePin>
 8004c82:	4b34      	ldr	r3, [pc, #208]	@ (8004d54 <moveFR+0x404>)
 8004c84:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf14      	ite	ne
 8004c8c:	2301      	movne	r3, #1
 8004c8e:	2300      	moveq	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c98:	4833      	ldr	r0, [pc, #204]	@ (8004d68 <moveFR+0x418>)
 8004c9a:	f003 fd11 	bl	80086c0 <HAL_GPIO_WritePin>
 8004c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d54 <moveFR+0x404>)
 8004ca0:	f8b3 2080 	ldrh.w	r2, [r3, #128]	@ 0x80
 8004ca4:	4b31      	ldr	r3, [pc, #196]	@ (8004d6c <moveFR+0x41c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004caa:	4b2a      	ldr	r3, [pc, #168]	@ (8004d54 <moveFR+0x404>)
 8004cac:	f8b3 2082 	ldrh.w	r2, [r3, #130]	@ 0x82
 8004cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d6c <moveFR+0x41c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	641a      	str	r2, [r3, #64]	@ 0x40
		  		  Turn(&targetAngle);
 8004cb6:	4829      	ldr	r0, [pc, #164]	@ (8004d5c <moveFR+0x40c>)
 8004cb8:	f7fe fbe6 	bl	8003488 <Turn>

		  		  targetDist = 4;  // 38;
 8004cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8004d70 <moveFR+0x420>)
 8004cbe:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8004cc2:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4829      	ldr	r0, [pc, #164]	@ (8004d70 <moveFR+0x420>)
 8004cca:	f7fe fa51 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8004cce:	200a      	movs	r0, #10
 8004cd0:	f008 f86c 	bl	800cdac <osDelay>
//		  		  osDelay(10);
//
//		  		  targetDist = 6;
//		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
//		  		  osDelay(10);
		  		  break;
 8004cd4:	bf00      	nop
		}
		btnClicked = 0;
 8004cd6:	4b27      	ldr	r3, [pc, #156]	@ (8004d74 <moveFR+0x424>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
		prevTask = curTask;
 8004cdc:	4b26      	ldr	r3, [pc, #152]	@ (8004d78 <moveFR+0x428>)
 8004cde:	781a      	ldrb	r2, [r3, #0]
 8004ce0:	4b26      	ldr	r3, [pc, #152]	@ (8004d7c <moveFR+0x42c>)
 8004ce2:	701a      	strb	r2, [r3, #0]
		curTask = TASK_NONE;
 8004ce4:	4b24      	ldr	r3, [pc, #144]	@ (8004d78 <moveFR+0x428>)
 8004ce6:	220b      	movs	r2, #11
 8004ce8:	701a      	strb	r2, [r3, #0]

		if(__IS_EMPTY(cmdq))
 8004cea:	4b25      	ldr	r3, [pc, #148]	@ (8004d80 <moveFR+0x430>)
 8004cec:	781a      	ldrb	r2, [r3, #0]
 8004cee:	4b24      	ldr	r3, [pc, #144]	@ (8004d80 <moveFR+0x430>)
 8004cf0:	785b      	ldrb	r3, [r3, #1]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d112      	bne.n	8004d1c <moveFR+0x3cc>
		{
			__CLEAR_CURCMD(curCmd);
 8004cf6:	4b23      	ldr	r3, [pc, #140]	@ (8004d84 <moveFR+0x434>)
 8004cf8:	2264      	movs	r2, #100	@ 0x64
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	4b21      	ldr	r3, [pc, #132]	@ (8004d84 <moveFR+0x434>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, msg);
 8004d02:	4a21      	ldr	r2, [pc, #132]	@ (8004d88 <moveFR+0x438>)
 8004d04:	210f      	movs	r1, #15
 8004d06:	4821      	ldr	r0, [pc, #132]	@ (8004d8c <moveFR+0x43c>)
 8004d08:	f00b fcfa 	bl	8010700 <sniprintf>
 8004d0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d10:	2206      	movs	r2, #6
 8004d12:	491f      	ldr	r1, [pc, #124]	@ (8004d90 <moveFR+0x440>)
 8004d14:	481f      	ldr	r0, [pc, #124]	@ (8004d94 <moveFR+0x444>)
 8004d16:	f006 ff33 	bl	800bb80 <HAL_UART_Transmit>
 8004d1a:	e61d      	b.n	8004958 <moveFR+0x8>
		}
		else
			__READ_CMD(cmdq, curCmd, msg);
 8004d1c:	4b18      	ldr	r3, [pc, #96]	@ (8004d80 <moveFR+0x430>)
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	4a18      	ldr	r2, [pc, #96]	@ (8004d84 <moveFR+0x434>)
 8004d22:	4917      	ldr	r1, [pc, #92]	@ (8004d80 <moveFR+0x430>)
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <moveFR+0x430>)
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	3301      	adds	r3, #1
 8004d32:	4a13      	ldr	r2, [pc, #76]	@ (8004d80 <moveFR+0x430>)
 8004d34:	7892      	ldrb	r2, [r2, #2]
 8004d36:	fb93 f1f2 	sdiv	r1, r3, r2
 8004d3a:	fb01 f202 	mul.w	r2, r1, r2
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	4b0f      	ldr	r3, [pc, #60]	@ (8004d80 <moveFR+0x430>)
 8004d44:	705a      	strb	r2, [r3, #1]
 8004d46:	4a14      	ldr	r2, [pc, #80]	@ (8004d98 <moveFR+0x448>)
 8004d48:	210f      	movs	r1, #15
 8004d4a:	4810      	ldr	r0, [pc, #64]	@ (8004d8c <moveFR+0x43c>)
 8004d4c:	f00b fcd8 	bl	8010700 <sniprintf>
	  if(curTask != TASK_FR) osDelay(1000);
 8004d50:	e602      	b.n	8004958 <moveFR+0x8>
 8004d52:	bf00      	nop
 8004d54:	2000000c 	.word	0x2000000c
 8004d58:	20000460 	.word	0x20000460
 8004d5c:	20000794 	.word	0x20000794
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40020800 	.word	0x40020800
 8004d68:	40020400 	.word	0x40020400
 8004d6c:	200005c8 	.word	0x200005c8
 8004d70:	200007a4 	.word	0x200007a4
 8004d74:	20000698 	.word	0x20000698
 8004d78:	20000000 	.word	0x20000000
 8004d7c:	20000001 	.word	0x20000001
 8004d80:	200007b8 	.word	0x200007b8
 8004d84:	200007b4 	.word	0x200007b4
 8004d88:	08013970 	.word	0x08013970
 8004d8c:	200007f0 	.word	0x200007f0
 8004d90:	08013978 	.word	0x08013978
 8004d94:	20000610 	.word	0x20000610
 8004d98:	08013980 	.word	0x08013980

08004d9c <moveBL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveBL */
void moveBL(void *argument)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveBL */
  /* Infinite loop */
  for(;;)
  {
	  if(curTask != TASK_BL) osDelay(1000);
 8004da4:	4b9e      	ldr	r3, [pc, #632]	@ (8005020 <moveBL+0x284>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d004      	beq.n	8004db6 <moveBL+0x1a>
 8004dac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004db0:	f007 fffc 	bl	800cdac <osDelay>
 8004db4:	e7f6      	b.n	8004da4 <moveBL+0x8>
	  else
	  {
		  switch(curCmd.val){
 8004db6:	4b9b      	ldr	r3, [pc, #620]	@ (8005024 <moveBL+0x288>)
 8004db8:	885b      	ldrh	r3, [r3, #2]
 8004dba:	2b14      	cmp	r3, #20
 8004dbc:	f000 8082 	beq.w	8004ec4 <moveBL+0x128>
 8004dc0:	2b1e      	cmp	r3, #30
 8004dc2:	f040 810a 	bne.w	8004fda <moveBL+0x23e>
		  	  case 30: //FL30 (4x2)
		  		  __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 8004dc6:	4b98      	ldr	r3, [pc, #608]	@ (8005028 <moveBL+0x28c>)
 8004dc8:	edd3 7a45 	vldr	s15, [r3, #276]	@ 0x114
 8004dcc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800502c <moveBL+0x290>
 8004dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd8:	dd01      	ble.n	8004dde <moveBL+0x42>
 8004dda:	23f0      	movs	r3, #240	@ 0xf0
 8004ddc:	e012      	b.n	8004e04 <moveBL+0x68>
 8004dde:	4b92      	ldr	r3, [pc, #584]	@ (8005028 <moveBL+0x28c>)
 8004de0:	edd3 7a45 	vldr	s15, [r3, #276]	@ 0x114
 8004de4:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8005030 <moveBL+0x294>
 8004de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df0:	d501      	bpl.n	8004df6 <moveBL+0x5a>
 8004df2:	2353      	movs	r3, #83	@ 0x53
 8004df4:	e006      	b.n	8004e04 <moveBL+0x68>
 8004df6:	4b8c      	ldr	r3, [pc, #560]	@ (8005028 <moveBL+0x28c>)
 8004df8:	edd3 7a45 	vldr	s15, [r3, #276]	@ 0x114
 8004dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e00:	ee17 3a90 	vmov	r3, s15
 8004e04:	4a8b      	ldr	r2, [pc, #556]	@ (8005034 <moveBL+0x298>)
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e0a:	20fa      	movs	r0, #250	@ 0xfa
 8004e0c:	f002 f986 	bl	800711c <HAL_Delay>
 8004e10:	4b85      	ldr	r3, [pc, #532]	@ (8005028 <moveBL+0x28c>)
 8004e12:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8004e16:	4a88      	ldr	r2, [pc, #544]	@ (8005038 <moveBL+0x29c>)
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	4b83      	ldr	r3, [pc, #524]	@ (8005028 <moveBL+0x28c>)
 8004e1c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf0c      	ite	eq
 8004e24:	2301      	moveq	r3, #1
 8004e26:	2300      	movne	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004e30:	4882      	ldr	r0, [pc, #520]	@ (800503c <moveBL+0x2a0>)
 8004e32:	f003 fc45 	bl	80086c0 <HAL_GPIO_WritePin>
 8004e36:	4b7c      	ldr	r3, [pc, #496]	@ (8005028 <moveBL+0x28c>)
 8004e38:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	2120      	movs	r1, #32
 8004e4a:	487d      	ldr	r0, [pc, #500]	@ (8005040 <moveBL+0x2a4>)
 8004e4c:	f003 fc38 	bl	80086c0 <HAL_GPIO_WritePin>
 8004e50:	4b75      	ldr	r3, [pc, #468]	@ (8005028 <moveBL+0x28c>)
 8004e52:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bf0c      	ite	eq
 8004e5a:	2301      	moveq	r3, #1
 8004e5c:	2300      	movne	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e66:	4877      	ldr	r0, [pc, #476]	@ (8005044 <moveBL+0x2a8>)
 8004e68:	f003 fc2a 	bl	80086c0 <HAL_GPIO_WritePin>
 8004e6c:	4b6e      	ldr	r3, [pc, #440]	@ (8005028 <moveBL+0x28c>)
 8004e6e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bf14      	ite	ne
 8004e76:	2301      	movne	r3, #1
 8004e78:	2300      	moveq	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e82:	4870      	ldr	r0, [pc, #448]	@ (8005044 <moveBL+0x2a8>)
 8004e84:	f003 fc1c 	bl	80086c0 <HAL_GPIO_WritePin>
 8004e88:	4b67      	ldr	r3, [pc, #412]	@ (8005028 <moveBL+0x28c>)
 8004e8a:	f8b3 2110 	ldrh.w	r2, [r3, #272]	@ 0x110
 8004e8e:	4b6e      	ldr	r3, [pc, #440]	@ (8005048 <moveBL+0x2ac>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e94:	4b64      	ldr	r3, [pc, #400]	@ (8005028 <moveBL+0x28c>)
 8004e96:	f8b3 2112 	ldrh.w	r2, [r3, #274]	@ 0x112
 8004e9a:	4b6b      	ldr	r3, [pc, #428]	@ (8005048 <moveBL+0x2ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	641a      	str	r2, [r3, #64]	@ 0x40
		  		  Turn(&targetAngle);
 8004ea0:	4865      	ldr	r0, [pc, #404]	@ (8005038 <moveBL+0x29c>)
 8004ea2:	f7fe faf1 	bl	8003488 <Turn>
		  		  osDelay(10);
 8004ea6:	200a      	movs	r0, #10
 8004ea8:	f007 ff80 	bl	800cdac <osDelay>
		  		  targetDist = 4.5;
 8004eac:	4b67      	ldr	r3, [pc, #412]	@ (800504c <moveBL+0x2b0>)
 8004eae:	4a68      	ldr	r2, [pc, #416]	@ (8005050 <moveBL+0x2b4>)
 8004eb0:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4865      	ldr	r0, [pc, #404]	@ (800504c <moveBL+0x2b0>)
 8004eb8:	f7fe f95a 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8004ebc:	200a      	movs	r0, #10
 8004ebe:	f007 ff75 	bl	800cdac <osDelay>
		  		  break;
 8004ec2:	e127      	b.n	8005114 <moveBL+0x378>

		  	  case 20: //BL20 (outdoor 3x1)
		  		  targetDist = 6;
 8004ec4:	4b61      	ldr	r3, [pc, #388]	@ (800504c <moveBL+0x2b0>)
 8004ec6:	4a63      	ldr	r2, [pc, #396]	@ (8005054 <moveBL+0x2b8>)
 8004ec8:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_TURN);
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2101      	movs	r1, #1
 8004ece:	485f      	ldr	r0, [pc, #380]	@ (800504c <moveBL+0x2b0>)
 8004ed0:	f7fe f94e 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8004ed4:	200a      	movs	r0, #10
 8004ed6:	f007 ff69 	bl	800cdac <osDelay>
		  		  __SET_CMD_CONFIG(cfgs[CONFIG_BL20], &htim8, &htim1, targetAngle);
 8004eda:	4b53      	ldr	r3, [pc, #332]	@ (8005028 <moveBL+0x28c>)
 8004edc:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 8004ee0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800502c <moveBL+0x290>
 8004ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eec:	dd01      	ble.n	8004ef2 <moveBL+0x156>
 8004eee:	23f0      	movs	r3, #240	@ 0xf0
 8004ef0:	e012      	b.n	8004f18 <moveBL+0x17c>
 8004ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8005028 <moveBL+0x28c>)
 8004ef4:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 8004ef8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8005030 <moveBL+0x294>
 8004efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f04:	d501      	bpl.n	8004f0a <moveBL+0x16e>
 8004f06:	2353      	movs	r3, #83	@ 0x53
 8004f08:	e006      	b.n	8004f18 <moveBL+0x17c>
 8004f0a:	4b47      	ldr	r3, [pc, #284]	@ (8005028 <moveBL+0x28c>)
 8004f0c:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 8004f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f14:	ee17 3a90 	vmov	r3, s15
 8004f18:	4a46      	ldr	r2, [pc, #280]	@ (8005034 <moveBL+0x298>)
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f1e:	20fa      	movs	r0, #250	@ 0xfa
 8004f20:	f002 f8fc 	bl	800711c <HAL_Delay>
 8004f24:	4b40      	ldr	r3, [pc, #256]	@ (8005028 <moveBL+0x28c>)
 8004f26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f2a:	4a43      	ldr	r2, [pc, #268]	@ (8005038 <moveBL+0x29c>)
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8005028 <moveBL+0x28c>)
 8004f30:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f44:	483d      	ldr	r0, [pc, #244]	@ (800503c <moveBL+0x2a0>)
 8004f46:	f003 fbbb 	bl	80086c0 <HAL_GPIO_WritePin>
 8004f4a:	4b37      	ldr	r3, [pc, #220]	@ (8005028 <moveBL+0x28c>)
 8004f4c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bf14      	ite	ne
 8004f54:	2301      	movne	r3, #1
 8004f56:	2300      	moveq	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	2120      	movs	r1, #32
 8004f5e:	4838      	ldr	r0, [pc, #224]	@ (8005040 <moveBL+0x2a4>)
 8004f60:	f003 fbae 	bl	80086c0 <HAL_GPIO_WritePin>
 8004f64:	4b30      	ldr	r3, [pc, #192]	@ (8005028 <moveBL+0x28c>)
 8004f66:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	bf0c      	ite	eq
 8004f6e:	2301      	moveq	r3, #1
 8004f70:	2300      	movne	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f7a:	4832      	ldr	r0, [pc, #200]	@ (8005044 <moveBL+0x2a8>)
 8004f7c:	f003 fba0 	bl	80086c0 <HAL_GPIO_WritePin>
 8004f80:	4b29      	ldr	r3, [pc, #164]	@ (8005028 <moveBL+0x28c>)
 8004f82:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf14      	ite	ne
 8004f8a:	2301      	movne	r3, #1
 8004f8c:	2300      	moveq	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f96:	482b      	ldr	r0, [pc, #172]	@ (8005044 <moveBL+0x2a8>)
 8004f98:	f003 fb92 	bl	80086c0 <HAL_GPIO_WritePin>
 8004f9c:	4b22      	ldr	r3, [pc, #136]	@ (8005028 <moveBL+0x28c>)
 8004f9e:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8004fa2:	4b29      	ldr	r3, [pc, #164]	@ (8005048 <moveBL+0x2ac>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8005028 <moveBL+0x28c>)
 8004faa:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8004fae:	4b26      	ldr	r3, [pc, #152]	@ (8005048 <moveBL+0x2ac>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	641a      	str	r2, [r3, #64]	@ 0x40
		  		  Turn(&targetAngle);
 8004fb4:	4820      	ldr	r0, [pc, #128]	@ (8005038 <moveBL+0x29c>)
 8004fb6:	f7fe fa67 	bl	8003488 <Turn>
		  		  osDelay(10);
 8004fba:	200a      	movs	r0, #10
 8004fbc:	f007 fef6 	bl	800cdac <osDelay>
		  		  targetDist = 2;
 8004fc0:	4b22      	ldr	r3, [pc, #136]	@ (800504c <moveBL+0x2b0>)
 8004fc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004fc6:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_TURN);
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2101      	movs	r1, #1
 8004fcc:	481f      	ldr	r0, [pc, #124]	@ (800504c <moveBL+0x2b0>)
 8004fce:	f7fe f8cf 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8004fd2:	200a      	movs	r0, #10
 8004fd4:	f007 feea 	bl	800cdac <osDelay>
		  		  break;
 8004fd8:	e09c      	b.n	8005114 <moveBL+0x378>

		  	  default: //BL00 (indoor 3x1)
		  		  targetDist = 5;
 8004fda:	4b1c      	ldr	r3, [pc, #112]	@ (800504c <moveBL+0x2b0>)
 8004fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8005058 <moveBL+0x2bc>)
 8004fde:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_TURN);
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	4819      	ldr	r0, [pc, #100]	@ (800504c <moveBL+0x2b0>)
 8004fe6:	f7fe f8c3 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8004fea:	200a      	movs	r0, #10
 8004fec:	f007 fede 	bl	800cdac <osDelay>
//		  		  targetDist = 4; // 0.85;
//		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
//		  		  osDelay(10);

		  		  __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 8004ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8005028 <moveBL+0x28c>)
 8004ff2:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8004ff6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800502c <moveBL+0x290>
 8004ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005002:	dd01      	ble.n	8005008 <moveBL+0x26c>
 8005004:	23f0      	movs	r3, #240	@ 0xf0
 8005006:	e030      	b.n	800506a <moveBL+0x2ce>
 8005008:	4b07      	ldr	r3, [pc, #28]	@ (8005028 <moveBL+0x28c>)
 800500a:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 800500e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8005030 <moveBL+0x294>
 8005012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501a:	d51f      	bpl.n	800505c <moveBL+0x2c0>
 800501c:	2353      	movs	r3, #83	@ 0x53
 800501e:	e024      	b.n	800506a <moveBL+0x2ce>
 8005020:	20000000 	.word	0x20000000
 8005024:	200007b4 	.word	0x200007b4
 8005028:	2000000c 	.word	0x2000000c
 800502c:	43700000 	.word	0x43700000
 8005030:	42a60000 	.word	0x42a60000
 8005034:	20000460 	.word	0x20000460
 8005038:	20000794 	.word	0x20000794
 800503c:	40021000 	.word	0x40021000
 8005040:	40020800 	.word	0x40020800
 8005044:	40020400 	.word	0x40020400
 8005048:	200005c8 	.word	0x200005c8
 800504c:	200007a4 	.word	0x200007a4
 8005050:	40900000 	.word	0x40900000
 8005054:	40c00000 	.word	0x40c00000
 8005058:	40a00000 	.word	0x40a00000
 800505c:	4b4c      	ldr	r3, [pc, #304]	@ (8005190 <moveBL+0x3f4>)
 800505e:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8005062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005066:	ee17 3a90 	vmov	r3, s15
 800506a:	4a4a      	ldr	r2, [pc, #296]	@ (8005194 <moveBL+0x3f8>)
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005070:	20fa      	movs	r0, #250	@ 0xfa
 8005072:	f002 f853 	bl	800711c <HAL_Delay>
 8005076:	4b46      	ldr	r3, [pc, #280]	@ (8005190 <moveBL+0x3f4>)
 8005078:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800507c:	4a46      	ldr	r2, [pc, #280]	@ (8005198 <moveBL+0x3fc>)
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	4b43      	ldr	r3, [pc, #268]	@ (8005190 <moveBL+0x3f4>)
 8005082:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005086:	2b00      	cmp	r3, #0
 8005088:	bf0c      	ite	eq
 800508a:	2301      	moveq	r3, #1
 800508c:	2300      	movne	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005096:	4841      	ldr	r0, [pc, #260]	@ (800519c <moveBL+0x400>)
 8005098:	f003 fb12 	bl	80086c0 <HAL_GPIO_WritePin>
 800509c:	4b3c      	ldr	r3, [pc, #240]	@ (8005190 <moveBL+0x3f4>)
 800509e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bf14      	ite	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	2300      	moveq	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	2120      	movs	r1, #32
 80050b0:	483b      	ldr	r0, [pc, #236]	@ (80051a0 <moveBL+0x404>)
 80050b2:	f003 fb05 	bl	80086c0 <HAL_GPIO_WritePin>
 80050b6:	4b36      	ldr	r3, [pc, #216]	@ (8005190 <moveBL+0x3f4>)
 80050b8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bf0c      	ite	eq
 80050c0:	2301      	moveq	r3, #1
 80050c2:	2300      	movne	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	461a      	mov	r2, r3
 80050c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050cc:	4835      	ldr	r0, [pc, #212]	@ (80051a4 <moveBL+0x408>)
 80050ce:	f003 faf7 	bl	80086c0 <HAL_GPIO_WritePin>
 80050d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005190 <moveBL+0x3f4>)
 80050d4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80050e8:	482e      	ldr	r0, [pc, #184]	@ (80051a4 <moveBL+0x408>)
 80050ea:	f003 fae9 	bl	80086c0 <HAL_GPIO_WritePin>
 80050ee:	4b28      	ldr	r3, [pc, #160]	@ (8005190 <moveBL+0x3f4>)
 80050f0:	f8b3 2090 	ldrh.w	r2, [r3, #144]	@ 0x90
 80050f4:	4b2c      	ldr	r3, [pc, #176]	@ (80051a8 <moveBL+0x40c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80050fa:	4b25      	ldr	r3, [pc, #148]	@ (8005190 <moveBL+0x3f4>)
 80050fc:	f8b3 2092 	ldrh.w	r2, [r3, #146]	@ 0x92
 8005100:	4b29      	ldr	r3, [pc, #164]	@ (80051a8 <moveBL+0x40c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	641a      	str	r2, [r3, #64]	@ 0x40
		  		  Turn(&targetAngle);
 8005106:	4824      	ldr	r0, [pc, #144]	@ (8005198 <moveBL+0x3fc>)
 8005108:	f7fe f9be 	bl	8003488 <Turn>
		  		  osDelay(10);
 800510c:	200a      	movs	r0, #10
 800510e:	f007 fe4d 	bl	800cdac <osDelay>
//		  		  osDelay(10);

//		  		  targetDist = 2.5; // 12.3;
//		  		  MoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_TURN);
//		  		  osDelay(10);
		  		  break;
 8005112:	bf00      	nop
		}
		btnClicked = 0;
 8005114:	4b25      	ldr	r3, [pc, #148]	@ (80051ac <moveBL+0x410>)
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
		prevTask = curTask;
 800511a:	4b25      	ldr	r3, [pc, #148]	@ (80051b0 <moveBL+0x414>)
 800511c:	781a      	ldrb	r2, [r3, #0]
 800511e:	4b25      	ldr	r3, [pc, #148]	@ (80051b4 <moveBL+0x418>)
 8005120:	701a      	strb	r2, [r3, #0]
		curTask = TASK_NONE;
 8005122:	4b23      	ldr	r3, [pc, #140]	@ (80051b0 <moveBL+0x414>)
 8005124:	220b      	movs	r2, #11
 8005126:	701a      	strb	r2, [r3, #0]

		if(__IS_EMPTY(cmdq))
 8005128:	4b23      	ldr	r3, [pc, #140]	@ (80051b8 <moveBL+0x41c>)
 800512a:	781a      	ldrb	r2, [r3, #0]
 800512c:	4b22      	ldr	r3, [pc, #136]	@ (80051b8 <moveBL+0x41c>)
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	429a      	cmp	r2, r3
 8005132:	d112      	bne.n	800515a <moveBL+0x3be>
		{
			__CLEAR_CURCMD(curCmd);
 8005134:	4b21      	ldr	r3, [pc, #132]	@ (80051bc <moveBL+0x420>)
 8005136:	2264      	movs	r2, #100	@ 0x64
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	4b20      	ldr	r3, [pc, #128]	@ (80051bc <moveBL+0x420>)
 800513c:	2200      	movs	r2, #0
 800513e:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, msg);
 8005140:	4a1f      	ldr	r2, [pc, #124]	@ (80051c0 <moveBL+0x424>)
 8005142:	210f      	movs	r1, #15
 8005144:	481f      	ldr	r0, [pc, #124]	@ (80051c4 <moveBL+0x428>)
 8005146:	f00b fadb 	bl	8010700 <sniprintf>
 800514a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800514e:	2206      	movs	r2, #6
 8005150:	491d      	ldr	r1, [pc, #116]	@ (80051c8 <moveBL+0x42c>)
 8005152:	481e      	ldr	r0, [pc, #120]	@ (80051cc <moveBL+0x430>)
 8005154:	f006 fd14 	bl	800bb80 <HAL_UART_Transmit>
 8005158:	e624      	b.n	8004da4 <moveBL+0x8>
		}
		else
			__READ_CMD(cmdq, curCmd, msg);
 800515a:	4b17      	ldr	r3, [pc, #92]	@ (80051b8 <moveBL+0x41c>)
 800515c:	785b      	ldrb	r3, [r3, #1]
 800515e:	4a17      	ldr	r2, [pc, #92]	@ (80051bc <moveBL+0x420>)
 8005160:	4915      	ldr	r1, [pc, #84]	@ (80051b8 <moveBL+0x41c>)
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	4b13      	ldr	r3, [pc, #76]	@ (80051b8 <moveBL+0x41c>)
 800516c:	785b      	ldrb	r3, [r3, #1]
 800516e:	3301      	adds	r3, #1
 8005170:	4a11      	ldr	r2, [pc, #68]	@ (80051b8 <moveBL+0x41c>)
 8005172:	7892      	ldrb	r2, [r2, #2]
 8005174:	fb93 f1f2 	sdiv	r1, r3, r2
 8005178:	fb01 f202 	mul.w	r2, r1, r2
 800517c:	1a9b      	subs	r3, r3, r2
 800517e:	b2da      	uxtb	r2, r3
 8005180:	4b0d      	ldr	r3, [pc, #52]	@ (80051b8 <moveBL+0x41c>)
 8005182:	705a      	strb	r2, [r3, #1]
 8005184:	4a12      	ldr	r2, [pc, #72]	@ (80051d0 <moveBL+0x434>)
 8005186:	210f      	movs	r1, #15
 8005188:	480e      	ldr	r0, [pc, #56]	@ (80051c4 <moveBL+0x428>)
 800518a:	f00b fab9 	bl	8010700 <sniprintf>
	  if(curTask != TASK_BL) osDelay(1000);
 800518e:	e609      	b.n	8004da4 <moveBL+0x8>
 8005190:	2000000c 	.word	0x2000000c
 8005194:	20000460 	.word	0x20000460
 8005198:	20000794 	.word	0x20000794
 800519c:	40021000 	.word	0x40021000
 80051a0:	40020800 	.word	0x40020800
 80051a4:	40020400 	.word	0x40020400
 80051a8:	200005c8 	.word	0x200005c8
 80051ac:	20000698 	.word	0x20000698
 80051b0:	20000000 	.word	0x20000000
 80051b4:	20000001 	.word	0x20000001
 80051b8:	200007b8 	.word	0x200007b8
 80051bc:	200007b4 	.word	0x200007b4
 80051c0:	08013970 	.word	0x08013970
 80051c4:	200007f0 	.word	0x200007f0
 80051c8:	08013978 	.word	0x08013978
 80051cc:	20000610 	.word	0x20000610
 80051d0:	08013980 	.word	0x08013980

080051d4 <moveBR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveBR */
void moveBR(void *argument)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveBR */
  /* Infinite loop */
  for(;;)
  {
	  if(curTask != TASK_BR) osDelay(1000);
 80051dc:	4b9e      	ldr	r3, [pc, #632]	@ (8005458 <moveBR+0x284>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b05      	cmp	r3, #5
 80051e2:	d004      	beq.n	80051ee <moveBR+0x1a>
 80051e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80051e8:	f007 fde0 	bl	800cdac <osDelay>
 80051ec:	e7f6      	b.n	80051dc <moveBR+0x8>
	  else
	  {
		  switch(curCmd.val){
 80051ee:	4b9b      	ldr	r3, [pc, #620]	@ (800545c <moveBR+0x288>)
 80051f0:	885b      	ldrh	r3, [r3, #2]
 80051f2:	2b14      	cmp	r3, #20
 80051f4:	f000 8082 	beq.w	80052fc <moveBR+0x128>
 80051f8:	2b1e      	cmp	r3, #30
 80051fa:	f040 8109 	bne.w	8005410 <moveBR+0x23c>
		  	  case 30: //FL30 (4x2)
		  		  __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 80051fe:	4b98      	ldr	r3, [pc, #608]	@ (8005460 <moveBR+0x28c>)
 8005200:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 8005204:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8005464 <moveBR+0x290>
 8005208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	dd01      	ble.n	8005216 <moveBR+0x42>
 8005212:	23f0      	movs	r3, #240	@ 0xf0
 8005214:	e012      	b.n	800523c <moveBR+0x68>
 8005216:	4b92      	ldr	r3, [pc, #584]	@ (8005460 <moveBR+0x28c>)
 8005218:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 800521c:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8005468 <moveBR+0x294>
 8005220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005228:	d501      	bpl.n	800522e <moveBR+0x5a>
 800522a:	2353      	movs	r3, #83	@ 0x53
 800522c:	e006      	b.n	800523c <moveBR+0x68>
 800522e:	4b8c      	ldr	r3, [pc, #560]	@ (8005460 <moveBR+0x28c>)
 8005230:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 8005234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005238:	ee17 3a90 	vmov	r3, s15
 800523c:	4a8b      	ldr	r2, [pc, #556]	@ (800546c <moveBR+0x298>)
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	6413      	str	r3, [r2, #64]	@ 0x40
 8005242:	20fa      	movs	r0, #250	@ 0xfa
 8005244:	f001 ff6a 	bl	800711c <HAL_Delay>
 8005248:	4b85      	ldr	r3, [pc, #532]	@ (8005460 <moveBR+0x28c>)
 800524a:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800524e:	4a88      	ldr	r2, [pc, #544]	@ (8005470 <moveBR+0x29c>)
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	4b83      	ldr	r3, [pc, #524]	@ (8005460 <moveBR+0x28c>)
 8005254:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8005258:	2b00      	cmp	r3, #0
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005268:	4882      	ldr	r0, [pc, #520]	@ (8005474 <moveBR+0x2a0>)
 800526a:	f003 fa29 	bl	80086c0 <HAL_GPIO_WritePin>
 800526e:	4b7c      	ldr	r3, [pc, #496]	@ (8005460 <moveBR+0x28c>)
 8005270:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8005274:	2b00      	cmp	r3, #0
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	461a      	mov	r2, r3
 8005280:	2120      	movs	r1, #32
 8005282:	487d      	ldr	r0, [pc, #500]	@ (8005478 <moveBR+0x2a4>)
 8005284:	f003 fa1c 	bl	80086c0 <HAL_GPIO_WritePin>
 8005288:	4b75      	ldr	r3, [pc, #468]	@ (8005460 <moveBR+0x28c>)
 800528a:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800528e:	2b00      	cmp	r3, #0
 8005290:	bf0c      	ite	eq
 8005292:	2301      	moveq	r3, #1
 8005294:	2300      	movne	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800529e:	4877      	ldr	r0, [pc, #476]	@ (800547c <moveBR+0x2a8>)
 80052a0:	f003 fa0e 	bl	80086c0 <HAL_GPIO_WritePin>
 80052a4:	4b6e      	ldr	r3, [pc, #440]	@ (8005460 <moveBR+0x28c>)
 80052a6:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	bf14      	ite	ne
 80052ae:	2301      	movne	r3, #1
 80052b0:	2300      	moveq	r3, #0
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052ba:	4870      	ldr	r0, [pc, #448]	@ (800547c <moveBR+0x2a8>)
 80052bc:	f003 fa00 	bl	80086c0 <HAL_GPIO_WritePin>
 80052c0:	4b67      	ldr	r3, [pc, #412]	@ (8005460 <moveBR+0x28c>)
 80052c2:	f8b3 2120 	ldrh.w	r2, [r3, #288]	@ 0x120
 80052c6:	4b6e      	ldr	r3, [pc, #440]	@ (8005480 <moveBR+0x2ac>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052cc:	4b64      	ldr	r3, [pc, #400]	@ (8005460 <moveBR+0x28c>)
 80052ce:	f8b3 2122 	ldrh.w	r2, [r3, #290]	@ 0x122
 80052d2:	4b6b      	ldr	r3, [pc, #428]	@ (8005480 <moveBR+0x2ac>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	641a      	str	r2, [r3, #64]	@ 0x40
		  		  Turn(&targetAngle);
 80052d8:	4865      	ldr	r0, [pc, #404]	@ (8005470 <moveBR+0x29c>)
 80052da:	f7fe f8d5 	bl	8003488 <Turn>
		  		  osDelay(10);
 80052de:	200a      	movs	r0, #10
 80052e0:	f007 fd64 	bl	800cdac <osDelay>
		  		  targetDist = 5;
 80052e4:	4b67      	ldr	r3, [pc, #412]	@ (8005484 <moveBR+0x2b0>)
 80052e6:	4a68      	ldr	r2, [pc, #416]	@ (8005488 <moveBR+0x2b4>)
 80052e8:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
 80052ea:	2200      	movs	r2, #0
 80052ec:	2100      	movs	r1, #0
 80052ee:	4865      	ldr	r0, [pc, #404]	@ (8005484 <moveBR+0x2b0>)
 80052f0:	f7fd ff3e 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 80052f4:	200a      	movs	r0, #10
 80052f6:	f007 fd59 	bl	800cdac <osDelay>
		  		  break;
 80052fa:	e134      	b.n	8005566 <moveBR+0x392>

		  	  case 20: //BR20 (outdoor 3x1)
		  		  targetDist = 7;
 80052fc:	4b61      	ldr	r3, [pc, #388]	@ (8005484 <moveBR+0x2b0>)
 80052fe:	4a63      	ldr	r2, [pc, #396]	@ (800548c <moveBR+0x2b8>)
 8005300:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_TURN);
 8005302:	2200      	movs	r2, #0
 8005304:	2101      	movs	r1, #1
 8005306:	485f      	ldr	r0, [pc, #380]	@ (8005484 <moveBR+0x2b0>)
 8005308:	f7fd ff32 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 800530c:	200a      	movs	r0, #10
 800530e:	f007 fd4d 	bl	800cdac <osDelay>
		  		  __SET_CMD_CONFIG(cfgs[CONFIG_BR20], &htim8, &htim1, targetAngle);
 8005312:	4b53      	ldr	r3, [pc, #332]	@ (8005460 <moveBR+0x28c>)
 8005314:	edd3 7a39 	vldr	s15, [r3, #228]	@ 0xe4
 8005318:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8005464 <moveBR+0x290>
 800531c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005324:	dd01      	ble.n	800532a <moveBR+0x156>
 8005326:	23f0      	movs	r3, #240	@ 0xf0
 8005328:	e012      	b.n	8005350 <moveBR+0x17c>
 800532a:	4b4d      	ldr	r3, [pc, #308]	@ (8005460 <moveBR+0x28c>)
 800532c:	edd3 7a39 	vldr	s15, [r3, #228]	@ 0xe4
 8005330:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8005468 <moveBR+0x294>
 8005334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	d501      	bpl.n	8005342 <moveBR+0x16e>
 800533e:	2353      	movs	r3, #83	@ 0x53
 8005340:	e006      	b.n	8005350 <moveBR+0x17c>
 8005342:	4b47      	ldr	r3, [pc, #284]	@ (8005460 <moveBR+0x28c>)
 8005344:	edd3 7a39 	vldr	s15, [r3, #228]	@ 0xe4
 8005348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800534c:	ee17 3a90 	vmov	r3, s15
 8005350:	4a46      	ldr	r2, [pc, #280]	@ (800546c <moveBR+0x298>)
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	6413      	str	r3, [r2, #64]	@ 0x40
 8005356:	20fa      	movs	r0, #250	@ 0xfa
 8005358:	f001 fee0 	bl	800711c <HAL_Delay>
 800535c:	4b40      	ldr	r3, [pc, #256]	@ (8005460 <moveBR+0x28c>)
 800535e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005362:	4a43      	ldr	r2, [pc, #268]	@ (8005470 <moveBR+0x29c>)
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	4b3e      	ldr	r3, [pc, #248]	@ (8005460 <moveBR+0x28c>)
 8005368:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800536c:	2b00      	cmp	r3, #0
 800536e:	bf0c      	ite	eq
 8005370:	2301      	moveq	r3, #1
 8005372:	2300      	movne	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800537c:	483d      	ldr	r0, [pc, #244]	@ (8005474 <moveBR+0x2a0>)
 800537e:	f003 f99f 	bl	80086c0 <HAL_GPIO_WritePin>
 8005382:	4b37      	ldr	r3, [pc, #220]	@ (8005460 <moveBR+0x28c>)
 8005384:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf14      	ite	ne
 800538c:	2301      	movne	r3, #1
 800538e:	2300      	moveq	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	2120      	movs	r1, #32
 8005396:	4838      	ldr	r0, [pc, #224]	@ (8005478 <moveBR+0x2a4>)
 8005398:	f003 f992 	bl	80086c0 <HAL_GPIO_WritePin>
 800539c:	4b30      	ldr	r3, [pc, #192]	@ (8005460 <moveBR+0x28c>)
 800539e:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bf0c      	ite	eq
 80053a6:	2301      	moveq	r3, #1
 80053a8:	2300      	movne	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053b2:	4832      	ldr	r0, [pc, #200]	@ (800547c <moveBR+0x2a8>)
 80053b4:	f003 f984 	bl	80086c0 <HAL_GPIO_WritePin>
 80053b8:	4b29      	ldr	r3, [pc, #164]	@ (8005460 <moveBR+0x28c>)
 80053ba:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf14      	ite	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	2300      	moveq	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80053ce:	482b      	ldr	r0, [pc, #172]	@ (800547c <moveBR+0x2a8>)
 80053d0:	f003 f976 	bl	80086c0 <HAL_GPIO_WritePin>
 80053d4:	4b22      	ldr	r3, [pc, #136]	@ (8005460 <moveBR+0x28c>)
 80053d6:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 80053da:	4b29      	ldr	r3, [pc, #164]	@ (8005480 <moveBR+0x2ac>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80053e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005460 <moveBR+0x28c>)
 80053e2:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	@ 0xe2
 80053e6:	4b26      	ldr	r3, [pc, #152]	@ (8005480 <moveBR+0x2ac>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	641a      	str	r2, [r3, #64]	@ 0x40
		  		  Turn(&targetAngle);
 80053ec:	4820      	ldr	r0, [pc, #128]	@ (8005470 <moveBR+0x29c>)
 80053ee:	f7fe f84b 	bl	8003488 <Turn>
		  		  osDelay(10);
 80053f2:	200a      	movs	r0, #10
 80053f4:	f007 fcda 	bl	800cdac <osDelay>
		  		  targetDist = 3;
 80053f8:	4b22      	ldr	r3, [pc, #136]	@ (8005484 <moveBR+0x2b0>)
 80053fa:	4a25      	ldr	r2, [pc, #148]	@ (8005490 <moveBR+0x2bc>)
 80053fc:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_TURN);
 80053fe:	2200      	movs	r2, #0
 8005400:	2101      	movs	r1, #1
 8005402:	4820      	ldr	r0, [pc, #128]	@ (8005484 <moveBR+0x2b0>)
 8005404:	f7fd feb4 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8005408:	200a      	movs	r0, #10
 800540a:	f007 fccf 	bl	800cdac <osDelay>
		  		  break;
 800540e:	e0aa      	b.n	8005566 <moveBR+0x392>

		  	  default: //BR00 (indoor 3x1)
		  		  targetDist = 13; //1.75;
 8005410:	4b1c      	ldr	r3, [pc, #112]	@ (8005484 <moveBR+0x2b0>)
 8005412:	4a20      	ldr	r2, [pc, #128]	@ (8005494 <moveBR+0x2c0>)
 8005414:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_TURN);
 8005416:	2200      	movs	r2, #0
 8005418:	2101      	movs	r1, #1
 800541a:	481a      	ldr	r0, [pc, #104]	@ (8005484 <moveBR+0x2b0>)
 800541c:	f7fd fea8 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 8005420:	200a      	movs	r0, #10
 8005422:	f007 fcc3 	bl	800cdac <osDelay>

//		  		  targetDist = 0;
//		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
//		  		  osDelay(10);

		  		  __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 8005426:	4b0e      	ldr	r3, [pc, #56]	@ (8005460 <moveBR+0x28c>)
 8005428:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 800542c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8005464 <moveBR+0x290>
 8005430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005438:	dd01      	ble.n	800543e <moveBR+0x26a>
 800543a:	23f0      	movs	r3, #240	@ 0xf0
 800543c:	e033      	b.n	80054a6 <moveBR+0x2d2>
 800543e:	4b08      	ldr	r3, [pc, #32]	@ (8005460 <moveBR+0x28c>)
 8005440:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8005444:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8005468 <moveBR+0x294>
 8005448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800544c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005450:	d522      	bpl.n	8005498 <moveBR+0x2c4>
 8005452:	2353      	movs	r3, #83	@ 0x53
 8005454:	e027      	b.n	80054a6 <moveBR+0x2d2>
 8005456:	bf00      	nop
 8005458:	20000000 	.word	0x20000000
 800545c:	200007b4 	.word	0x200007b4
 8005460:	2000000c 	.word	0x2000000c
 8005464:	43700000 	.word	0x43700000
 8005468:	42a60000 	.word	0x42a60000
 800546c:	20000460 	.word	0x20000460
 8005470:	20000794 	.word	0x20000794
 8005474:	40021000 	.word	0x40021000
 8005478:	40020800 	.word	0x40020800
 800547c:	40020400 	.word	0x40020400
 8005480:	200005c8 	.word	0x200005c8
 8005484:	200007a4 	.word	0x200007a4
 8005488:	40a00000 	.word	0x40a00000
 800548c:	40e00000 	.word	0x40e00000
 8005490:	40400000 	.word	0x40400000
 8005494:	41500000 	.word	0x41500000
 8005498:	4b52      	ldr	r3, [pc, #328]	@ (80055e4 <moveBR+0x410>)
 800549a:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 800549e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a2:	ee17 3a90 	vmov	r3, s15
 80054a6:	4a50      	ldr	r2, [pc, #320]	@ (80055e8 <moveBR+0x414>)
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80054ac:	20fa      	movs	r0, #250	@ 0xfa
 80054ae:	f001 fe35 	bl	800711c <HAL_Delay>
 80054b2:	4b4c      	ldr	r3, [pc, #304]	@ (80055e4 <moveBR+0x410>)
 80054b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054b8:	4a4c      	ldr	r2, [pc, #304]	@ (80055ec <moveBR+0x418>)
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	4b49      	ldr	r3, [pc, #292]	@ (80055e4 <moveBR+0x410>)
 80054be:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bf0c      	ite	eq
 80054c6:	2301      	moveq	r3, #1
 80054c8:	2300      	movne	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	461a      	mov	r2, r3
 80054ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054d2:	4847      	ldr	r0, [pc, #284]	@ (80055f0 <moveBR+0x41c>)
 80054d4:	f003 f8f4 	bl	80086c0 <HAL_GPIO_WritePin>
 80054d8:	4b42      	ldr	r3, [pc, #264]	@ (80055e4 <moveBR+0x410>)
 80054da:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bf14      	ite	ne
 80054e2:	2301      	movne	r3, #1
 80054e4:	2300      	moveq	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	2120      	movs	r1, #32
 80054ec:	4841      	ldr	r0, [pc, #260]	@ (80055f4 <moveBR+0x420>)
 80054ee:	f003 f8e7 	bl	80086c0 <HAL_GPIO_WritePin>
 80054f2:	4b3c      	ldr	r3, [pc, #240]	@ (80055e4 <moveBR+0x410>)
 80054f4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005508:	483b      	ldr	r0, [pc, #236]	@ (80055f8 <moveBR+0x424>)
 800550a:	f003 f8d9 	bl	80086c0 <HAL_GPIO_WritePin>
 800550e:	4b35      	ldr	r3, [pc, #212]	@ (80055e4 <moveBR+0x410>)
 8005510:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf14      	ite	ne
 8005518:	2301      	movne	r3, #1
 800551a:	2300      	moveq	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005524:	4834      	ldr	r0, [pc, #208]	@ (80055f8 <moveBR+0x424>)
 8005526:	f003 f8cb 	bl	80086c0 <HAL_GPIO_WritePin>
 800552a:	4b2e      	ldr	r3, [pc, #184]	@ (80055e4 <moveBR+0x410>)
 800552c:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8005530:	4b32      	ldr	r3, [pc, #200]	@ (80055fc <moveBR+0x428>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005536:	4b2b      	ldr	r3, [pc, #172]	@ (80055e4 <moveBR+0x410>)
 8005538:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	@ 0xa2
 800553c:	4b2f      	ldr	r3, [pc, #188]	@ (80055fc <moveBR+0x428>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	641a      	str	r2, [r3, #64]	@ 0x40
		  		  Turn(&targetAngle);
 8005542:	482a      	ldr	r0, [pc, #168]	@ (80055ec <moveBR+0x418>)
 8005544:	f7fd ffa0 	bl	8003488 <Turn>
		  		  osDelay(10);
 8005548:	200a      	movs	r0, #10
 800554a:	f007 fc2f 	bl	800cdac <osDelay>

//		  		  targetDist = 2.3;
//		  		  MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_TURN);
//		  		  osDelay(10);

		  		  targetDist = 3; // 11.8;
 800554e:	4b2c      	ldr	r3, [pc, #176]	@ (8005600 <moveBR+0x42c>)
 8005550:	4a2c      	ldr	r2, [pc, #176]	@ (8005604 <moveBR+0x430>)
 8005552:	601a      	str	r2, [r3, #0]
		  		  MoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_TURN);
 8005554:	2200      	movs	r2, #0
 8005556:	2101      	movs	r1, #1
 8005558:	4829      	ldr	r0, [pc, #164]	@ (8005600 <moveBR+0x42c>)
 800555a:	f7fd fe09 	bl	8003170 <MoveDist>
		  		  osDelay(10);
 800555e:	200a      	movs	r0, #10
 8005560:	f007 fc24 	bl	800cdac <osDelay>
		  		  break;
 8005564:	bf00      	nop
		}
		btnClicked = 0;
 8005566:	4b28      	ldr	r3, [pc, #160]	@ (8005608 <moveBR+0x434>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
		prevTask = curTask;
 800556c:	4b27      	ldr	r3, [pc, #156]	@ (800560c <moveBR+0x438>)
 800556e:	781a      	ldrb	r2, [r3, #0]
 8005570:	4b27      	ldr	r3, [pc, #156]	@ (8005610 <moveBR+0x43c>)
 8005572:	701a      	strb	r2, [r3, #0]
		curTask = TASK_NONE;
 8005574:	4b25      	ldr	r3, [pc, #148]	@ (800560c <moveBR+0x438>)
 8005576:	220b      	movs	r2, #11
 8005578:	701a      	strb	r2, [r3, #0]

		if(__IS_EMPTY(cmdq))
 800557a:	4b26      	ldr	r3, [pc, #152]	@ (8005614 <moveBR+0x440>)
 800557c:	781a      	ldrb	r2, [r3, #0]
 800557e:	4b25      	ldr	r3, [pc, #148]	@ (8005614 <moveBR+0x440>)
 8005580:	785b      	ldrb	r3, [r3, #1]
 8005582:	429a      	cmp	r2, r3
 8005584:	d112      	bne.n	80055ac <moveBR+0x3d8>
		{
			__CLEAR_CURCMD(curCmd);
 8005586:	4b24      	ldr	r3, [pc, #144]	@ (8005618 <moveBR+0x444>)
 8005588:	2264      	movs	r2, #100	@ 0x64
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	4b22      	ldr	r3, [pc, #136]	@ (8005618 <moveBR+0x444>)
 800558e:	2200      	movs	r2, #0
 8005590:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, msg);
 8005592:	4a22      	ldr	r2, [pc, #136]	@ (800561c <moveBR+0x448>)
 8005594:	210f      	movs	r1, #15
 8005596:	4822      	ldr	r0, [pc, #136]	@ (8005620 <moveBR+0x44c>)
 8005598:	f00b f8b2 	bl	8010700 <sniprintf>
 800559c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055a0:	2206      	movs	r2, #6
 80055a2:	4920      	ldr	r1, [pc, #128]	@ (8005624 <moveBR+0x450>)
 80055a4:	4820      	ldr	r0, [pc, #128]	@ (8005628 <moveBR+0x454>)
 80055a6:	f006 faeb 	bl	800bb80 <HAL_UART_Transmit>
 80055aa:	e617      	b.n	80051dc <moveBR+0x8>
		}
		else
			__READ_CMD(cmdq, curCmd, msg);
 80055ac:	4b19      	ldr	r3, [pc, #100]	@ (8005614 <moveBR+0x440>)
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	4a19      	ldr	r2, [pc, #100]	@ (8005618 <moveBR+0x444>)
 80055b2:	4918      	ldr	r1, [pc, #96]	@ (8005614 <moveBR+0x440>)
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	4b15      	ldr	r3, [pc, #84]	@ (8005614 <moveBR+0x440>)
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	3301      	adds	r3, #1
 80055c2:	4a14      	ldr	r2, [pc, #80]	@ (8005614 <moveBR+0x440>)
 80055c4:	7892      	ldrb	r2, [r2, #2]
 80055c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80055ca:	fb01 f202 	mul.w	r2, r1, r2
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	4b10      	ldr	r3, [pc, #64]	@ (8005614 <moveBR+0x440>)
 80055d4:	705a      	strb	r2, [r3, #1]
 80055d6:	4a15      	ldr	r2, [pc, #84]	@ (800562c <moveBR+0x458>)
 80055d8:	210f      	movs	r1, #15
 80055da:	4811      	ldr	r0, [pc, #68]	@ (8005620 <moveBR+0x44c>)
 80055dc:	f00b f890 	bl	8010700 <sniprintf>
	  if(curTask != TASK_BR) osDelay(1000);
 80055e0:	e5fc      	b.n	80051dc <moveBR+0x8>
 80055e2:	bf00      	nop
 80055e4:	2000000c 	.word	0x2000000c
 80055e8:	20000460 	.word	0x20000460
 80055ec:	20000794 	.word	0x20000794
 80055f0:	40021000 	.word	0x40021000
 80055f4:	40020800 	.word	0x40020800
 80055f8:	40020400 	.word	0x40020400
 80055fc:	200005c8 	.word	0x200005c8
 8005600:	200007a4 	.word	0x200007a4
 8005604:	40400000 	.word	0x40400000
 8005608:	20000698 	.word	0x20000698
 800560c:	20000000 	.word	0x20000000
 8005610:	20000001 	.word	0x20000001
 8005614:	200007b8 	.word	0x200007b8
 8005618:	200007b4 	.word	0x200007b4
 800561c:	08013970 	.word	0x08013970
 8005620:	200007f0 	.word	0x200007f0
 8005624:	08013978 	.word	0x08013978
 8005628:	20000610 	.word	0x20000610
 800562c:	08013980 	.word	0x08013980

08005630 <moveDistObsIR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveDistObsIR */
void moveDistObsIR(void *argument)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveDistObsIR */
  uint16_t dataPoint = 0; uint32_t IR_data_raw_acc = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	81fb      	strh	r3, [r7, #14]
 800563c:	2300      	movs	r3, #0
 800563e:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_ADC) osDelay(1000);
 8005640:	4b24      	ldr	r3, [pc, #144]	@ (80056d4 <moveDistObsIR+0xa4>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b06      	cmp	r3, #6
 8005646:	d004      	beq.n	8005652 <moveDistObsIR+0x22>
 8005648:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800564c:	f007 fbae 	bl	800cdac <osDelay>
 8005650:	e7f6      	b.n	8005640 <moveDistObsIR+0x10>
	  else
	  {
		  //			dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
		  //			last_curTask_tick = HAL_GetTick();
		  __PEND_CURCMD(curCmd);
 8005652:	4b21      	ldr	r3, [pc, #132]	@ (80056d8 <moveDistObsIR+0xa8>)
 8005654:	2263      	movs	r2, #99	@ 0x63
 8005656:	701a      	strb	r2, [r3, #0]
		  targetDist = 40;
 8005658:	4b20      	ldr	r3, [pc, #128]	@ (80056dc <moveDistObsIR+0xac>)
 800565a:	4a21      	ldr	r2, [pc, #132]	@ (80056e0 <moveDistObsIR+0xb0>)
 800565c:	601a      	str	r2, [r3, #0]
		  //			} while (1);
		  //
		  //		  __ON_TASK_END(&htim8, prevTask, curTask);
		  //		  HAL_ADC_Stop(&hadc1);
	//		  btnClicked = 0;
		  prevTask = curTask;
 800565e:	4b1d      	ldr	r3, [pc, #116]	@ (80056d4 <moveDistObsIR+0xa4>)
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	4b20      	ldr	r3, [pc, #128]	@ (80056e4 <moveDistObsIR+0xb4>)
 8005664:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8005666:	4b1b      	ldr	r3, [pc, #108]	@ (80056d4 <moveDistObsIR+0xa4>)
 8005668:	220b      	movs	r2, #11
 800566a:	701a      	strb	r2, [r3, #0]
		  if (__IS_EMPTY(cmdq)) {
 800566c:	4b1e      	ldr	r3, [pc, #120]	@ (80056e8 <moveDistObsIR+0xb8>)
 800566e:	781a      	ldrb	r2, [r3, #0]
 8005670:	4b1d      	ldr	r3, [pc, #116]	@ (80056e8 <moveDistObsIR+0xb8>)
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	429a      	cmp	r2, r3
 8005676:	d112      	bne.n	800569e <moveDistObsIR+0x6e>
			  __CLEAR_CURCMD(curCmd);
 8005678:	4b17      	ldr	r3, [pc, #92]	@ (80056d8 <moveDistObsIR+0xa8>)
 800567a:	2264      	movs	r2, #100	@ 0x64
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	4b16      	ldr	r3, [pc, #88]	@ (80056d8 <moveDistObsIR+0xa8>)
 8005680:	2200      	movs	r2, #0
 8005682:	805a      	strh	r2, [r3, #2]
			  __ACK_TASK_DONE(&huart3, msg);
 8005684:	4a19      	ldr	r2, [pc, #100]	@ (80056ec <moveDistObsIR+0xbc>)
 8005686:	210f      	movs	r1, #15
 8005688:	4819      	ldr	r0, [pc, #100]	@ (80056f0 <moveDistObsIR+0xc0>)
 800568a:	f00b f839 	bl	8010700 <sniprintf>
 800568e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005692:	2206      	movs	r2, #6
 8005694:	4917      	ldr	r1, [pc, #92]	@ (80056f4 <moveDistObsIR+0xc4>)
 8005696:	4818      	ldr	r0, [pc, #96]	@ (80056f8 <moveDistObsIR+0xc8>)
 8005698:	f006 fa72 	bl	800bb80 <HAL_UART_Transmit>
 800569c:	e7d0      	b.n	8005640 <moveDistObsIR+0x10>

		  } else __READ_CMD(cmdq, curCmd, msg);
 800569e:	4b12      	ldr	r3, [pc, #72]	@ (80056e8 <moveDistObsIR+0xb8>)
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	4a0d      	ldr	r2, [pc, #52]	@ (80056d8 <moveDistObsIR+0xa8>)
 80056a4:	4910      	ldr	r1, [pc, #64]	@ (80056e8 <moveDistObsIR+0xb8>)
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4b0e      	ldr	r3, [pc, #56]	@ (80056e8 <moveDistObsIR+0xb8>)
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	3301      	adds	r3, #1
 80056b4:	4a0c      	ldr	r2, [pc, #48]	@ (80056e8 <moveDistObsIR+0xb8>)
 80056b6:	7892      	ldrb	r2, [r2, #2]
 80056b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80056bc:	fb01 f202 	mul.w	r2, r1, r2
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	4b08      	ldr	r3, [pc, #32]	@ (80056e8 <moveDistObsIR+0xb8>)
 80056c6:	705a      	strb	r2, [r3, #1]
 80056c8:	4a0c      	ldr	r2, [pc, #48]	@ (80056fc <moveDistObsIR+0xcc>)
 80056ca:	210f      	movs	r1, #15
 80056cc:	4808      	ldr	r0, [pc, #32]	@ (80056f0 <moveDistObsIR+0xc0>)
 80056ce:	f00b f817 	bl	8010700 <sniprintf>
	  if (curTask != TASK_ADC) osDelay(1000);
 80056d2:	e7b5      	b.n	8005640 <moveDistObsIR+0x10>
 80056d4:	20000000 	.word	0x20000000
 80056d8:	200007b4 	.word	0x200007b4
 80056dc:	200007a4 	.word	0x200007a4
 80056e0:	42200000 	.word	0x42200000
 80056e4:	20000001 	.word	0x20000001
 80056e8:	200007b8 	.word	0x200007b8
 80056ec:	08013970 	.word	0x08013970
 80056f0:	200007f0 	.word	0x200007f0
 80056f4:	08013978 	.word	0x08013978
 80056f8:	20000610 	.word	0x20000610
 80056fc:	08013980 	.word	0x08013980

08005700 <moveDistObsUS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveDistObsUS */
void moveDistObsUS(void *argument)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveDistObsUS */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_MOVE_OBS) osDelay(1000);
 8005708:	4b2d      	ldr	r3, [pc, #180]	@ (80057c0 <moveDistObsUS+0xc0>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b07      	cmp	r3, #7
 800570e:	d004      	beq.n	800571a <moveDistObsUS+0x1a>
 8005710:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005714:	f007 fb4a 	bl	800cdac <osDelay>
 8005718:	e04e      	b.n	80057b8 <moveDistObsUS+0xb8>
	  else {
		  targetDist = (float) curCmd.val;
 800571a:	4b2a      	ldr	r3, [pc, #168]	@ (80057c4 <moveDistObsUS+0xc4>)
 800571c:	885b      	ldrh	r3, [r3, #2]
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005726:	4b28      	ldr	r3, [pc, #160]	@ (80057c8 <moveDistObsUS+0xc8>)
 8005728:	edc3 7a00 	vstr	s15, [r3]
		  MoveDistObstacleUS(&targetDist, SPEED_MODE_FAST);
 800572c:	2102      	movs	r1, #2
 800572e:	4826      	ldr	r0, [pc, #152]	@ (80057c8 <moveDistObsUS+0xc8>)
 8005730:	f7fd ff7e 	bl	8003630 <MoveDistObstacleUS>

		  __TASK_END(&htim8, prevTask, curTask);
 8005734:	4b25      	ldr	r3, [pc, #148]	@ (80057cc <moveDistObsUS+0xcc>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2200      	movs	r2, #0
 800573a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800573c:	4b23      	ldr	r3, [pc, #140]	@ (80057cc <moveDistObsUS+0xcc>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2200      	movs	r2, #0
 8005742:	641a      	str	r2, [r3, #64]	@ 0x40
 8005744:	4b1e      	ldr	r3, [pc, #120]	@ (80057c0 <moveDistObsUS+0xc0>)
 8005746:	781a      	ldrb	r2, [r3, #0]
 8005748:	4b21      	ldr	r3, [pc, #132]	@ (80057d0 <moveDistObsUS+0xd0>)
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	4b1c      	ldr	r3, [pc, #112]	@ (80057c0 <moveDistObsUS+0xc0>)
 800574e:	220b      	movs	r2, #11
 8005750:	701a      	strb	r2, [r3, #0]

		if (__IS_EMPTY(cmdq)) {
 8005752:	4b20      	ldr	r3, [pc, #128]	@ (80057d4 <moveDistObsUS+0xd4>)
 8005754:	781a      	ldrb	r2, [r3, #0]
 8005756:	4b1f      	ldr	r3, [pc, #124]	@ (80057d4 <moveDistObsUS+0xd4>)
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	429a      	cmp	r2, r3
 800575c:	d112      	bne.n	8005784 <moveDistObsUS+0x84>
			__CLEAR_CURCMD(curCmd);
 800575e:	4b19      	ldr	r3, [pc, #100]	@ (80057c4 <moveDistObsUS+0xc4>)
 8005760:	2264      	movs	r2, #100	@ 0x64
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	4b17      	ldr	r3, [pc, #92]	@ (80057c4 <moveDistObsUS+0xc4>)
 8005766:	2200      	movs	r2, #0
 8005768:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, msg);
 800576a:	4a1b      	ldr	r2, [pc, #108]	@ (80057d8 <moveDistObsUS+0xd8>)
 800576c:	210f      	movs	r1, #15
 800576e:	481b      	ldr	r0, [pc, #108]	@ (80057dc <moveDistObsUS+0xdc>)
 8005770:	f00a ffc6 	bl	8010700 <sniprintf>
 8005774:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005778:	2206      	movs	r2, #6
 800577a:	4919      	ldr	r1, [pc, #100]	@ (80057e0 <moveDistObsUS+0xe0>)
 800577c:	4819      	ldr	r0, [pc, #100]	@ (80057e4 <moveDistObsUS+0xe4>)
 800577e:	f006 f9ff 	bl	800bb80 <HAL_UART_Transmit>
 8005782:	e019      	b.n	80057b8 <moveDistObsUS+0xb8>
		} else __READ_CMD(cmdq, curCmd, msg);
 8005784:	4b13      	ldr	r3, [pc, #76]	@ (80057d4 <moveDistObsUS+0xd4>)
 8005786:	785b      	ldrb	r3, [r3, #1]
 8005788:	4a0e      	ldr	r2, [pc, #56]	@ (80057c4 <moveDistObsUS+0xc4>)
 800578a:	4912      	ldr	r1, [pc, #72]	@ (80057d4 <moveDistObsUS+0xd4>)
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	4b0f      	ldr	r3, [pc, #60]	@ (80057d4 <moveDistObsUS+0xd4>)
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	3301      	adds	r3, #1
 800579a:	4a0e      	ldr	r2, [pc, #56]	@ (80057d4 <moveDistObsUS+0xd4>)
 800579c:	7892      	ldrb	r2, [r2, #2]
 800579e:	fb93 f1f2 	sdiv	r1, r3, r2
 80057a2:	fb01 f202 	mul.w	r2, r1, r2
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	4b0a      	ldr	r3, [pc, #40]	@ (80057d4 <moveDistObsUS+0xd4>)
 80057ac:	705a      	strb	r2, [r3, #1]
 80057ae:	4a0e      	ldr	r2, [pc, #56]	@ (80057e8 <moveDistObsUS+0xe8>)
 80057b0:	210f      	movs	r1, #15
 80057b2:	480a      	ldr	r0, [pc, #40]	@ (80057dc <moveDistObsUS+0xdc>)
 80057b4:	f00a ffa4 	bl	8010700 <sniprintf>
	  }
    osDelay(1);
 80057b8:	2001      	movs	r0, #1
 80057ba:	f007 faf7 	bl	800cdac <osDelay>
	  if (curTask != TASK_MOVE_OBS) osDelay(1000);
 80057be:	e7a3      	b.n	8005708 <moveDistObsUS+0x8>
 80057c0:	20000000 	.word	0x20000000
 80057c4:	200007b4 	.word	0x200007b4
 80057c8:	200007a4 	.word	0x200007a4
 80057cc:	200005c8 	.word	0x200005c8
 80057d0:	20000001 	.word	0x20000001
 80057d4:	200007b8 	.word	0x200007b8
 80057d8:	08013970 	.word	0x08013970
 80057dc:	200007f0 	.word	0x200007f0
 80057e0:	08013978 	.word	0x08013978
 80057e4:	20000610 	.word	0x20000610
 80057e8:	08013980 	.word	0x08013980

080057ec <fastestCar>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fastestCar */
void fastestCar(void *argument)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fastestCar */

  /* Infinite loop */
  for(;;)
  {
	if(curTask != TASK_FASTESTCAR) osDelay(1000);
 80057f4:	4b9a      	ldr	r3, [pc, #616]	@ (8005a60 <fastestCar+0x274>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b09      	cmp	r3, #9
 80057fa:	d005      	beq.n	8005808 <fastestCar+0x1c>
 80057fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005800:	f007 fad4 	bl	800cdac <osDelay>
 8005804:	f000 bffe 	b.w	8006804 <fastestCar+0x1018>
	else
	{
		//Calculate distance of obstacles?
		//uint8_t turnDir = (uint8_t) curCmd.val;
		//test_obslen = ObsLenUS(turnDir);
		__SET_ENCODER_LAST_TICK(&htim8,encoder_count1);
 8005808:	4b96      	ldr	r3, [pc, #600]	@ (8005a64 <fastestCar+0x278>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	4a96      	ldr	r2, [pc, #600]	@ (8005a68 <fastestCar+0x27c>)
 8005810:	6013      	str	r3, [r2, #0]
		//1. Move forward until XXcm away from obstacle. (This distance must allow car to turn without hitting the obstacle)

		switch(curCmd.val){
 8005812:	4b96      	ldr	r3, [pc, #600]	@ (8005a6c <fastestCar+0x280>)
 8005814:	885b      	ldrh	r3, [r3, #2]
 8005816:	3b01      	subs	r3, #1
 8005818:	2b3c      	cmp	r3, #60	@ 0x3c
 800581a:	f200 8736 	bhi.w	800668a <fastestCar+0xe9e>
 800581e:	a201      	add	r2, pc, #4	@ (adr r2, 8005824 <fastestCar+0x38>)
 8005820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005824:	08005919 	.word	0x08005919
 8005828:	0800593f 	.word	0x0800593f
 800582c:	08005b55 	.word	0x08005b55
 8005830:	08005d31 	.word	0x08005d31
 8005834:	0800668b 	.word	0x0800668b
 8005838:	0800668b 	.word	0x0800668b
 800583c:	0800668b 	.word	0x0800668b
 8005840:	0800668b 	.word	0x0800668b
 8005844:	0800668b 	.word	0x0800668b
 8005848:	0800668b 	.word	0x0800668b
 800584c:	0800668b 	.word	0x0800668b
 8005850:	0800668b 	.word	0x0800668b
 8005854:	0800668b 	.word	0x0800668b
 8005858:	0800668b 	.word	0x0800668b
 800585c:	0800668b 	.word	0x0800668b
 8005860:	0800668b 	.word	0x0800668b
 8005864:	0800668b 	.word	0x0800668b
 8005868:	0800668b 	.word	0x0800668b
 800586c:	0800668b 	.word	0x0800668b
 8005870:	0800668b 	.word	0x0800668b
 8005874:	0800668b 	.word	0x0800668b
 8005878:	0800668b 	.word	0x0800668b
 800587c:	0800668b 	.word	0x0800668b
 8005880:	0800668b 	.word	0x0800668b
 8005884:	0800668b 	.word	0x0800668b
 8005888:	0800668b 	.word	0x0800668b
 800588c:	0800668b 	.word	0x0800668b
 8005890:	0800668b 	.word	0x0800668b
 8005894:	0800668b 	.word	0x0800668b
 8005898:	08005da5 	.word	0x08005da5
 800589c:	08005ebb 	.word	0x08005ebb
 80058a0:	08005fbf 	.word	0x08005fbf
 80058a4:	08006111 	.word	0x08006111
 80058a8:	0800668b 	.word	0x0800668b
 80058ac:	0800668b 	.word	0x0800668b
 80058b0:	0800668b 	.word	0x0800668b
 80058b4:	0800668b 	.word	0x0800668b
 80058b8:	08006213 	.word	0x08006213
 80058bc:	0800668b 	.word	0x0800668b
 80058c0:	0800622d 	.word	0x0800622d
 80058c4:	08006455 	.word	0x08006455
 80058c8:	0800668b 	.word	0x0800668b
 80058cc:	0800668b 	.word	0x0800668b
 80058d0:	0800668b 	.word	0x0800668b
 80058d4:	0800668b 	.word	0x0800668b
 80058d8:	0800668b 	.word	0x0800668b
 80058dc:	0800668b 	.word	0x0800668b
 80058e0:	0800668b 	.word	0x0800668b
 80058e4:	0800668b 	.word	0x0800668b
 80058e8:	0800668b 	.word	0x0800668b
 80058ec:	0800668b 	.word	0x0800668b
 80058f0:	0800668b 	.word	0x0800668b
 80058f4:	0800668b 	.word	0x0800668b
 80058f8:	0800668b 	.word	0x0800668b
 80058fc:	0800668b 	.word	0x0800668b
 8005900:	0800668b 	.word	0x0800668b
 8005904:	0800668b 	.word	0x0800668b
 8005908:	0800668b 	.word	0x0800668b
 800590c:	0800668b 	.word	0x0800668b
 8005910:	0800666f 	.word	0x0800666f
 8005914:	0800667d 	.word	0x0800667d
			case 1: // Move to obs 1
				obj1_dist = USavg();
 8005918:	f7fd fe5c 	bl	80035d4 <USavg>
 800591c:	eef0 7a40 	vmov.f32	s15, s0
 8005920:	4b53      	ldr	r3, [pc, #332]	@ (8005a70 <fastestCar+0x284>)
 8005922:	edc3 7a00 	vstr	s15, [r3]
				// return_dist = return_dist + obj1_dist;
				targetDist = 30;
 8005926:	4b53      	ldr	r3, [pc, #332]	@ (8005a74 <fastestCar+0x288>)
 8005928:	4a53      	ldr	r2, [pc, #332]	@ (8005a78 <fastestCar+0x28c>)
 800592a:	601a      	str	r2, [r3, #0]
				MoveDistObstacleUS(&targetDist,SPEED_MODE_FAST);
 800592c:	2102      	movs	r1, #2
 800592e:	4851      	ldr	r0, [pc, #324]	@ (8005a74 <fastestCar+0x288>)
 8005930:	f7fd fe7e 	bl	8003630 <MoveDistObstacleUS>
				osDelay(5);
 8005934:	2005      	movs	r0, #5
 8005936:	f007 fa39 	bl	800cdac <osDelay>
				// straight till next obstacle
				break;
 800593a:	f000 bea6 	b.w	800668a <fastestCar+0xe9e>
			case 2: // Clear obs 1 LEFT
				__SET_CMD_CONFIG(cfgs[CONFIG_FL00],&htim8,&htim1,targetAngle);
 800593e:	4b4f      	ldr	r3, [pc, #316]	@ (8005a7c <fastestCar+0x290>)
 8005940:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8005944:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8005a80 <fastestCar+0x294>
 8005948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800594c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005950:	dd01      	ble.n	8005956 <fastestCar+0x16a>
 8005952:	23f0      	movs	r3, #240	@ 0xf0
 8005954:	e012      	b.n	800597c <fastestCar+0x190>
 8005956:	4b49      	ldr	r3, [pc, #292]	@ (8005a7c <fastestCar+0x290>)
 8005958:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 800595c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8005a84 <fastestCar+0x298>
 8005960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005968:	d501      	bpl.n	800596e <fastestCar+0x182>
 800596a:	2353      	movs	r3, #83	@ 0x53
 800596c:	e006      	b.n	800597c <fastestCar+0x190>
 800596e:	4b43      	ldr	r3, [pc, #268]	@ (8005a7c <fastestCar+0x290>)
 8005970:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8005974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005978:	ee17 3a90 	vmov	r3, s15
 800597c:	4a42      	ldr	r2, [pc, #264]	@ (8005a88 <fastestCar+0x29c>)
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	6413      	str	r3, [r2, #64]	@ 0x40
 8005982:	20fa      	movs	r0, #250	@ 0xfa
 8005984:	f001 fbca 	bl	800711c <HAL_Delay>
 8005988:	4b3c      	ldr	r3, [pc, #240]	@ (8005a7c <fastestCar+0x290>)
 800598a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800598c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a8c <fastestCar+0x2a0>)
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	4b3a      	ldr	r3, [pc, #232]	@ (8005a7c <fastestCar+0x290>)
 8005992:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80059a6:	483a      	ldr	r0, [pc, #232]	@ (8005a90 <fastestCar+0x2a4>)
 80059a8:	f002 fe8a 	bl	80086c0 <HAL_GPIO_WritePin>
 80059ac:	4b33      	ldr	r3, [pc, #204]	@ (8005a7c <fastestCar+0x290>)
 80059ae:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bf14      	ite	ne
 80059b6:	2301      	movne	r3, #1
 80059b8:	2300      	moveq	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	2120      	movs	r1, #32
 80059c0:	4834      	ldr	r0, [pc, #208]	@ (8005a94 <fastestCar+0x2a8>)
 80059c2:	f002 fe7d 	bl	80086c0 <HAL_GPIO_WritePin>
 80059c6:	4b2d      	ldr	r3, [pc, #180]	@ (8005a7c <fastestCar+0x290>)
 80059c8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	bf0c      	ite	eq
 80059d0:	2301      	moveq	r3, #1
 80059d2:	2300      	movne	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059dc:	482e      	ldr	r0, [pc, #184]	@ (8005a98 <fastestCar+0x2ac>)
 80059de:	f002 fe6f 	bl	80086c0 <HAL_GPIO_WritePin>
 80059e2:	4b26      	ldr	r3, [pc, #152]	@ (8005a7c <fastestCar+0x290>)
 80059e4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bf14      	ite	ne
 80059ec:	2301      	movne	r3, #1
 80059ee:	2300      	moveq	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059f8:	4827      	ldr	r0, [pc, #156]	@ (8005a98 <fastestCar+0x2ac>)
 80059fa:	f002 fe61 	bl	80086c0 <HAL_GPIO_WritePin>
 80059fe:	4b1f      	ldr	r3, [pc, #124]	@ (8005a7c <fastestCar+0x290>)
 8005a00:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 8005a04:	4b17      	ldr	r3, [pc, #92]	@ (8005a64 <fastestCar+0x278>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005a7c <fastestCar+0x290>)
 8005a0c:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 8005a10:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <fastestCar+0x278>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	641a      	str	r2, [r3, #64]	@ 0x40
				Turn(&targetAngle);
 8005a16:	481d      	ldr	r0, [pc, #116]	@ (8005a8c <fastestCar+0x2a0>)
 8005a18:	f7fd fd36 	bl	8003488 <Turn>
				osDelay(5);
 8005a1c:	2005      	movs	r0, #5
 8005a1e:	f007 f9c5 	bl	800cdac <osDelay>
				//turn right forward
				//__SET_CMD_CONFIG(cfgs[CONFIG_FR00],&htim8,&htim1,targetAngle);
				//Turn(&targetAngle);
				//osDelay(5);
				//turn right forward
				FastestCar_Turn_R180(0);
 8005a22:	2000      	movs	r0, #0
 8005a24:	f7fe f8b4 	bl	8003b90 <FastestCar_Turn_R180>
				osDelay(10);
 8005a28:	200a      	movs	r0, #10
 8005a2a:	f007 f9bf 	bl	800cdac <osDelay>
				__SET_CMD_CONFIG(cfgs[CONFIG_FL00],&htim8,&htim1,targetAngle);
 8005a2e:	4b13      	ldr	r3, [pc, #76]	@ (8005a7c <fastestCar+0x290>)
 8005a30:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8005a34:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8005a80 <fastestCar+0x294>
 8005a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a40:	dd01      	ble.n	8005a46 <fastestCar+0x25a>
 8005a42:	23f0      	movs	r3, #240	@ 0xf0
 8005a44:	e031      	b.n	8005aaa <fastestCar+0x2be>
 8005a46:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <fastestCar+0x290>)
 8005a48:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8005a4c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8005a84 <fastestCar+0x298>
 8005a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a58:	d520      	bpl.n	8005a9c <fastestCar+0x2b0>
 8005a5a:	2353      	movs	r3, #83	@ 0x53
 8005a5c:	e025      	b.n	8005aaa <fastestCar+0x2be>
 8005a5e:	bf00      	nop
 8005a60:	20000000 	.word	0x20000000
 8005a64:	200005c8 	.word	0x200005c8
 8005a68:	20000734 	.word	0x20000734
 8005a6c:	200007b4 	.word	0x200007b4
 8005a70:	200006cc 	.word	0x200006cc
 8005a74:	200007a4 	.word	0x200007a4
 8005a78:	41f00000 	.word	0x41f00000
 8005a7c:	2000000c 	.word	0x2000000c
 8005a80:	43700000 	.word	0x43700000
 8005a84:	42a60000 	.word	0x42a60000
 8005a88:	20000460 	.word	0x20000460
 8005a8c:	20000794 	.word	0x20000794
 8005a90:	40021000 	.word	0x40021000
 8005a94:	40020800 	.word	0x40020800
 8005a98:	40020400 	.word	0x40020400
 8005a9c:	4bb3      	ldr	r3, [pc, #716]	@ (8005d6c <fastestCar+0x580>)
 8005a9e:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8005aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa6:	ee17 3a90 	vmov	r3, s15
 8005aaa:	4ab1      	ldr	r2, [pc, #708]	@ (8005d70 <fastestCar+0x584>)
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ab0:	20fa      	movs	r0, #250	@ 0xfa
 8005ab2:	f001 fb33 	bl	800711c <HAL_Delay>
 8005ab6:	4bad      	ldr	r3, [pc, #692]	@ (8005d6c <fastestCar+0x580>)
 8005ab8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aba:	4aae      	ldr	r2, [pc, #696]	@ (8005d74 <fastestCar+0x588>)
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	4bab      	ldr	r3, [pc, #684]	@ (8005d6c <fastestCar+0x580>)
 8005ac0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ad4:	48a8      	ldr	r0, [pc, #672]	@ (8005d78 <fastestCar+0x58c>)
 8005ad6:	f002 fdf3 	bl	80086c0 <HAL_GPIO_WritePin>
 8005ada:	4ba4      	ldr	r3, [pc, #656]	@ (8005d6c <fastestCar+0x580>)
 8005adc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bf14      	ite	ne
 8005ae4:	2301      	movne	r3, #1
 8005ae6:	2300      	moveq	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	2120      	movs	r1, #32
 8005aee:	48a3      	ldr	r0, [pc, #652]	@ (8005d7c <fastestCar+0x590>)
 8005af0:	f002 fde6 	bl	80086c0 <HAL_GPIO_WritePin>
 8005af4:	4b9d      	ldr	r3, [pc, #628]	@ (8005d6c <fastestCar+0x580>)
 8005af6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bf0c      	ite	eq
 8005afe:	2301      	moveq	r3, #1
 8005b00:	2300      	movne	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b0a:	489d      	ldr	r0, [pc, #628]	@ (8005d80 <fastestCar+0x594>)
 8005b0c:	f002 fdd8 	bl	80086c0 <HAL_GPIO_WritePin>
 8005b10:	4b96      	ldr	r3, [pc, #600]	@ (8005d6c <fastestCar+0x580>)
 8005b12:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bf14      	ite	ne
 8005b1a:	2301      	movne	r3, #1
 8005b1c:	2300      	moveq	r3, #0
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b26:	4896      	ldr	r0, [pc, #600]	@ (8005d80 <fastestCar+0x594>)
 8005b28:	f002 fdca 	bl	80086c0 <HAL_GPIO_WritePin>
 8005b2c:	4b8f      	ldr	r3, [pc, #572]	@ (8005d6c <fastestCar+0x580>)
 8005b2e:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 8005b32:	4b94      	ldr	r3, [pc, #592]	@ (8005d84 <fastestCar+0x598>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b38:	4b8c      	ldr	r3, [pc, #560]	@ (8005d6c <fastestCar+0x580>)
 8005b3a:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 8005b3e:	4b91      	ldr	r3, [pc, #580]	@ (8005d84 <fastestCar+0x598>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	641a      	str	r2, [r3, #64]	@ 0x40
				Turn(&targetAngle);
 8005b44:	488b      	ldr	r0, [pc, #556]	@ (8005d74 <fastestCar+0x588>)
 8005b46:	f7fd fc9f 	bl	8003488 <Turn>
				osDelay(5);
 8005b4a:	2005      	movs	r0, #5
 8005b4c:	f007 f92e 	bl	800cdac <osDelay>
				//turn left forward
				break;
 8005b50:	f000 bd9b 	b.w	800668a <fastestCar+0xe9e>
			case 3: // Clear obs 1 RIGHT
				__SET_CMD_CONFIG(cfgs[CONFIG_FR00],&htim8,&htim1,targetAngle);
 8005b54:	4b85      	ldr	r3, [pc, #532]	@ (8005d6c <fastestCar+0x580>)
 8005b56:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8005b5a:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8005d88 <fastestCar+0x59c>
 8005b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b66:	dd01      	ble.n	8005b6c <fastestCar+0x380>
 8005b68:	23f0      	movs	r3, #240	@ 0xf0
 8005b6a:	e012      	b.n	8005b92 <fastestCar+0x3a6>
 8005b6c:	4b7f      	ldr	r3, [pc, #508]	@ (8005d6c <fastestCar+0x580>)
 8005b6e:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8005b72:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8005d8c <fastestCar+0x5a0>
 8005b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7e:	d501      	bpl.n	8005b84 <fastestCar+0x398>
 8005b80:	2353      	movs	r3, #83	@ 0x53
 8005b82:	e006      	b.n	8005b92 <fastestCar+0x3a6>
 8005b84:	4b79      	ldr	r3, [pc, #484]	@ (8005d6c <fastestCar+0x580>)
 8005b86:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8005b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b8e:	ee17 3a90 	vmov	r3, s15
 8005b92:	4a77      	ldr	r2, [pc, #476]	@ (8005d70 <fastestCar+0x584>)
 8005b94:	6812      	ldr	r2, [r2, #0]
 8005b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b98:	20fa      	movs	r0, #250	@ 0xfa
 8005b9a:	f001 fabf 	bl	800711c <HAL_Delay>
 8005b9e:	4b73      	ldr	r3, [pc, #460]	@ (8005d6c <fastestCar+0x580>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba4:	4a73      	ldr	r2, [pc, #460]	@ (8005d74 <fastestCar+0x588>)
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	4b70      	ldr	r3, [pc, #448]	@ (8005d6c <fastestCar+0x580>)
 8005baa:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bf0c      	ite	eq
 8005bb2:	2301      	moveq	r3, #1
 8005bb4:	2300      	movne	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005bbe:	486e      	ldr	r0, [pc, #440]	@ (8005d78 <fastestCar+0x58c>)
 8005bc0:	f002 fd7e 	bl	80086c0 <HAL_GPIO_WritePin>
 8005bc4:	4b69      	ldr	r3, [pc, #420]	@ (8005d6c <fastestCar+0x580>)
 8005bc6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bf14      	ite	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	2300      	moveq	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	2120      	movs	r1, #32
 8005bd8:	4868      	ldr	r0, [pc, #416]	@ (8005d7c <fastestCar+0x590>)
 8005bda:	f002 fd71 	bl	80086c0 <HAL_GPIO_WritePin>
 8005bde:	4b63      	ldr	r3, [pc, #396]	@ (8005d6c <fastestCar+0x580>)
 8005be0:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	bf0c      	ite	eq
 8005be8:	2301      	moveq	r3, #1
 8005bea:	2300      	movne	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bf4:	4862      	ldr	r0, [pc, #392]	@ (8005d80 <fastestCar+0x594>)
 8005bf6:	f002 fd63 	bl	80086c0 <HAL_GPIO_WritePin>
 8005bfa:	4b5c      	ldr	r3, [pc, #368]	@ (8005d6c <fastestCar+0x580>)
 8005bfc:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf14      	ite	ne
 8005c04:	2301      	movne	r3, #1
 8005c06:	2300      	moveq	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c10:	485b      	ldr	r0, [pc, #364]	@ (8005d80 <fastestCar+0x594>)
 8005c12:	f002 fd55 	bl	80086c0 <HAL_GPIO_WritePin>
 8005c16:	4b55      	ldr	r3, [pc, #340]	@ (8005d6c <fastestCar+0x580>)
 8005c18:	f8b3 2080 	ldrh.w	r2, [r3, #128]	@ 0x80
 8005c1c:	4b59      	ldr	r3, [pc, #356]	@ (8005d84 <fastestCar+0x598>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c22:	4b52      	ldr	r3, [pc, #328]	@ (8005d6c <fastestCar+0x580>)
 8005c24:	f8b3 2082 	ldrh.w	r2, [r3, #130]	@ 0x82
 8005c28:	4b56      	ldr	r3, [pc, #344]	@ (8005d84 <fastestCar+0x598>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	641a      	str	r2, [r3, #64]	@ 0x40
				Turn(&targetAngle);
 8005c2e:	4851      	ldr	r0, [pc, #324]	@ (8005d74 <fastestCar+0x588>)
 8005c30:	f7fd fc2a 	bl	8003488 <Turn>
				osDelay(5);
 8005c34:	2005      	movs	r0, #5
 8005c36:	f007 f8b9 	bl	800cdac <osDelay>
				//turn left forward
				//__SET_CMD_CONFIG(cfgs[CONFIG_FL00],&htim8,&htim1,targetAngle);
				//Turn(&targetAngle);
				//osDelay(5);
				//turn left forward
				FastestCar_Turn_L180(0);
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f7fd ff48 	bl	8003ad0 <FastestCar_Turn_L180>
				osDelay(10);
 8005c40:	200a      	movs	r0, #10
 8005c42:	f007 f8b3 	bl	800cdac <osDelay>
				__SET_CMD_CONFIG(cfgs[CONFIG_FR00],&htim8,&htim1,targetAngle);
 8005c46:	4b49      	ldr	r3, [pc, #292]	@ (8005d6c <fastestCar+0x580>)
 8005c48:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8005c4c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8005d88 <fastestCar+0x59c>
 8005c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c58:	dd01      	ble.n	8005c5e <fastestCar+0x472>
 8005c5a:	23f0      	movs	r3, #240	@ 0xf0
 8005c5c:	e012      	b.n	8005c84 <fastestCar+0x498>
 8005c5e:	4b43      	ldr	r3, [pc, #268]	@ (8005d6c <fastestCar+0x580>)
 8005c60:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8005c64:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8005d8c <fastestCar+0x5a0>
 8005c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c70:	d501      	bpl.n	8005c76 <fastestCar+0x48a>
 8005c72:	2353      	movs	r3, #83	@ 0x53
 8005c74:	e006      	b.n	8005c84 <fastestCar+0x498>
 8005c76:	4b3d      	ldr	r3, [pc, #244]	@ (8005d6c <fastestCar+0x580>)
 8005c78:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8005c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c80:	ee17 3a90 	vmov	r3, s15
 8005c84:	4a3a      	ldr	r2, [pc, #232]	@ (8005d70 <fastestCar+0x584>)
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c8a:	20fa      	movs	r0, #250	@ 0xfa
 8005c8c:	f001 fa46 	bl	800711c <HAL_Delay>
 8005c90:	4b36      	ldr	r3, [pc, #216]	@ (8005d6c <fastestCar+0x580>)
 8005c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c96:	4a37      	ldr	r2, [pc, #220]	@ (8005d74 <fastestCar+0x588>)
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	4b34      	ldr	r3, [pc, #208]	@ (8005d6c <fastestCar+0x580>)
 8005c9c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	bf0c      	ite	eq
 8005ca4:	2301      	moveq	r3, #1
 8005ca6:	2300      	movne	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005cb0:	4831      	ldr	r0, [pc, #196]	@ (8005d78 <fastestCar+0x58c>)
 8005cb2:	f002 fd05 	bl	80086c0 <HAL_GPIO_WritePin>
 8005cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8005d6c <fastestCar+0x580>)
 8005cb8:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bf14      	ite	ne
 8005cc0:	2301      	movne	r3, #1
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	2120      	movs	r1, #32
 8005cca:	482c      	ldr	r0, [pc, #176]	@ (8005d7c <fastestCar+0x590>)
 8005ccc:	f002 fcf8 	bl	80086c0 <HAL_GPIO_WritePin>
 8005cd0:	4b26      	ldr	r3, [pc, #152]	@ (8005d6c <fastestCar+0x580>)
 8005cd2:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bf0c      	ite	eq
 8005cda:	2301      	moveq	r3, #1
 8005cdc:	2300      	movne	r3, #0
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ce6:	4826      	ldr	r0, [pc, #152]	@ (8005d80 <fastestCar+0x594>)
 8005ce8:	f002 fcea 	bl	80086c0 <HAL_GPIO_WritePin>
 8005cec:	4b1f      	ldr	r3, [pc, #124]	@ (8005d6c <fastestCar+0x580>)
 8005cee:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	bf14      	ite	ne
 8005cf6:	2301      	movne	r3, #1
 8005cf8:	2300      	moveq	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d02:	481f      	ldr	r0, [pc, #124]	@ (8005d80 <fastestCar+0x594>)
 8005d04:	f002 fcdc 	bl	80086c0 <HAL_GPIO_WritePin>
 8005d08:	4b18      	ldr	r3, [pc, #96]	@ (8005d6c <fastestCar+0x580>)
 8005d0a:	f8b3 2080 	ldrh.w	r2, [r3, #128]	@ 0x80
 8005d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005d84 <fastestCar+0x598>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d14:	4b15      	ldr	r3, [pc, #84]	@ (8005d6c <fastestCar+0x580>)
 8005d16:	f8b3 2082 	ldrh.w	r2, [r3, #130]	@ 0x82
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005d84 <fastestCar+0x598>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	641a      	str	r2, [r3, #64]	@ 0x40
				Turn(&targetAngle);
 8005d20:	4814      	ldr	r0, [pc, #80]	@ (8005d74 <fastestCar+0x588>)
 8005d22:	f7fd fbb1 	bl	8003488 <Turn>
				osDelay(5);
 8005d26:	2005      	movs	r0, #5
 8005d28:	f007 f840 	bl	800cdac <osDelay>
				//turn right forward
				break;
 8005d2c:	f000 bcad 	b.w	800668a <fastestCar+0xe9e>
			case 4: // Move to obs 2
				obj2_dist = USavg();
 8005d30:	f7fd fc50 	bl	80035d4 <USavg>
 8005d34:	eef0 7a40 	vmov.f32	s15, s0
 8005d38:	4b15      	ldr	r3, [pc, #84]	@ (8005d90 <fastestCar+0x5a4>)
 8005d3a:	edc3 7a00 	vstr	s15, [r3]
				return_dist = 80 + obj2_dist;
 8005d3e:	4b14      	ldr	r3, [pc, #80]	@ (8005d90 <fastestCar+0x5a4>)
 8005d40:	edd3 7a00 	vldr	s15, [r3]
 8005d44:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8005d94 <fastestCar+0x5a8>
 8005d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d4c:	4b12      	ldr	r3, [pc, #72]	@ (8005d98 <fastestCar+0x5ac>)
 8005d4e:	edc3 7a00 	vstr	s15, [r3]
				targetDist = 20;
 8005d52:	4b12      	ldr	r3, [pc, #72]	@ (8005d9c <fastestCar+0x5b0>)
 8005d54:	4a12      	ldr	r2, [pc, #72]	@ (8005da0 <fastestCar+0x5b4>)
 8005d56:	601a      	str	r2, [r3, #0]
				MoveDistObstacleUS(&targetDist,SPEED_MODE_FAST);
 8005d58:	2102      	movs	r1, #2
 8005d5a:	4810      	ldr	r0, [pc, #64]	@ (8005d9c <fastestCar+0x5b0>)
 8005d5c:	f7fd fc68 	bl	8003630 <MoveDistObstacleUS>
				osDelay(5);
 8005d60:	2005      	movs	r0, #5
 8005d62:	f007 f823 	bl	800cdac <osDelay>
				// straight till next obstacle
				break;
 8005d66:	f000 bc90 	b.w	800668a <fastestCar+0xe9e>
 8005d6a:	bf00      	nop
 8005d6c:	2000000c 	.word	0x2000000c
 8005d70:	20000460 	.word	0x20000460
 8005d74:	20000794 	.word	0x20000794
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	40020800 	.word	0x40020800
 8005d80:	40020400 	.word	0x40020400
 8005d84:	200005c8 	.word	0x200005c8
 8005d88:	43700000 	.word	0x43700000
 8005d8c:	42a60000 	.word	0x42a60000
 8005d90:	200006d0 	.word	0x200006d0
 8005d94:	42a00000 	.word	0x42a00000
 8005d98:	200006d4 	.word	0x200006d4
 8005d9c:	200007a4 	.word	0x200007a4
 8005da0:	41a00000 	.word	0x41a00000
			case 30: // Clear obs 2 LEFT
				__SET_CMD_CONFIG(cfgs[CONFIG_FL00],&htim8,&htim1,targetAngle);
 8005da4:	4b92      	ldr	r3, [pc, #584]	@ (8005ff0 <fastestCar+0x804>)
 8005da6:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8005daa:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8005ff4 <fastestCar+0x808>
 8005dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db6:	dd01      	ble.n	8005dbc <fastestCar+0x5d0>
 8005db8:	23f0      	movs	r3, #240	@ 0xf0
 8005dba:	e012      	b.n	8005de2 <fastestCar+0x5f6>
 8005dbc:	4b8c      	ldr	r3, [pc, #560]	@ (8005ff0 <fastestCar+0x804>)
 8005dbe:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8005dc2:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8005ff8 <fastestCar+0x80c>
 8005dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dce:	d501      	bpl.n	8005dd4 <fastestCar+0x5e8>
 8005dd0:	2353      	movs	r3, #83	@ 0x53
 8005dd2:	e006      	b.n	8005de2 <fastestCar+0x5f6>
 8005dd4:	4b86      	ldr	r3, [pc, #536]	@ (8005ff0 <fastestCar+0x804>)
 8005dd6:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8005dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dde:	ee17 3a90 	vmov	r3, s15
 8005de2:	4a86      	ldr	r2, [pc, #536]	@ (8005ffc <fastestCar+0x810>)
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005de8:	20fa      	movs	r0, #250	@ 0xfa
 8005dea:	f001 f997 	bl	800711c <HAL_Delay>
 8005dee:	4b80      	ldr	r3, [pc, #512]	@ (8005ff0 <fastestCar+0x804>)
 8005df0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005df2:	4a83      	ldr	r2, [pc, #524]	@ (8006000 <fastestCar+0x814>)
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4b7e      	ldr	r3, [pc, #504]	@ (8005ff0 <fastestCar+0x804>)
 8005df8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bf0c      	ite	eq
 8005e00:	2301      	moveq	r3, #1
 8005e02:	2300      	movne	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e0c:	487d      	ldr	r0, [pc, #500]	@ (8006004 <fastestCar+0x818>)
 8005e0e:	f002 fc57 	bl	80086c0 <HAL_GPIO_WritePin>
 8005e12:	4b77      	ldr	r3, [pc, #476]	@ (8005ff0 <fastestCar+0x804>)
 8005e14:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	bf14      	ite	ne
 8005e1c:	2301      	movne	r3, #1
 8005e1e:	2300      	moveq	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	2120      	movs	r1, #32
 8005e26:	4878      	ldr	r0, [pc, #480]	@ (8006008 <fastestCar+0x81c>)
 8005e28:	f002 fc4a 	bl	80086c0 <HAL_GPIO_WritePin>
 8005e2c:	4b70      	ldr	r3, [pc, #448]	@ (8005ff0 <fastestCar+0x804>)
 8005e2e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bf0c      	ite	eq
 8005e36:	2301      	moveq	r3, #1
 8005e38:	2300      	movne	r3, #0
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e42:	4872      	ldr	r0, [pc, #456]	@ (800600c <fastestCar+0x820>)
 8005e44:	f002 fc3c 	bl	80086c0 <HAL_GPIO_WritePin>
 8005e48:	4b69      	ldr	r3, [pc, #420]	@ (8005ff0 <fastestCar+0x804>)
 8005e4a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	bf14      	ite	ne
 8005e52:	2301      	movne	r3, #1
 8005e54:	2300      	moveq	r3, #0
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e5e:	486b      	ldr	r0, [pc, #428]	@ (800600c <fastestCar+0x820>)
 8005e60:	f002 fc2e 	bl	80086c0 <HAL_GPIO_WritePin>
 8005e64:	4b62      	ldr	r3, [pc, #392]	@ (8005ff0 <fastestCar+0x804>)
 8005e66:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 8005e6a:	4b69      	ldr	r3, [pc, #420]	@ (8006010 <fastestCar+0x824>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005e70:	4b5f      	ldr	r3, [pc, #380]	@ (8005ff0 <fastestCar+0x804>)
 8005e72:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 8005e76:	4b66      	ldr	r3, [pc, #408]	@ (8006010 <fastestCar+0x824>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	641a      	str	r2, [r3, #64]	@ 0x40
				Turn(&targetAngle);
 8005e7c:	4860      	ldr	r0, [pc, #384]	@ (8006000 <fastestCar+0x814>)
 8005e7e:	f7fd fb03 	bl	8003488 <Turn>
				osDelay(1000);
 8005e82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e86:	f006 ff91 	bl	800cdac <osDelay>
				osDelay(10);
				}
				*/

				// RIGHT IR OVERSHOOT NEW CODE
				targetDist = 50;
 8005e8a:	4b62      	ldr	r3, [pc, #392]	@ (8006014 <fastestCar+0x828>)
 8005e8c:	4a62      	ldr	r2, [pc, #392]	@ (8006018 <fastestCar+0x82c>)
 8005e8e:	601a      	str	r2, [r3, #0]
				if (IR_distances[1] < 50){
 8005e90:	4b62      	ldr	r3, [pc, #392]	@ (800601c <fastestCar+0x830>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b31      	cmp	r3, #49	@ 0x31
 8005e96:	dc04      	bgt.n	8005ea2 <fastestCar+0x6b6>
				RobotMoveUntilIROvershootR();
 8005e98:	f7fd fdaa 	bl	80039f0 <RobotMoveUntilIROvershootR>
				osDelay(10);
 8005e9c:	200a      	movs	r0, #10
 8005e9e:	f006 ff85 	bl	800cdac <osDelay>
				}
				
				FastestCar_Turn_R180(0);
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f7fd fe74 	bl	8003b90 <FastestCar_Turn_R180>
				osDelay(10);
 8005ea8:	200a      	movs	r0, #10
 8005eaa:	f006 ff7f 	bl	800cdac <osDelay>
				osDelay(10);
				}
				*/

				// RIGHT IR HIT NEW CODE
				RobotMoveUntilIRHitR();
 8005eae:	f7fd fd2b 	bl	8003908 <RobotMoveUntilIRHitR>
				osDelay(10);
 8005eb2:	200a      	movs	r0, #10
 8005eb4:	f006 ff7a 	bl	800cdac <osDelay>
				break;
 8005eb8:	e3e7      	b.n	800668a <fastestCar+0xe9e>
				// RIGHT IR OVERSHOOT
				// MoveDistObstacleIR(&targetDist,1); //forward till IR do not see obstacle
				// osDelay(10);

				// RIGHT IR OVERSHOOT NEW CODE
				RobotMoveUntilIROvershootR();
 8005eba:	f7fd fd99 	bl	80039f0 <RobotMoveUntilIROvershootR>
				osDelay(10);
 8005ebe:	200a      	movs	r0, #10
 8005ec0:	f006 ff74 	bl	800cdac <osDelay>

				__SET_CMD_CONFIG(cfgs[CONFIG_FR00],&htim8,&htim1,targetAngle);
 8005ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8005ff0 <fastestCar+0x804>)
 8005ec6:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8005eca:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8005ff4 <fastestCar+0x808>
 8005ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed6:	dd01      	ble.n	8005edc <fastestCar+0x6f0>
 8005ed8:	23f0      	movs	r3, #240	@ 0xf0
 8005eda:	e012      	b.n	8005f02 <fastestCar+0x716>
 8005edc:	4b44      	ldr	r3, [pc, #272]	@ (8005ff0 <fastestCar+0x804>)
 8005ede:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8005ee2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8005ff8 <fastestCar+0x80c>
 8005ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eee:	d501      	bpl.n	8005ef4 <fastestCar+0x708>
 8005ef0:	2353      	movs	r3, #83	@ 0x53
 8005ef2:	e006      	b.n	8005f02 <fastestCar+0x716>
 8005ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ff0 <fastestCar+0x804>)
 8005ef6:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8005efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005efe:	ee17 3a90 	vmov	r3, s15
 8005f02:	4a3e      	ldr	r2, [pc, #248]	@ (8005ffc <fastestCar+0x810>)
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f08:	20fa      	movs	r0, #250	@ 0xfa
 8005f0a:	f001 f907 	bl	800711c <HAL_Delay>
 8005f0e:	4b38      	ldr	r3, [pc, #224]	@ (8005ff0 <fastestCar+0x804>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f14:	4a3a      	ldr	r2, [pc, #232]	@ (8006000 <fastestCar+0x814>)
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	4b35      	ldr	r3, [pc, #212]	@ (8005ff0 <fastestCar+0x804>)
 8005f1a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bf0c      	ite	eq
 8005f22:	2301      	moveq	r3, #1
 8005f24:	2300      	movne	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f2e:	4835      	ldr	r0, [pc, #212]	@ (8006004 <fastestCar+0x818>)
 8005f30:	f002 fbc6 	bl	80086c0 <HAL_GPIO_WritePin>
 8005f34:	4b2e      	ldr	r3, [pc, #184]	@ (8005ff0 <fastestCar+0x804>)
 8005f36:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bf14      	ite	ne
 8005f3e:	2301      	movne	r3, #1
 8005f40:	2300      	moveq	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	2120      	movs	r1, #32
 8005f48:	482f      	ldr	r0, [pc, #188]	@ (8006008 <fastestCar+0x81c>)
 8005f4a:	f002 fbb9 	bl	80086c0 <HAL_GPIO_WritePin>
 8005f4e:	4b28      	ldr	r3, [pc, #160]	@ (8005ff0 <fastestCar+0x804>)
 8005f50:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bf0c      	ite	eq
 8005f58:	2301      	moveq	r3, #1
 8005f5a:	2300      	movne	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f64:	4829      	ldr	r0, [pc, #164]	@ (800600c <fastestCar+0x820>)
 8005f66:	f002 fbab 	bl	80086c0 <HAL_GPIO_WritePin>
 8005f6a:	4b21      	ldr	r3, [pc, #132]	@ (8005ff0 <fastestCar+0x804>)
 8005f6c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bf14      	ite	ne
 8005f74:	2301      	movne	r3, #1
 8005f76:	2300      	moveq	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f80:	4822      	ldr	r0, [pc, #136]	@ (800600c <fastestCar+0x820>)
 8005f82:	f002 fb9d 	bl	80086c0 <HAL_GPIO_WritePin>
 8005f86:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff0 <fastestCar+0x804>)
 8005f88:	f8b3 2080 	ldrh.w	r2, [r3, #128]	@ 0x80
 8005f8c:	4b20      	ldr	r3, [pc, #128]	@ (8006010 <fastestCar+0x824>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005f92:	4b17      	ldr	r3, [pc, #92]	@ (8005ff0 <fastestCar+0x804>)
 8005f94:	f8b3 2082 	ldrh.w	r2, [r3, #130]	@ 0x82
 8005f98:	4b1d      	ldr	r3, [pc, #116]	@ (8006010 <fastestCar+0x824>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	641a      	str	r2, [r3, #64]	@ 0x40
				Turn(&targetAngle);
 8005f9e:	4818      	ldr	r0, [pc, #96]	@ (8006000 <fastestCar+0x814>)
 8005fa0:	f7fd fa72 	bl	8003488 <Turn>
				osDelay(10);
 8005fa4:	200a      	movs	r0, #10
 8005fa6:	f006 ff01 	bl	800cdac <osDelay>
				// turn right
				total_count_y = (int)return_dist;
 8005faa:	4b1d      	ldr	r3, [pc, #116]	@ (8006020 <fastestCar+0x834>)
 8005fac:	edd3 7a00 	vldr	s15, [r3]
 8005fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fb4:	ee17 2a90 	vmov	r2, s15
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8006024 <fastestCar+0x838>)
 8005fba:	601a      	str	r2, [r3, #0]
				break;
 8005fbc:	e365      	b.n	800668a <fastestCar+0xe9e>
			case 32: // Clear obs 2 RIGHT
				__SET_CMD_CONFIG(cfgs[CONFIG_FR00],&htim8,&htim1,targetAngle);
 8005fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff0 <fastestCar+0x804>)
 8005fc0:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8005fc4:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005ff4 <fastestCar+0x808>
 8005fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd0:	dd01      	ble.n	8005fd6 <fastestCar+0x7ea>
 8005fd2:	23f0      	movs	r3, #240	@ 0xf0
 8005fd4:	e02f      	b.n	8006036 <fastestCar+0x84a>
 8005fd6:	4b06      	ldr	r3, [pc, #24]	@ (8005ff0 <fastestCar+0x804>)
 8005fd8:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8005fdc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005ff8 <fastestCar+0x80c>
 8005fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe8:	d51e      	bpl.n	8006028 <fastestCar+0x83c>
 8005fea:	2353      	movs	r3, #83	@ 0x53
 8005fec:	e023      	b.n	8006036 <fastestCar+0x84a>
 8005fee:	bf00      	nop
 8005ff0:	2000000c 	.word	0x2000000c
 8005ff4:	43700000 	.word	0x43700000
 8005ff8:	42a60000 	.word	0x42a60000
 8005ffc:	20000460 	.word	0x20000460
 8006000:	20000794 	.word	0x20000794
 8006004:	40021000 	.word	0x40021000
 8006008:	40020800 	.word	0x40020800
 800600c:	40020400 	.word	0x40020400
 8006010:	200005c8 	.word	0x200005c8
 8006014:	200007a4 	.word	0x200007a4
 8006018:	42480000 	.word	0x42480000
 800601c:	2000072c 	.word	0x2000072c
 8006020:	200006d4 	.word	0x200006d4
 8006024:	2000074c 	.word	0x2000074c
 8006028:	4b8c      	ldr	r3, [pc, #560]	@ (800625c <fastestCar+0xa70>)
 800602a:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800602e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006032:	ee17 3a90 	vmov	r3, s15
 8006036:	4a8a      	ldr	r2, [pc, #552]	@ (8006260 <fastestCar+0xa74>)
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	6413      	str	r3, [r2, #64]	@ 0x40
 800603c:	20fa      	movs	r0, #250	@ 0xfa
 800603e:	f001 f86d 	bl	800711c <HAL_Delay>
 8006042:	4b86      	ldr	r3, [pc, #536]	@ (800625c <fastestCar+0xa70>)
 8006044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006048:	4a86      	ldr	r2, [pc, #536]	@ (8006264 <fastestCar+0xa78>)
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	4b83      	ldr	r3, [pc, #524]	@ (800625c <fastestCar+0xa70>)
 800604e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006062:	4881      	ldr	r0, [pc, #516]	@ (8006268 <fastestCar+0xa7c>)
 8006064:	f002 fb2c 	bl	80086c0 <HAL_GPIO_WritePin>
 8006068:	4b7c      	ldr	r3, [pc, #496]	@ (800625c <fastestCar+0xa70>)
 800606a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800606e:	2b00      	cmp	r3, #0
 8006070:	bf14      	ite	ne
 8006072:	2301      	movne	r3, #1
 8006074:	2300      	moveq	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	2120      	movs	r1, #32
 800607c:	487b      	ldr	r0, [pc, #492]	@ (800626c <fastestCar+0xa80>)
 800607e:	f002 fb1f 	bl	80086c0 <HAL_GPIO_WritePin>
 8006082:	4b76      	ldr	r3, [pc, #472]	@ (800625c <fastestCar+0xa70>)
 8006084:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8006088:	2b00      	cmp	r3, #0
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006098:	4875      	ldr	r0, [pc, #468]	@ (8006270 <fastestCar+0xa84>)
 800609a:	f002 fb11 	bl	80086c0 <HAL_GPIO_WritePin>
 800609e:	4b6f      	ldr	r3, [pc, #444]	@ (800625c <fastestCar+0xa70>)
 80060a0:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bf14      	ite	ne
 80060a8:	2301      	movne	r3, #1
 80060aa:	2300      	moveq	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80060b4:	486e      	ldr	r0, [pc, #440]	@ (8006270 <fastestCar+0xa84>)
 80060b6:	f002 fb03 	bl	80086c0 <HAL_GPIO_WritePin>
 80060ba:	4b68      	ldr	r3, [pc, #416]	@ (800625c <fastestCar+0xa70>)
 80060bc:	f8b3 2080 	ldrh.w	r2, [r3, #128]	@ 0x80
 80060c0:	4b6c      	ldr	r3, [pc, #432]	@ (8006274 <fastestCar+0xa88>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80060c6:	4b65      	ldr	r3, [pc, #404]	@ (800625c <fastestCar+0xa70>)
 80060c8:	f8b3 2082 	ldrh.w	r2, [r3, #130]	@ 0x82
 80060cc:	4b69      	ldr	r3, [pc, #420]	@ (8006274 <fastestCar+0xa88>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	641a      	str	r2, [r3, #64]	@ 0x40
				Turn(&targetAngle);
 80060d2:	4864      	ldr	r0, [pc, #400]	@ (8006264 <fastestCar+0xa78>)
 80060d4:	f7fd f9d8 	bl	8003488 <Turn>
				osDelay(1000);
 80060d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80060dc:	f006 fe66 	bl	800cdac <osDelay>
				osDelay(10);
				}
				*/

				// LEFT IR OVERSHOOT NEW CODE
				targetDist = 50;
 80060e0:	4b65      	ldr	r3, [pc, #404]	@ (8006278 <fastestCar+0xa8c>)
 80060e2:	4a66      	ldr	r2, [pc, #408]	@ (800627c <fastestCar+0xa90>)
 80060e4:	601a      	str	r2, [r3, #0]
				if (IR_distances[0] < 50){
 80060e6:	4b66      	ldr	r3, [pc, #408]	@ (8006280 <fastestCar+0xa94>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b31      	cmp	r3, #49	@ 0x31
 80060ec:	dc04      	bgt.n	80060f8 <fastestCar+0x90c>
				RobotMoveUntilIROvershootL();
 80060ee:	f7fd fcb7 	bl	8003a60 <RobotMoveUntilIROvershootL>
				osDelay(10);
 80060f2:	200a      	movs	r0, #10
 80060f4:	f006 fe5a 	bl	800cdac <osDelay>
				}

				FastestCar_Turn_L180(0);
 80060f8:	2000      	movs	r0, #0
 80060fa:	f7fd fce9 	bl	8003ad0 <FastestCar_Turn_L180>
				osDelay(10);
 80060fe:	200a      	movs	r0, #10
 8006100:	f006 fe54 	bl	800cdac <osDelay>
				osDelay(10);
				}
				*/

				// LEFT IR HIT NEW CODE
				RobotMoveUntilIRHitL();
 8006104:	f7fd fc3a 	bl	800397c <RobotMoveUntilIRHitL>
				osDelay(10);
 8006108:	200a      	movs	r0, #10
 800610a:	f006 fe4f 	bl	800cdac <osDelay>
				break;
 800610e:	e2bc      	b.n	800668a <fastestCar+0xe9e>
				// LEFT IR OVERSHOOT
				// MoveDistObstacleIR(&targetDist,0); //forward till IR do not see obstacle
				// osDelay(10);

				// LEFT IR OVERSHOOT NEW CODE
				RobotMoveUntilIROvershootL();
 8006110:	f7fd fca6 	bl	8003a60 <RobotMoveUntilIROvershootL>
				osDelay(10);
 8006114:	200a      	movs	r0, #10
 8006116:	f006 fe49 	bl	800cdac <osDelay>
				
				__SET_CMD_CONFIG(cfgs[CONFIG_FL00],&htim8,&htim1,targetAngle);
 800611a:	4b50      	ldr	r3, [pc, #320]	@ (800625c <fastestCar+0xa70>)
 800611c:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8006120:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006284 <fastestCar+0xa98>
 8006124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612c:	dd01      	ble.n	8006132 <fastestCar+0x946>
 800612e:	23f0      	movs	r3, #240	@ 0xf0
 8006130:	e012      	b.n	8006158 <fastestCar+0x96c>
 8006132:	4b4a      	ldr	r3, [pc, #296]	@ (800625c <fastestCar+0xa70>)
 8006134:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8006138:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8006288 <fastestCar+0xa9c>
 800613c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006144:	d501      	bpl.n	800614a <fastestCar+0x95e>
 8006146:	2353      	movs	r3, #83	@ 0x53
 8006148:	e006      	b.n	8006158 <fastestCar+0x96c>
 800614a:	4b44      	ldr	r3, [pc, #272]	@ (800625c <fastestCar+0xa70>)
 800614c:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8006150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006154:	ee17 3a90 	vmov	r3, s15
 8006158:	4a41      	ldr	r2, [pc, #260]	@ (8006260 <fastestCar+0xa74>)
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	6413      	str	r3, [r2, #64]	@ 0x40
 800615e:	20fa      	movs	r0, #250	@ 0xfa
 8006160:	f000 ffdc 	bl	800711c <HAL_Delay>
 8006164:	4b3d      	ldr	r3, [pc, #244]	@ (800625c <fastestCar+0xa70>)
 8006166:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006168:	4a3e      	ldr	r2, [pc, #248]	@ (8006264 <fastestCar+0xa78>)
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	4b3b      	ldr	r3, [pc, #236]	@ (800625c <fastestCar+0xa70>)
 800616e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006172:	2b00      	cmp	r3, #0
 8006174:	bf0c      	ite	eq
 8006176:	2301      	moveq	r3, #1
 8006178:	2300      	movne	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006182:	4839      	ldr	r0, [pc, #228]	@ (8006268 <fastestCar+0xa7c>)
 8006184:	f002 fa9c 	bl	80086c0 <HAL_GPIO_WritePin>
 8006188:	4b34      	ldr	r3, [pc, #208]	@ (800625c <fastestCar+0xa70>)
 800618a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800618e:	2b00      	cmp	r3, #0
 8006190:	bf14      	ite	ne
 8006192:	2301      	movne	r3, #1
 8006194:	2300      	moveq	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	2120      	movs	r1, #32
 800619c:	4833      	ldr	r0, [pc, #204]	@ (800626c <fastestCar+0xa80>)
 800619e:	f002 fa8f 	bl	80086c0 <HAL_GPIO_WritePin>
 80061a2:	4b2e      	ldr	r3, [pc, #184]	@ (800625c <fastestCar+0xa70>)
 80061a4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bf0c      	ite	eq
 80061ac:	2301      	moveq	r3, #1
 80061ae:	2300      	movne	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061b8:	482d      	ldr	r0, [pc, #180]	@ (8006270 <fastestCar+0xa84>)
 80061ba:	f002 fa81 	bl	80086c0 <HAL_GPIO_WritePin>
 80061be:	4b27      	ldr	r3, [pc, #156]	@ (800625c <fastestCar+0xa70>)
 80061c0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bf14      	ite	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	2300      	moveq	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80061d4:	4826      	ldr	r0, [pc, #152]	@ (8006270 <fastestCar+0xa84>)
 80061d6:	f002 fa73 	bl	80086c0 <HAL_GPIO_WritePin>
 80061da:	4b20      	ldr	r3, [pc, #128]	@ (800625c <fastestCar+0xa70>)
 80061dc:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 80061e0:	4b24      	ldr	r3, [pc, #144]	@ (8006274 <fastestCar+0xa88>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80061e6:	4b1d      	ldr	r3, [pc, #116]	@ (800625c <fastestCar+0xa70>)
 80061e8:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 80061ec:	4b21      	ldr	r3, [pc, #132]	@ (8006274 <fastestCar+0xa88>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	641a      	str	r2, [r3, #64]	@ 0x40
				Turn(&targetAngle);
 80061f2:	481c      	ldr	r0, [pc, #112]	@ (8006264 <fastestCar+0xa78>)
 80061f4:	f7fd f948 	bl	8003488 <Turn>
				osDelay(10);
 80061f8:	200a      	movs	r0, #10
 80061fa:	f006 fdd7 	bl	800cdac <osDelay>
				//turn left forward
				total_count_y = (int)return_dist;
 80061fe:	4b23      	ldr	r3, [pc, #140]	@ (800628c <fastestCar+0xaa0>)
 8006200:	edd3 7a00 	vldr	s15, [r3]
 8006204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006208:	ee17 2a90 	vmov	r2, s15
 800620c:	4b20      	ldr	r3, [pc, #128]	@ (8006290 <fastestCar+0xaa4>)
 800620e:	601a      	str	r2, [r3, #0]
				// clear obs 2 back
				break;
 8006210:	e23b      	b.n	800668a <fastestCar+0xe9e>
			case 38:
				targetDist = return_dist;
 8006212:	4b1e      	ldr	r3, [pc, #120]	@ (800628c <fastestCar+0xaa0>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a18      	ldr	r2, [pc, #96]	@ (8006278 <fastestCar+0xa8c>)
 8006218:	6013      	str	r3, [r2, #0]
				MoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_FAST);
 800621a:	2202      	movs	r2, #2
 800621c:	2101      	movs	r1, #1
 800621e:	4816      	ldr	r0, [pc, #88]	@ (8006278 <fastestCar+0xa8c>)
 8006220:	f7fc ffa6 	bl	8003170 <MoveDist>
				osDelay(10);
 8006224:	200a      	movs	r0, #10
 8006226:	f006 fdc1 	bl	800cdac <osDelay>
				break;
 800622a:	e22e      	b.n	800668a <fastestCar+0xe9e>
			case 40: // Return to carpark LEFT
				__SET_CMD_CONFIG(cfgs[CONFIG_FR00],&htim8,&htim1,targetAngle);
 800622c:	4b0b      	ldr	r3, [pc, #44]	@ (800625c <fastestCar+0xa70>)
 800622e:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8006232:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006284 <fastestCar+0xa98>
 8006236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623e:	dd01      	ble.n	8006244 <fastestCar+0xa58>
 8006240:	23f0      	movs	r3, #240	@ 0xf0
 8006242:	e02e      	b.n	80062a2 <fastestCar+0xab6>
 8006244:	4b05      	ldr	r3, [pc, #20]	@ (800625c <fastestCar+0xa70>)
 8006246:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800624a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006288 <fastestCar+0xa9c>
 800624e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006256:	d51d      	bpl.n	8006294 <fastestCar+0xaa8>
 8006258:	2353      	movs	r3, #83	@ 0x53
 800625a:	e022      	b.n	80062a2 <fastestCar+0xab6>
 800625c:	2000000c 	.word	0x2000000c
 8006260:	20000460 	.word	0x20000460
 8006264:	20000794 	.word	0x20000794
 8006268:	40021000 	.word	0x40021000
 800626c:	40020800 	.word	0x40020800
 8006270:	40020400 	.word	0x40020400
 8006274:	200005c8 	.word	0x200005c8
 8006278:	200007a4 	.word	0x200007a4
 800627c:	42480000 	.word	0x42480000
 8006280:	2000072c 	.word	0x2000072c
 8006284:	43700000 	.word	0x43700000
 8006288:	42a60000 	.word	0x42a60000
 800628c:	200006d4 	.word	0x200006d4
 8006290:	2000074c 	.word	0x2000074c
 8006294:	4b7b      	ldr	r3, [pc, #492]	@ (8006484 <fastestCar+0xc98>)
 8006296:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800629a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800629e:	ee17 3a90 	vmov	r3, s15
 80062a2:	4a79      	ldr	r2, [pc, #484]	@ (8006488 <fastestCar+0xc9c>)
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80062a8:	20fa      	movs	r0, #250	@ 0xfa
 80062aa:	f000 ff37 	bl	800711c <HAL_Delay>
 80062ae:	4b75      	ldr	r3, [pc, #468]	@ (8006484 <fastestCar+0xc98>)
 80062b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b4:	4a75      	ldr	r2, [pc, #468]	@ (800648c <fastestCar+0xca0>)
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	4b72      	ldr	r3, [pc, #456]	@ (8006484 <fastestCar+0xc98>)
 80062ba:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bf0c      	ite	eq
 80062c2:	2301      	moveq	r3, #1
 80062c4:	2300      	movne	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80062ce:	4870      	ldr	r0, [pc, #448]	@ (8006490 <fastestCar+0xca4>)
 80062d0:	f002 f9f6 	bl	80086c0 <HAL_GPIO_WritePin>
 80062d4:	4b6b      	ldr	r3, [pc, #428]	@ (8006484 <fastestCar+0xc98>)
 80062d6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bf14      	ite	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	2300      	moveq	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	2120      	movs	r1, #32
 80062e8:	486a      	ldr	r0, [pc, #424]	@ (8006494 <fastestCar+0xca8>)
 80062ea:	f002 f9e9 	bl	80086c0 <HAL_GPIO_WritePin>
 80062ee:	4b65      	ldr	r3, [pc, #404]	@ (8006484 <fastestCar+0xc98>)
 80062f0:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bf0c      	ite	eq
 80062f8:	2301      	moveq	r3, #1
 80062fa:	2300      	movne	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006304:	4864      	ldr	r0, [pc, #400]	@ (8006498 <fastestCar+0xcac>)
 8006306:	f002 f9db 	bl	80086c0 <HAL_GPIO_WritePin>
 800630a:	4b5e      	ldr	r3, [pc, #376]	@ (8006484 <fastestCar+0xc98>)
 800630c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8006310:	2b00      	cmp	r3, #0
 8006312:	bf14      	ite	ne
 8006314:	2301      	movne	r3, #1
 8006316:	2300      	moveq	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006320:	485d      	ldr	r0, [pc, #372]	@ (8006498 <fastestCar+0xcac>)
 8006322:	f002 f9cd 	bl	80086c0 <HAL_GPIO_WritePin>
 8006326:	4b57      	ldr	r3, [pc, #348]	@ (8006484 <fastestCar+0xc98>)
 8006328:	f8b3 2080 	ldrh.w	r2, [r3, #128]	@ 0x80
 800632c:	4b5b      	ldr	r3, [pc, #364]	@ (800649c <fastestCar+0xcb0>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006332:	4b54      	ldr	r3, [pc, #336]	@ (8006484 <fastestCar+0xc98>)
 8006334:	f8b3 2082 	ldrh.w	r2, [r3, #130]	@ 0x82
 8006338:	4b58      	ldr	r3, [pc, #352]	@ (800649c <fastestCar+0xcb0>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	641a      	str	r2, [r3, #64]	@ 0x40
				Turn(&targetAngle);
 800633e:	4853      	ldr	r0, [pc, #332]	@ (800648c <fastestCar+0xca0>)
 8006340:	f7fd f8a2 	bl	8003488 <Turn>
				osDelay(1000);
 8006344:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006348:	f006 fd30 	bl	800cdac <osDelay>
				__GET_ENCODER_DELTA(encoder_count1,encoder_count2,encoder_count_negative_delta_x,&htim8);
				osDelay(10);
				*/

				// RIGHT IR HIT NEW CODE
				RobotMoveUntilIRHitR();
 800634c:	f7fd fadc 	bl	8003908 <RobotMoveUntilIRHitR>
				osDelay(1000);
 8006350:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006354:	f006 fd2a 	bl	800cdac <osDelay>

				targetDist = 15;
 8006358:	4b51      	ldr	r3, [pc, #324]	@ (80064a0 <fastestCar+0xcb4>)
 800635a:	4a52      	ldr	r2, [pc, #328]	@ (80064a4 <fastestCar+0xcb8>)
 800635c:	601a      	str	r2, [r3, #0]
				MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_FAST);
 800635e:	2202      	movs	r2, #2
 8006360:	2100      	movs	r1, #0
 8006362:	484f      	ldr	r0, [pc, #316]	@ (80064a0 <fastestCar+0xcb4>)
 8006364:	f7fc ff04 	bl	8003170 <MoveDist>
				osDelay(10);
 8006368:	200a      	movs	r0, #10
 800636a:	f006 fd1f 	bl	800cdac <osDelay>

				__SET_CMD_CONFIG(cfgs[CONFIG_FL00],&htim8,&htim1,targetAngle);
 800636e:	4b45      	ldr	r3, [pc, #276]	@ (8006484 <fastestCar+0xc98>)
 8006370:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8006374:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80064a8 <fastestCar+0xcbc>
 8006378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800637c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006380:	dd01      	ble.n	8006386 <fastestCar+0xb9a>
 8006382:	23f0      	movs	r3, #240	@ 0xf0
 8006384:	e012      	b.n	80063ac <fastestCar+0xbc0>
 8006386:	4b3f      	ldr	r3, [pc, #252]	@ (8006484 <fastestCar+0xc98>)
 8006388:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 800638c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80064ac <fastestCar+0xcc0>
 8006390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006398:	d501      	bpl.n	800639e <fastestCar+0xbb2>
 800639a:	2353      	movs	r3, #83	@ 0x53
 800639c:	e006      	b.n	80063ac <fastestCar+0xbc0>
 800639e:	4b39      	ldr	r3, [pc, #228]	@ (8006484 <fastestCar+0xc98>)
 80063a0:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 80063a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063a8:	ee17 3a90 	vmov	r3, s15
 80063ac:	4a36      	ldr	r2, [pc, #216]	@ (8006488 <fastestCar+0xc9c>)
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80063b2:	20fa      	movs	r0, #250	@ 0xfa
 80063b4:	f000 feb2 	bl	800711c <HAL_Delay>
 80063b8:	4b32      	ldr	r3, [pc, #200]	@ (8006484 <fastestCar+0xc98>)
 80063ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063bc:	4a33      	ldr	r2, [pc, #204]	@ (800648c <fastestCar+0xca0>)
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	4b30      	ldr	r3, [pc, #192]	@ (8006484 <fastestCar+0xc98>)
 80063c2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bf0c      	ite	eq
 80063ca:	2301      	moveq	r3, #1
 80063cc:	2300      	movne	r3, #0
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80063d6:	482e      	ldr	r0, [pc, #184]	@ (8006490 <fastestCar+0xca4>)
 80063d8:	f002 f972 	bl	80086c0 <HAL_GPIO_WritePin>
 80063dc:	4b29      	ldr	r3, [pc, #164]	@ (8006484 <fastestCar+0xc98>)
 80063de:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	bf14      	ite	ne
 80063e6:	2301      	movne	r3, #1
 80063e8:	2300      	moveq	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	2120      	movs	r1, #32
 80063f0:	4828      	ldr	r0, [pc, #160]	@ (8006494 <fastestCar+0xca8>)
 80063f2:	f002 f965 	bl	80086c0 <HAL_GPIO_WritePin>
 80063f6:	4b23      	ldr	r3, [pc, #140]	@ (8006484 <fastestCar+0xc98>)
 80063f8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bf0c      	ite	eq
 8006400:	2301      	moveq	r3, #1
 8006402:	2300      	movne	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800640c:	4822      	ldr	r0, [pc, #136]	@ (8006498 <fastestCar+0xcac>)
 800640e:	f002 f957 	bl	80086c0 <HAL_GPIO_WritePin>
 8006412:	4b1c      	ldr	r3, [pc, #112]	@ (8006484 <fastestCar+0xc98>)
 8006414:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006418:	2b00      	cmp	r3, #0
 800641a:	bf14      	ite	ne
 800641c:	2301      	movne	r3, #1
 800641e:	2300      	moveq	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006428:	481b      	ldr	r0, [pc, #108]	@ (8006498 <fastestCar+0xcac>)
 800642a:	f002 f949 	bl	80086c0 <HAL_GPIO_WritePin>
 800642e:	4b15      	ldr	r3, [pc, #84]	@ (8006484 <fastestCar+0xc98>)
 8006430:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 8006434:	4b19      	ldr	r3, [pc, #100]	@ (800649c <fastestCar+0xcb0>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	63da      	str	r2, [r3, #60]	@ 0x3c
 800643a:	4b12      	ldr	r3, [pc, #72]	@ (8006484 <fastestCar+0xc98>)
 800643c:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 8006440:	4b16      	ldr	r3, [pc, #88]	@ (800649c <fastestCar+0xcb0>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	641a      	str	r2, [r3, #64]	@ 0x40
				Turn(&targetAngle);
 8006446:	4811      	ldr	r0, [pc, #68]	@ (800648c <fastestCar+0xca0>)
 8006448:	f7fd f81e 	bl	8003488 <Turn>
				osDelay(10);
 800644c:	200a      	movs	r0, #10
 800644e:	f006 fcad 	bl	800cdac <osDelay>
				// turn left
				break;
 8006452:	e11a      	b.n	800668a <fastestCar+0xe9e>
			case 41: // Return to carpark RIGHT
				__SET_CMD_CONFIG(cfgs[CONFIG_FL00],&htim8,&htim1,targetAngle);
 8006454:	4b0b      	ldr	r3, [pc, #44]	@ (8006484 <fastestCar+0xc98>)
 8006456:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 800645a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80064a8 <fastestCar+0xcbc>
 800645e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006466:	dd01      	ble.n	800646c <fastestCar+0xc80>
 8006468:	23f0      	movs	r3, #240	@ 0xf0
 800646a:	e028      	b.n	80064be <fastestCar+0xcd2>
 800646c:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <fastestCar+0xc98>)
 800646e:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8006472:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80064ac <fastestCar+0xcc0>
 8006476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800647a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800647e:	d517      	bpl.n	80064b0 <fastestCar+0xcc4>
 8006480:	2353      	movs	r3, #83	@ 0x53
 8006482:	e01c      	b.n	80064be <fastestCar+0xcd2>
 8006484:	2000000c 	.word	0x2000000c
 8006488:	20000460 	.word	0x20000460
 800648c:	20000794 	.word	0x20000794
 8006490:	40021000 	.word	0x40021000
 8006494:	40020800 	.word	0x40020800
 8006498:	40020400 	.word	0x40020400
 800649c:	200005c8 	.word	0x200005c8
 80064a0:	200007a4 	.word	0x200007a4
 80064a4:	41700000 	.word	0x41700000
 80064a8:	43700000 	.word	0x43700000
 80064ac:	42a60000 	.word	0x42a60000
 80064b0:	4ba9      	ldr	r3, [pc, #676]	@ (8006758 <fastestCar+0xf6c>)
 80064b2:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 80064b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ba:	ee17 3a90 	vmov	r3, s15
 80064be:	4aa7      	ldr	r2, [pc, #668]	@ (800675c <fastestCar+0xf70>)
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80064c4:	20fa      	movs	r0, #250	@ 0xfa
 80064c6:	f000 fe29 	bl	800711c <HAL_Delay>
 80064ca:	4ba3      	ldr	r3, [pc, #652]	@ (8006758 <fastestCar+0xf6c>)
 80064cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064ce:	4aa4      	ldr	r2, [pc, #656]	@ (8006760 <fastestCar+0xf74>)
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	4ba1      	ldr	r3, [pc, #644]	@ (8006758 <fastestCar+0xf6c>)
 80064d4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bf0c      	ite	eq
 80064dc:	2301      	moveq	r3, #1
 80064de:	2300      	movne	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80064e8:	489e      	ldr	r0, [pc, #632]	@ (8006764 <fastestCar+0xf78>)
 80064ea:	f002 f8e9 	bl	80086c0 <HAL_GPIO_WritePin>
 80064ee:	4b9a      	ldr	r3, [pc, #616]	@ (8006758 <fastestCar+0xf6c>)
 80064f0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	bf14      	ite	ne
 80064f8:	2301      	movne	r3, #1
 80064fa:	2300      	moveq	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	461a      	mov	r2, r3
 8006500:	2120      	movs	r1, #32
 8006502:	4899      	ldr	r0, [pc, #612]	@ (8006768 <fastestCar+0xf7c>)
 8006504:	f002 f8dc 	bl	80086c0 <HAL_GPIO_WritePin>
 8006508:	4b93      	ldr	r3, [pc, #588]	@ (8006758 <fastestCar+0xf6c>)
 800650a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800650e:	2b00      	cmp	r3, #0
 8006510:	bf0c      	ite	eq
 8006512:	2301      	moveq	r3, #1
 8006514:	2300      	movne	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	461a      	mov	r2, r3
 800651a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800651e:	4893      	ldr	r0, [pc, #588]	@ (800676c <fastestCar+0xf80>)
 8006520:	f002 f8ce 	bl	80086c0 <HAL_GPIO_WritePin>
 8006524:	4b8c      	ldr	r3, [pc, #560]	@ (8006758 <fastestCar+0xf6c>)
 8006526:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800652a:	2b00      	cmp	r3, #0
 800652c:	bf14      	ite	ne
 800652e:	2301      	movne	r3, #1
 8006530:	2300      	moveq	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	461a      	mov	r2, r3
 8006536:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800653a:	488c      	ldr	r0, [pc, #560]	@ (800676c <fastestCar+0xf80>)
 800653c:	f002 f8c0 	bl	80086c0 <HAL_GPIO_WritePin>
 8006540:	4b85      	ldr	r3, [pc, #532]	@ (8006758 <fastestCar+0xf6c>)
 8006542:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 8006546:	4b8a      	ldr	r3, [pc, #552]	@ (8006770 <fastestCar+0xf84>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800654c:	4b82      	ldr	r3, [pc, #520]	@ (8006758 <fastestCar+0xf6c>)
 800654e:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 8006552:	4b87      	ldr	r3, [pc, #540]	@ (8006770 <fastestCar+0xf84>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	641a      	str	r2, [r3, #64]	@ 0x40
				Turn(&targetAngle);
 8006558:	4881      	ldr	r0, [pc, #516]	@ (8006760 <fastestCar+0xf74>)
 800655a:	f7fc ff95 	bl	8003488 <Turn>
				osDelay(1000);
 800655e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006562:	f006 fc23 	bl	800cdac <osDelay>
				__GET_ENCODER_DELTA(encoder_count1,encoder_count2,encoder_count_negative_delta_x,&htim8);
				osDelay(10);
				*/

				// LEFT IR HIT NEW CODE
				RobotMoveUntilIRHitL();
 8006566:	f7fd fa09 	bl	800397c <RobotMoveUntilIRHitL>
				osDelay(10);
 800656a:	200a      	movs	r0, #10
 800656c:	f006 fc1e 	bl	800cdac <osDelay>

				targetDist = 15;
 8006570:	4b80      	ldr	r3, [pc, #512]	@ (8006774 <fastestCar+0xf88>)
 8006572:	4a81      	ldr	r2, [pc, #516]	@ (8006778 <fastestCar+0xf8c>)
 8006574:	601a      	str	r2, [r3, #0]
				MoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_FAST);
 8006576:	2202      	movs	r2, #2
 8006578:	2100      	movs	r1, #0
 800657a:	487e      	ldr	r0, [pc, #504]	@ (8006774 <fastestCar+0xf88>)
 800657c:	f7fc fdf8 	bl	8003170 <MoveDist>
				osDelay(10);
 8006580:	200a      	movs	r0, #10
 8006582:	f006 fc13 	bl	800cdac <osDelay>

				__SET_CMD_CONFIG(cfgs[CONFIG_FR00],&htim8,&htim1,targetAngle);
 8006586:	4b74      	ldr	r3, [pc, #464]	@ (8006758 <fastestCar+0xf6c>)
 8006588:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800658c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800677c <fastestCar+0xf90>
 8006590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006598:	dd01      	ble.n	800659e <fastestCar+0xdb2>
 800659a:	23f0      	movs	r3, #240	@ 0xf0
 800659c:	e012      	b.n	80065c4 <fastestCar+0xdd8>
 800659e:	4b6e      	ldr	r3, [pc, #440]	@ (8006758 <fastestCar+0xf6c>)
 80065a0:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 80065a4:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8006780 <fastestCar+0xf94>
 80065a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b0:	d501      	bpl.n	80065b6 <fastestCar+0xdca>
 80065b2:	2353      	movs	r3, #83	@ 0x53
 80065b4:	e006      	b.n	80065c4 <fastestCar+0xdd8>
 80065b6:	4b68      	ldr	r3, [pc, #416]	@ (8006758 <fastestCar+0xf6c>)
 80065b8:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 80065bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c0:	ee17 3a90 	vmov	r3, s15
 80065c4:	4a65      	ldr	r2, [pc, #404]	@ (800675c <fastestCar+0xf70>)
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80065ca:	20fa      	movs	r0, #250	@ 0xfa
 80065cc:	f000 fda6 	bl	800711c <HAL_Delay>
 80065d0:	4b61      	ldr	r3, [pc, #388]	@ (8006758 <fastestCar+0xf6c>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d6:	4a62      	ldr	r2, [pc, #392]	@ (8006760 <fastestCar+0xf74>)
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	4b5f      	ldr	r3, [pc, #380]	@ (8006758 <fastestCar+0xf6c>)
 80065dc:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bf0c      	ite	eq
 80065e4:	2301      	moveq	r3, #1
 80065e6:	2300      	movne	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80065f0:	485c      	ldr	r0, [pc, #368]	@ (8006764 <fastestCar+0xf78>)
 80065f2:	f002 f865 	bl	80086c0 <HAL_GPIO_WritePin>
 80065f6:	4b58      	ldr	r3, [pc, #352]	@ (8006758 <fastestCar+0xf6c>)
 80065f8:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	2120      	movs	r1, #32
 800660a:	4857      	ldr	r0, [pc, #348]	@ (8006768 <fastestCar+0xf7c>)
 800660c:	f002 f858 	bl	80086c0 <HAL_GPIO_WritePin>
 8006610:	4b51      	ldr	r3, [pc, #324]	@ (8006758 <fastestCar+0xf6c>)
 8006612:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf0c      	ite	eq
 800661a:	2301      	moveq	r3, #1
 800661c:	2300      	movne	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006626:	4851      	ldr	r0, [pc, #324]	@ (800676c <fastestCar+0xf80>)
 8006628:	f002 f84a 	bl	80086c0 <HAL_GPIO_WritePin>
 800662c:	4b4a      	ldr	r3, [pc, #296]	@ (8006758 <fastestCar+0xf6c>)
 800662e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8006632:	2b00      	cmp	r3, #0
 8006634:	bf14      	ite	ne
 8006636:	2301      	movne	r3, #1
 8006638:	2300      	moveq	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	461a      	mov	r2, r3
 800663e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006642:	484a      	ldr	r0, [pc, #296]	@ (800676c <fastestCar+0xf80>)
 8006644:	f002 f83c 	bl	80086c0 <HAL_GPIO_WritePin>
 8006648:	4b43      	ldr	r3, [pc, #268]	@ (8006758 <fastestCar+0xf6c>)
 800664a:	f8b3 2080 	ldrh.w	r2, [r3, #128]	@ 0x80
 800664e:	4b48      	ldr	r3, [pc, #288]	@ (8006770 <fastestCar+0xf84>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006654:	4b40      	ldr	r3, [pc, #256]	@ (8006758 <fastestCar+0xf6c>)
 8006656:	f8b3 2082 	ldrh.w	r2, [r3, #130]	@ 0x82
 800665a:	4b45      	ldr	r3, [pc, #276]	@ (8006770 <fastestCar+0xf84>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	641a      	str	r2, [r3, #64]	@ 0x40
				Turn(&targetAngle);
 8006660:	483f      	ldr	r0, [pc, #252]	@ (8006760 <fastestCar+0xf74>)
 8006662:	f7fc ff11 	bl	8003488 <Turn>
				osDelay(10);
 8006666:	200a      	movs	r0, #10
 8006668:	f006 fba0 	bl	800cdac <osDelay>
				// turn right
				break;
 800666c:	e00d      	b.n	800668a <fastestCar+0xe9e>
			case 60: // L180
				FastestCar_Turn_L180(0);
 800666e:	2000      	movs	r0, #0
 8006670:	f7fd fa2e 	bl	8003ad0 <FastestCar_Turn_L180>
				osDelay(10);
 8006674:	200a      	movs	r0, #10
 8006676:	f006 fb99 	bl	800cdac <osDelay>
				// turn left 180
				break;
 800667a:	e006      	b.n	800668a <fastestCar+0xe9e>
			case 61: // R180
				FastestCar_Turn_R180(0);
 800667c:	2000      	movs	r0, #0
 800667e:	f7fd fa87 	bl	8003b90 <FastestCar_Turn_R180>
				osDelay(10);
 8006682:	200a      	movs	r0, #10
 8006684:	f006 fb92 	bl	800cdac <osDelay>
				// turn right 180
				break;
 8006688:	bf00      	nop
			//11. DTXX to base until XXcm away from size of base
			//12. Turn R/L 90
			//13. Turn L/R 90
			//14. Move into base DTXX

			total_count_y += encoder_count_positive_delta_y;
 800668a:	4b3e      	ldr	r3, [pc, #248]	@ (8006784 <fastestCar+0xf98>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	4b3e      	ldr	r3, [pc, #248]	@ (8006788 <fastestCar+0xf9c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4413      	add	r3, r2
 8006694:	4a3b      	ldr	r2, [pc, #236]	@ (8006784 <fastestCar+0xf98>)
 8006696:	6013      	str	r3, [r2, #0]
			total_count_y -= encoder_count_negative_delta_y;
 8006698:	4b3a      	ldr	r3, [pc, #232]	@ (8006784 <fastestCar+0xf98>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	4b3b      	ldr	r3, [pc, #236]	@ (800678c <fastestCar+0xfa0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	4a38      	ldr	r2, [pc, #224]	@ (8006784 <fastestCar+0xf98>)
 80066a4:	6013      	str	r3, [r2, #0]
			total_count_x += encoder_count_positive_delta_x;
 80066a6:	4b3a      	ldr	r3, [pc, #232]	@ (8006790 <fastestCar+0xfa4>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	4b3a      	ldr	r3, [pc, #232]	@ (8006794 <fastestCar+0xfa8>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4413      	add	r3, r2
 80066b0:	4a37      	ldr	r2, [pc, #220]	@ (8006790 <fastestCar+0xfa4>)
 80066b2:	6013      	str	r3, [r2, #0]
			total_count_x -= encoder_count_negative_delta_x;
 80066b4:	4b36      	ldr	r3, [pc, #216]	@ (8006790 <fastestCar+0xfa4>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	4b37      	ldr	r3, [pc, #220]	@ (8006798 <fastestCar+0xfac>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	4a34      	ldr	r2, [pc, #208]	@ (8006790 <fastestCar+0xfa4>)
 80066c0:	6013      	str	r3, [r2, #0]
			encoder_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim2);
 80066c2:	4b36      	ldr	r3, [pc, #216]	@ (800679c <fastestCar+0xfb0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c8:	4a35      	ldr	r2, [pc, #212]	@ (80067a0 <fastestCar+0xfb4>)
 80066ca:	6013      	str	r3, [r2, #0]
			encoder_count2 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim3);
 80066cc:	4b35      	ldr	r3, [pc, #212]	@ (80067a4 <fastestCar+0xfb8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d2:	4a35      	ldr	r2, [pc, #212]	@ (80067a8 <fastestCar+0xfbc>)
 80066d4:	6013      	str	r3, [r2, #0]
			encoder_count_positive_delta_x = 0;
 80066d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006794 <fastestCar+0xfa8>)
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
			encoder_count_positive_delta_y = 0;
 80066dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006788 <fastestCar+0xf9c>)
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
			encoder_count_negative_delta_x = 0;
 80066e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006798 <fastestCar+0xfac>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
			encoder_count_negative_delta_y = 0;
 80066e8:	4b28      	ldr	r3, [pc, #160]	@ (800678c <fastestCar+0xfa0>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]
			osDelay(50);
 80066ee:	2032      	movs	r0, #50	@ 0x32
 80066f0:	f006 fb5c 	bl	800cdac <osDelay>

			  __TASK_END(&htim8, prevTask, curTask);
 80066f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006770 <fastestCar+0xf84>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2200      	movs	r2, #0
 80066fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80066fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006770 <fastestCar+0xf84>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2200      	movs	r2, #0
 8006702:	641a      	str	r2, [r3, #64]	@ 0x40
 8006704:	4b29      	ldr	r3, [pc, #164]	@ (80067ac <fastestCar+0xfc0>)
 8006706:	781a      	ldrb	r2, [r3, #0]
 8006708:	4b29      	ldr	r3, [pc, #164]	@ (80067b0 <fastestCar+0xfc4>)
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	4b27      	ldr	r3, [pc, #156]	@ (80067ac <fastestCar+0xfc0>)
 800670e:	220b      	movs	r2, #11
 8006710:	701a      	strb	r2, [r3, #0]
				btnClicked = 0;
 8006712:	4b28      	ldr	r3, [pc, #160]	@ (80067b4 <fastestCar+0xfc8>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]
				prevTask = curTask;
 8006718:	4b24      	ldr	r3, [pc, #144]	@ (80067ac <fastestCar+0xfc0>)
 800671a:	781a      	ldrb	r2, [r3, #0]
 800671c:	4b24      	ldr	r3, [pc, #144]	@ (80067b0 <fastestCar+0xfc4>)
 800671e:	701a      	strb	r2, [r3, #0]
				curTask = TASK_NONE;
 8006720:	4b22      	ldr	r3, [pc, #136]	@ (80067ac <fastestCar+0xfc0>)
 8006722:	220b      	movs	r2, #11
 8006724:	701a      	strb	r2, [r3, #0]
			if (__IS_EMPTY(cmdq)) {
 8006726:	4b24      	ldr	r3, [pc, #144]	@ (80067b8 <fastestCar+0xfcc>)
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	4b23      	ldr	r3, [pc, #140]	@ (80067b8 <fastestCar+0xfcc>)
 800672c:	785b      	ldrb	r3, [r3, #1]
 800672e:	429a      	cmp	r2, r3
 8006730:	d14e      	bne.n	80067d0 <fastestCar+0xfe4>
				__CLEAR_CURCMD(curCmd);
 8006732:	4b22      	ldr	r3, [pc, #136]	@ (80067bc <fastestCar+0xfd0>)
 8006734:	2264      	movs	r2, #100	@ 0x64
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	4b20      	ldr	r3, [pc, #128]	@ (80067bc <fastestCar+0xfd0>)
 800673a:	2200      	movs	r2, #0
 800673c:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, msg);
 800673e:	4a20      	ldr	r2, [pc, #128]	@ (80067c0 <fastestCar+0xfd4>)
 8006740:	210f      	movs	r1, #15
 8006742:	4820      	ldr	r0, [pc, #128]	@ (80067c4 <fastestCar+0xfd8>)
 8006744:	f009 ffdc 	bl	8010700 <sniprintf>
 8006748:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800674c:	2206      	movs	r2, #6
 800674e:	491e      	ldr	r1, [pc, #120]	@ (80067c8 <fastestCar+0xfdc>)
 8006750:	481e      	ldr	r0, [pc, #120]	@ (80067cc <fastestCar+0xfe0>)
 8006752:	f005 fa15 	bl	800bb80 <HAL_UART_Transmit>
 8006756:	e055      	b.n	8006804 <fastestCar+0x1018>
 8006758:	2000000c 	.word	0x2000000c
 800675c:	20000460 	.word	0x20000460
 8006760:	20000794 	.word	0x20000794
 8006764:	40021000 	.word	0x40021000
 8006768:	40020800 	.word	0x40020800
 800676c:	40020400 	.word	0x40020400
 8006770:	200005c8 	.word	0x200005c8
 8006774:	200007a4 	.word	0x200007a4
 8006778:	41700000 	.word	0x41700000
 800677c:	43700000 	.word	0x43700000
 8006780:	42a60000 	.word	0x42a60000
 8006784:	2000074c 	.word	0x2000074c
 8006788:	20000740 	.word	0x20000740
 800678c:	20000748 	.word	0x20000748
 8006790:	20000750 	.word	0x20000750
 8006794:	2000073c 	.word	0x2000073c
 8006798:	20000744 	.word	0x20000744
 800679c:	200004a8 	.word	0x200004a8
 80067a0:	20000734 	.word	0x20000734
 80067a4:	200004f0 	.word	0x200004f0
 80067a8:	20000738 	.word	0x20000738
 80067ac:	20000000 	.word	0x20000000
 80067b0:	20000001 	.word	0x20000001
 80067b4:	20000698 	.word	0x20000698
 80067b8:	200007b8 	.word	0x200007b8
 80067bc:	200007b4 	.word	0x200007b4
 80067c0:	08013970 	.word	0x08013970
 80067c4:	200007f0 	.word	0x200007f0
 80067c8:	08013978 	.word	0x08013978
 80067cc:	20000610 	.word	0x20000610
			} else __READ_CMD(cmdq, curCmd, msg);
 80067d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006810 <fastestCar+0x1024>)
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	4a0f      	ldr	r2, [pc, #60]	@ (8006814 <fastestCar+0x1028>)
 80067d6:	490e      	ldr	r1, [pc, #56]	@ (8006810 <fastestCar+0x1024>)
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006810 <fastestCar+0x1024>)
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	3301      	adds	r3, #1
 80067e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006810 <fastestCar+0x1024>)
 80067e8:	7892      	ldrb	r2, [r2, #2]
 80067ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80067ee:	fb01 f202 	mul.w	r2, r1, r2
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <fastestCar+0x1024>)
 80067f8:	705a      	strb	r2, [r3, #1]
 80067fa:	4a07      	ldr	r2, [pc, #28]	@ (8006818 <fastestCar+0x102c>)
 80067fc:	210f      	movs	r1, #15
 80067fe:	4807      	ldr	r0, [pc, #28]	@ (800681c <fastestCar+0x1030>)
 8006800:	f009 ff7e 	bl	8010700 <sniprintf>

	}
    osDelay(1);
 8006804:	2001      	movs	r0, #1
 8006806:	f006 fad1 	bl	800cdac <osDelay>
	if(curTask != TASK_FASTESTCAR) osDelay(1000);
 800680a:	f7fe bff3 	b.w	80057f4 <fastestCar+0x8>
 800680e:	bf00      	nop
 8006810:	200007b8 	.word	0x200007b8
 8006814:	200007b4 	.word	0x200007b4
 8006818:	08013980 	.word	0x08013980
 800681c:	200007f0 	.word	0x200007f0

08006820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006824:	b672      	cpsid	i
}
 8006826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006828:	bf00      	nop
 800682a:	e7fd      	b.n	8006828 <Error_Handler+0x8>

0800682c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006832:	2300      	movs	r3, #0
 8006834:	607b      	str	r3, [r7, #4]
 8006836:	4b12      	ldr	r3, [pc, #72]	@ (8006880 <HAL_MspInit+0x54>)
 8006838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683a:	4a11      	ldr	r2, [pc, #68]	@ (8006880 <HAL_MspInit+0x54>)
 800683c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006840:	6453      	str	r3, [r2, #68]	@ 0x44
 8006842:	4b0f      	ldr	r3, [pc, #60]	@ (8006880 <HAL_MspInit+0x54>)
 8006844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800684a:	607b      	str	r3, [r7, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800684e:	2300      	movs	r3, #0
 8006850:	603b      	str	r3, [r7, #0]
 8006852:	4b0b      	ldr	r3, [pc, #44]	@ (8006880 <HAL_MspInit+0x54>)
 8006854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006856:	4a0a      	ldr	r2, [pc, #40]	@ (8006880 <HAL_MspInit+0x54>)
 8006858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800685c:	6413      	str	r3, [r2, #64]	@ 0x40
 800685e:	4b08      	ldr	r3, [pc, #32]	@ (8006880 <HAL_MspInit+0x54>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800686a:	2200      	movs	r2, #0
 800686c:	210f      	movs	r1, #15
 800686e:	f06f 0001 	mvn.w	r0, #1
 8006872:	f001 f950 	bl	8007b16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006876:	bf00      	nop
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40023800 	.word	0x40023800

08006884 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	@ 0x28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800688c:	f107 0314 	add.w	r3, r7, #20
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	605a      	str	r2, [r3, #4]
 8006896:	609a      	str	r2, [r3, #8]
 8006898:	60da      	str	r2, [r3, #12]
 800689a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a2f      	ldr	r2, [pc, #188]	@ (8006960 <HAL_ADC_MspInit+0xdc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d157      	bne.n	8006956 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80068a6:	2300      	movs	r3, #0
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	4b2e      	ldr	r3, [pc, #184]	@ (8006964 <HAL_ADC_MspInit+0xe0>)
 80068ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ae:	4a2d      	ldr	r2, [pc, #180]	@ (8006964 <HAL_ADC_MspInit+0xe0>)
 80068b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80068b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006964 <HAL_ADC_MspInit+0xe0>)
 80068b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068be:	613b      	str	r3, [r7, #16]
 80068c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	4b27      	ldr	r3, [pc, #156]	@ (8006964 <HAL_ADC_MspInit+0xe0>)
 80068c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ca:	4a26      	ldr	r2, [pc, #152]	@ (8006964 <HAL_ADC_MspInit+0xe0>)
 80068cc:	f043 0304 	orr.w	r3, r3, #4
 80068d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80068d2:	4b24      	ldr	r3, [pc, #144]	@ (8006964 <HAL_ADC_MspInit+0xe0>)
 80068d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80068de:	2306      	movs	r3, #6
 80068e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068e2:	2303      	movs	r3, #3
 80068e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068ea:	f107 0314 	add.w	r3, r7, #20
 80068ee:	4619      	mov	r1, r3
 80068f0:	481d      	ldr	r0, [pc, #116]	@ (8006968 <HAL_ADC_MspInit+0xe4>)
 80068f2:	f001 fd49 	bl	8008388 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80068f6:	4b1d      	ldr	r3, [pc, #116]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 80068f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006970 <HAL_ADC_MspInit+0xec>)
 80068fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80068fc:	4b1b      	ldr	r3, [pc, #108]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 80068fe:	2200      	movs	r2, #0
 8006900:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006902:	4b1a      	ldr	r3, [pc, #104]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 8006904:	2200      	movs	r2, #0
 8006906:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006908:	4b18      	ldr	r3, [pc, #96]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 800690a:	2200      	movs	r2, #0
 800690c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800690e:	4b17      	ldr	r3, [pc, #92]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 8006910:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006914:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006916:	4b15      	ldr	r3, [pc, #84]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 8006918:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800691c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800691e:	4b13      	ldr	r3, [pc, #76]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 8006920:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006924:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8006926:	4b11      	ldr	r3, [pc, #68]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 8006928:	2200      	movs	r2, #0
 800692a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800692c:	4b0f      	ldr	r3, [pc, #60]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 800692e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006932:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006934:	4b0d      	ldr	r3, [pc, #52]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 8006936:	2200      	movs	r2, #0
 8006938:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800693a:	480c      	ldr	r0, [pc, #48]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 800693c:	f001 f922 	bl	8007b84 <HAL_DMA_Init>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8006946:	f7ff ff6b 	bl	8006820 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a07      	ldr	r2, [pc, #28]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 800694e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006950:	4a06      	ldr	r2, [pc, #24]	@ (800696c <HAL_ADC_MspInit+0xe8>)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006956:	bf00      	nop
 8006958:	3728      	adds	r7, #40	@ 0x28
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40012000 	.word	0x40012000
 8006964:	40023800 	.word	0x40023800
 8006968:	40020800 	.word	0x40020800
 800696c:	200003ac 	.word	0x200003ac
 8006970:	40026410 	.word	0x40026410

08006974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	@ 0x28
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800697c:	f107 0314 	add.w	r3, r7, #20
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	60da      	str	r2, [r3, #12]
 800698a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a19      	ldr	r2, [pc, #100]	@ (80069f8 <HAL_I2C_MspInit+0x84>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d12c      	bne.n	80069f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	4b18      	ldr	r3, [pc, #96]	@ (80069fc <HAL_I2C_MspInit+0x88>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699e:	4a17      	ldr	r2, [pc, #92]	@ (80069fc <HAL_I2C_MspInit+0x88>)
 80069a0:	f043 0302 	orr.w	r3, r3, #2
 80069a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80069a6:	4b15      	ldr	r3, [pc, #84]	@ (80069fc <HAL_I2C_MspInit+0x88>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80069b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80069b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069b8:	2312      	movs	r3, #18
 80069ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069bc:	2300      	movs	r3, #0
 80069be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069c0:	2303      	movs	r3, #3
 80069c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80069c4:	2304      	movs	r3, #4
 80069c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069c8:	f107 0314 	add.w	r3, r7, #20
 80069cc:	4619      	mov	r1, r3
 80069ce:	480c      	ldr	r0, [pc, #48]	@ (8006a00 <HAL_I2C_MspInit+0x8c>)
 80069d0:	f001 fcda 	bl	8008388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	4b08      	ldr	r3, [pc, #32]	@ (80069fc <HAL_I2C_MspInit+0x88>)
 80069da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069dc:	4a07      	ldr	r2, [pc, #28]	@ (80069fc <HAL_I2C_MspInit+0x88>)
 80069de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80069e4:	4b05      	ldr	r3, [pc, #20]	@ (80069fc <HAL_I2C_MspInit+0x88>)
 80069e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80069f0:	bf00      	nop
 80069f2:	3728      	adds	r7, #40	@ 0x28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40005400 	.word	0x40005400
 80069fc:	40023800 	.word	0x40023800
 8006a00:	40020400 	.word	0x40020400

08006a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08e      	sub	sp, #56	@ 0x38
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	605a      	str	r2, [r3, #4]
 8006a16:	609a      	str	r2, [r3, #8]
 8006a18:	60da      	str	r2, [r3, #12]
 8006a1a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a4f      	ldr	r2, [pc, #316]	@ (8006b60 <HAL_TIM_Base_MspInit+0x15c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d10e      	bne.n	8006a44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a26:	2300      	movs	r3, #0
 8006a28:	623b      	str	r3, [r7, #32]
 8006a2a:	4b4e      	ldr	r3, [pc, #312]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2e:	4a4d      	ldr	r2, [pc, #308]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a36:	4b4b      	ldr	r3, [pc, #300]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	623b      	str	r3, [r7, #32]
 8006a40:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006a42:	e088      	b.n	8006b56 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM4)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a47      	ldr	r2, [pc, #284]	@ (8006b68 <HAL_TIM_Base_MspInit+0x164>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d135      	bne.n	8006aba <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	4b44      	ldr	r3, [pc, #272]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	4a43      	ldr	r2, [pc, #268]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006a58:	f043 0304 	orr.w	r3, r3, #4
 8006a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a5e:	4b41      	ldr	r3, [pc, #260]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a72:	4a3c      	ldr	r2, [pc, #240]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006a74:	f043 0308 	orr.w	r3, r3, #8
 8006a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	61bb      	str	r3, [r7, #24]
 8006a84:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ULTRA_ECHO_Pin;
 8006a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a90:	2300      	movs	r3, #0
 8006a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a94:	2300      	movs	r3, #0
 8006a96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ULTRA_ECHO_GPIO_Port, &GPIO_InitStruct);
 8006a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4832      	ldr	r0, [pc, #200]	@ (8006b6c <HAL_TIM_Base_MspInit+0x168>)
 8006aa4:	f001 fc70 	bl	8008388 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2105      	movs	r1, #5
 8006aac:	201e      	movs	r0, #30
 8006aae:	f001 f832 	bl	8007b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006ab2:	201e      	movs	r0, #30
 8006ab4:	f001 f84b 	bl	8007b4e <HAL_NVIC_EnableIRQ>
}
 8006ab8:	e04d      	b.n	8006b56 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM6)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a2c      	ldr	r2, [pc, #176]	@ (8006b70 <HAL_TIM_Base_MspInit+0x16c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d10e      	bne.n	8006ae2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	4b26      	ldr	r3, [pc, #152]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006acc:	4a25      	ldr	r2, [pc, #148]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006ace:	f043 0310 	orr.w	r3, r3, #16
 8006ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ad4:	4b23      	ldr	r3, [pc, #140]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	697b      	ldr	r3, [r7, #20]
}
 8006ae0:	e039      	b.n	8006b56 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM8)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a23      	ldr	r2, [pc, #140]	@ (8006b74 <HAL_TIM_Base_MspInit+0x170>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d134      	bne.n	8006b56 <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006aec:	2300      	movs	r3, #0
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	4b1c      	ldr	r3, [pc, #112]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006af6:	f043 0302 	orr.w	r3, r3, #2
 8006afa:	6453      	str	r3, [r2, #68]	@ 0x44
 8006afc:	4b19      	ldr	r3, [pc, #100]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	613b      	str	r3, [r7, #16]
 8006b06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b10:	4a14      	ldr	r2, [pc, #80]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006b12:	f043 0304 	orr.w	r3, r3, #4
 8006b16:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b18:	4b12      	ldr	r3, [pc, #72]	@ (8006b64 <HAL_TIM_Base_MspInit+0x160>)
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1c:	f003 0304 	and.w	r3, r3, #4
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin|PWMC_Pin|PWMD_Pin;
 8006b24:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8006b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b32:	2300      	movs	r3, #0
 8006b34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006b36:	2303      	movs	r3, #3
 8006b38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b3e:	4619      	mov	r1, r3
 8006b40:	480d      	ldr	r0, [pc, #52]	@ (8006b78 <HAL_TIM_Base_MspInit+0x174>)
 8006b42:	f001 fc21 	bl	8008388 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8006b46:	2200      	movs	r2, #0
 8006b48:	2105      	movs	r1, #5
 8006b4a:	202e      	movs	r0, #46	@ 0x2e
 8006b4c:	f000 ffe3 	bl	8007b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8006b50:	202e      	movs	r0, #46	@ 0x2e
 8006b52:	f000 fffc 	bl	8007b4e <HAL_NVIC_EnableIRQ>
}
 8006b56:	bf00      	nop
 8006b58:	3738      	adds	r7, #56	@ 0x38
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40023800 	.word	0x40023800
 8006b68:	40000800 	.word	0x40000800
 8006b6c:	40020c00 	.word	0x40020c00
 8006b70:	40001000 	.word	0x40001000
 8006b74:	40010400 	.word	0x40010400
 8006b78:	40020800 	.word	0x40020800

08006b7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08c      	sub	sp, #48	@ 0x30
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b84:	f107 031c 	add.w	r3, r7, #28
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	605a      	str	r2, [r3, #4]
 8006b8e:	609a      	str	r2, [r3, #8]
 8006b90:	60da      	str	r2, [r3, #12]
 8006b92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b9c:	d12c      	bne.n	8006bf8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	4b30      	ldr	r3, [pc, #192]	@ (8006c64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8006c64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bae:	4b2d      	ldr	r3, [pc, #180]	@ (8006c64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	61bb      	str	r3, [r7, #24]
 8006bb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	4b29      	ldr	r3, [pc, #164]	@ (8006c64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc2:	4a28      	ldr	r2, [pc, #160]	@ (8006c64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006bca:	4b26      	ldr	r3, [pc, #152]	@ (8006c64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006be2:	2300      	movs	r3, #0
 8006be4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006be6:	2301      	movs	r3, #1
 8006be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bea:	f107 031c 	add.w	r3, r7, #28
 8006bee:	4619      	mov	r1, r3
 8006bf0:	481d      	ldr	r0, [pc, #116]	@ (8006c68 <HAL_TIM_Encoder_MspInit+0xec>)
 8006bf2:	f001 fbc9 	bl	8008388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006bf6:	e030      	b.n	8006c5a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006c6c <HAL_TIM_Encoder_MspInit+0xf0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d12b      	bne.n	8006c5a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006c02:	2300      	movs	r3, #0
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	4b17      	ldr	r3, [pc, #92]	@ (8006c64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0a:	4a16      	ldr	r2, [pc, #88]	@ (8006c64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006c0c:	f043 0302 	orr.w	r3, r3, #2
 8006c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c12:	4b14      	ldr	r3, [pc, #80]	@ (8006c64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	4b10      	ldr	r3, [pc, #64]	@ (8006c64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c26:	4a0f      	ldr	r2, [pc, #60]	@ (8006c64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006c28:	f043 0301 	orr.w	r3, r3, #1
 8006c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c3a:	23c0      	movs	r3, #192	@ 0xc0
 8006c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c3e:	2302      	movs	r3, #2
 8006c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c42:	2300      	movs	r3, #0
 8006c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c46:	2300      	movs	r3, #0
 8006c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c4e:	f107 031c 	add.w	r3, r7, #28
 8006c52:	4619      	mov	r1, r3
 8006c54:	4804      	ldr	r0, [pc, #16]	@ (8006c68 <HAL_TIM_Encoder_MspInit+0xec>)
 8006c56:	f001 fb97 	bl	8008388 <HAL_GPIO_Init>
}
 8006c5a:	bf00      	nop
 8006c5c:	3730      	adds	r7, #48	@ 0x30
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40023800 	.word	0x40023800
 8006c68:	40020000 	.word	0x40020000
 8006c6c:	40000400 	.word	0x40000400

08006c70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c78:	f107 030c 	add.w	r3, r7, #12
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	605a      	str	r2, [r3, #4]
 8006c82:	609a      	str	r2, [r3, #8]
 8006c84:	60da      	str	r2, [r3, #12]
 8006c86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a12      	ldr	r2, [pc, #72]	@ (8006cd8 <HAL_TIM_MspPostInit+0x68>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d11e      	bne.n	8006cd0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c92:	2300      	movs	r3, #0
 8006c94:	60bb      	str	r3, [r7, #8]
 8006c96:	4b11      	ldr	r3, [pc, #68]	@ (8006cdc <HAL_TIM_MspPostInit+0x6c>)
 8006c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9a:	4a10      	ldr	r2, [pc, #64]	@ (8006cdc <HAL_TIM_MspPostInit+0x6c>)
 8006c9c:	f043 0310 	orr.w	r3, r3, #16
 8006ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8006cdc <HAL_TIM_MspPostInit+0x6c>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca6:	f003 0310 	and.w	r3, r3, #16
 8006caa:	60bb      	str	r3, [r7, #8]
 8006cac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = SMotor_Pin;
 8006cae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006cb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SMotor_GPIO_Port, &GPIO_InitStruct);
 8006cc4:	f107 030c 	add.w	r3, r7, #12
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4805      	ldr	r0, [pc, #20]	@ (8006ce0 <HAL_TIM_MspPostInit+0x70>)
 8006ccc:	f001 fb5c 	bl	8008388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006cd0:	bf00      	nop
 8006cd2:	3720      	adds	r7, #32
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	40021000 	.word	0x40021000

08006ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	@ 0x28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cec:	f107 0314 	add.w	r3, r7, #20
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	605a      	str	r2, [r3, #4]
 8006cf6:	609a      	str	r2, [r3, #8]
 8006cf8:	60da      	str	r2, [r3, #12]
 8006cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1d      	ldr	r2, [pc, #116]	@ (8006d78 <HAL_UART_MspInit+0x94>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d134      	bne.n	8006d70 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006d06:	2300      	movs	r3, #0
 8006d08:	613b      	str	r3, [r7, #16]
 8006d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006d7c <HAL_UART_MspInit+0x98>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006d7c <HAL_UART_MspInit+0x98>)
 8006d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d16:	4b19      	ldr	r3, [pc, #100]	@ (8006d7c <HAL_UART_MspInit+0x98>)
 8006d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d1e:	613b      	str	r3, [r7, #16]
 8006d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	4b15      	ldr	r3, [pc, #84]	@ (8006d7c <HAL_UART_MspInit+0x98>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2a:	4a14      	ldr	r2, [pc, #80]	@ (8006d7c <HAL_UART_MspInit+0x98>)
 8006d2c:	f043 0304 	orr.w	r3, r3, #4
 8006d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d32:	4b12      	ldr	r3, [pc, #72]	@ (8006d7c <HAL_UART_MspInit+0x98>)
 8006d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006d3e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d44:	2302      	movs	r3, #2
 8006d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006d50:	2307      	movs	r3, #7
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d54:	f107 0314 	add.w	r3, r7, #20
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4809      	ldr	r0, [pc, #36]	@ (8006d80 <HAL_UART_MspInit+0x9c>)
 8006d5c:	f001 fb14 	bl	8008388 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006d60:	2200      	movs	r2, #0
 8006d62:	2105      	movs	r1, #5
 8006d64:	2027      	movs	r0, #39	@ 0x27
 8006d66:	f000 fed6 	bl	8007b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006d6a:	2027      	movs	r0, #39	@ 0x27
 8006d6c:	f000 feef 	bl	8007b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006d70:	bf00      	nop
 8006d72:	3728      	adds	r7, #40	@ 0x28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	40004800 	.word	0x40004800
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	40020800 	.word	0x40020800

08006d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006d88:	bf00      	nop
 8006d8a:	e7fd      	b.n	8006d88 <NMI_Handler+0x4>

08006d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d90:	bf00      	nop
 8006d92:	e7fd      	b.n	8006d90 <HardFault_Handler+0x4>

08006d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d98:	bf00      	nop
 8006d9a:	e7fd      	b.n	8006d98 <MemManage_Handler+0x4>

08006d9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006da0:	bf00      	nop
 8006da2:	e7fd      	b.n	8006da0 <BusFault_Handler+0x4>

08006da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006da8:	bf00      	nop
 8006daa:	e7fd      	b.n	8006da8 <UsageFault_Handler+0x4>

08006dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006db0:	bf00      	nop
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006dbe:	f000 f98d 	bl	80070dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006dc2:	f007 fc1b 	bl	800e5fc <xTaskGetSchedulerState>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d001      	beq.n	8006dd0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006dcc:	f008 fa14 	bl	800f1f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006dd0:	bf00      	nop
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8006dd8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006ddc:	f001 fc8a 	bl	80086f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006de0:	bf00      	nop
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006de8:	4802      	ldr	r0, [pc, #8]	@ (8006df4 <TIM4_IRQHandler+0x10>)
 8006dea:	f003 fdcf 	bl	800a98c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006dee:	bf00      	nop
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20000538 	.word	0x20000538

08006df8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006dfc:	4802      	ldr	r0, [pc, #8]	@ (8006e08 <USART3_IRQHandler+0x10>)
 8006dfe:	f004 ff6f 	bl	800bce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006e02:	bf00      	nop
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20000610 	.word	0x20000610

08006e0c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006e10:	4802      	ldr	r0, [pc, #8]	@ (8006e1c <TIM8_CC_IRQHandler+0x10>)
 8006e12:	f003 fdbb 	bl	800a98c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8006e16:	bf00      	nop
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	200005c8 	.word	0x200005c8

08006e20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006e24:	4802      	ldr	r0, [pc, #8]	@ (8006e30 <DMA2_Stream0_IRQHandler+0x10>)
 8006e26:	f001 f845 	bl	8007eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006e2a:	bf00      	nop
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	200003ac 	.word	0x200003ac

08006e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  return 1;
 8006e38:	2301      	movs	r3, #1
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <_kill>:

int _kill(int pid, int sig)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006e4e:	f009 fd41 	bl	80108d4 <__errno>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2216      	movs	r2, #22
 8006e56:	601a      	str	r2, [r3, #0]
  return -1;
 8006e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <_exit>:

void _exit (int status)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff ffe7 	bl	8006e44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006e76:	bf00      	nop
 8006e78:	e7fd      	b.n	8006e76 <_exit+0x12>

08006e7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b086      	sub	sp, #24
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	e00a      	b.n	8006ea2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006e8c:	f3af 8000 	nop.w
 8006e90:	4601      	mov	r1, r0
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	60ba      	str	r2, [r7, #8]
 8006e98:	b2ca      	uxtb	r2, r1
 8006e9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	dbf0      	blt.n	8006e8c <_read+0x12>
  }

  return len;
 8006eaa:	687b      	ldr	r3, [r7, #4]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	e009      	b.n	8006eda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	60ba      	str	r2, [r7, #8]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	dbf1      	blt.n	8006ec6 <_write+0x12>
  }
  return len;
 8006ee2:	687b      	ldr	r3, [r7, #4]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <_close>:

int _close(int file)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006ef4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006f14:	605a      	str	r2, [r3, #4]
  return 0;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <_isatty>:

int _isatty(int file)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006f2c:	2301      	movs	r3, #1
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	60f8      	str	r0, [r7, #12]
 8006f42:	60b9      	str	r1, [r7, #8]
 8006f44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f5c:	4a14      	ldr	r2, [pc, #80]	@ (8006fb0 <_sbrk+0x5c>)
 8006f5e:	4b15      	ldr	r3, [pc, #84]	@ (8006fb4 <_sbrk+0x60>)
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f68:	4b13      	ldr	r3, [pc, #76]	@ (8006fb8 <_sbrk+0x64>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d102      	bne.n	8006f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f70:	4b11      	ldr	r3, [pc, #68]	@ (8006fb8 <_sbrk+0x64>)
 8006f72:	4a12      	ldr	r2, [pc, #72]	@ (8006fbc <_sbrk+0x68>)
 8006f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f76:	4b10      	ldr	r3, [pc, #64]	@ (8006fb8 <_sbrk+0x64>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d207      	bcs.n	8006f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f84:	f009 fca6 	bl	80108d4 <__errno>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	220c      	movs	r2, #12
 8006f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f92:	e009      	b.n	8006fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f94:	4b08      	ldr	r3, [pc, #32]	@ (8006fb8 <_sbrk+0x64>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f9a:	4b07      	ldr	r3, [pc, #28]	@ (8006fb8 <_sbrk+0x64>)
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	4a05      	ldr	r2, [pc, #20]	@ (8006fb8 <_sbrk+0x64>)
 8006fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20020000 	.word	0x20020000
 8006fb4:	00000400 	.word	0x00000400
 8006fb8:	20000804 	.word	0x20000804
 8006fbc:	200056a8 	.word	0x200056a8

08006fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006fc4:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <SystemInit+0x20>)
 8006fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fca:	4a05      	ldr	r2, [pc, #20]	@ (8006fe0 <SystemInit+0x20>)
 8006fcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006fd4:	bf00      	nop
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	e000ed00 	.word	0xe000ed00

08006fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800701c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006fe8:	f7ff ffea 	bl	8006fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006fec:	480c      	ldr	r0, [pc, #48]	@ (8007020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006fee:	490d      	ldr	r1, [pc, #52]	@ (8007024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8007028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ff4:	e002      	b.n	8006ffc <LoopCopyDataInit>

08006ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ffa:	3304      	adds	r3, #4

08006ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007000:	d3f9      	bcc.n	8006ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007002:	4a0a      	ldr	r2, [pc, #40]	@ (800702c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007004:	4c0a      	ldr	r4, [pc, #40]	@ (8007030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007008:	e001      	b.n	800700e <LoopFillZerobss>

0800700a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800700a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800700c:	3204      	adds	r2, #4

0800700e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800700e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007010:	d3fb      	bcc.n	800700a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007012:	f009 fc65 	bl	80108e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007016:	f7f9 ffaf 	bl	8000f78 <main>
  bx  lr    
 800701a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800701c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007024:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8007028:	08014a78 	.word	0x08014a78
  ldr r2, =_sbss
 800702c:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8007030:	200056a8 	.word	0x200056a8

08007034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007034:	e7fe      	b.n	8007034 <ADC_IRQHandler>
	...

08007038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800703c:	4b0e      	ldr	r3, [pc, #56]	@ (8007078 <HAL_Init+0x40>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a0d      	ldr	r2, [pc, #52]	@ (8007078 <HAL_Init+0x40>)
 8007042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007048:	4b0b      	ldr	r3, [pc, #44]	@ (8007078 <HAL_Init+0x40>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a0a      	ldr	r2, [pc, #40]	@ (8007078 <HAL_Init+0x40>)
 800704e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007054:	4b08      	ldr	r3, [pc, #32]	@ (8007078 <HAL_Init+0x40>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a07      	ldr	r2, [pc, #28]	@ (8007078 <HAL_Init+0x40>)
 800705a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800705e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007060:	2003      	movs	r0, #3
 8007062:	f000 fd4d 	bl	8007b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007066:	200f      	movs	r0, #15
 8007068:	f000 f808 	bl	800707c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800706c:	f7ff fbde 	bl	800682c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	40023c00 	.word	0x40023c00

0800707c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007084:	4b12      	ldr	r3, [pc, #72]	@ (80070d0 <HAL_InitTick+0x54>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	4b12      	ldr	r3, [pc, #72]	@ (80070d4 <HAL_InitTick+0x58>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	4619      	mov	r1, r3
 800708e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007092:	fbb3 f3f1 	udiv	r3, r3, r1
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	4618      	mov	r0, r3
 800709c:	f000 fd65 	bl	8007b6a <HAL_SYSTICK_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e00e      	b.n	80070c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b0f      	cmp	r3, #15
 80070ae:	d80a      	bhi.n	80070c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070b0:	2200      	movs	r2, #0
 80070b2:	6879      	ldr	r1, [r7, #4]
 80070b4:	f04f 30ff 	mov.w	r0, #4294967295
 80070b8:	f000 fd2d 	bl	8007b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070bc:	4a06      	ldr	r2, [pc, #24]	@ (80070d8 <HAL_InitTick+0x5c>)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e000      	b.n	80070c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000160 	.word	0x20000160
 80070d4:	20000168 	.word	0x20000168
 80070d8:	20000164 	.word	0x20000164

080070dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80070e0:	4b06      	ldr	r3, [pc, #24]	@ (80070fc <HAL_IncTick+0x20>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	4b06      	ldr	r3, [pc, #24]	@ (8007100 <HAL_IncTick+0x24>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4413      	add	r3, r2
 80070ec:	4a04      	ldr	r2, [pc, #16]	@ (8007100 <HAL_IncTick+0x24>)
 80070ee:	6013      	str	r3, [r2, #0]
}
 80070f0:	bf00      	nop
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20000168 	.word	0x20000168
 8007100:	20000808 	.word	0x20000808

08007104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  return uwTick;
 8007108:	4b03      	ldr	r3, [pc, #12]	@ (8007118 <HAL_GetTick+0x14>)
 800710a:	681b      	ldr	r3, [r3, #0]
}
 800710c:	4618      	mov	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20000808 	.word	0x20000808

0800711c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007124:	f7ff ffee 	bl	8007104 <HAL_GetTick>
 8007128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007134:	d005      	beq.n	8007142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007136:	4b0a      	ldr	r3, [pc, #40]	@ (8007160 <HAL_Delay+0x44>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007142:	bf00      	nop
 8007144:	f7ff ffde 	bl	8007104 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	429a      	cmp	r2, r3
 8007152:	d8f7      	bhi.n	8007144 <HAL_Delay+0x28>
  {
  }
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20000168 	.word	0x20000168

08007164 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e033      	b.n	80071e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d109      	bne.n	8007196 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff fb7e 	bl	8006884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719a:	f003 0310 	and.w	r3, r3, #16
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d118      	bne.n	80071d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80071aa:	f023 0302 	bic.w	r3, r3, #2
 80071ae:	f043 0202 	orr.w	r2, r3, #2
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa54 	bl	8007664 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c6:	f023 0303 	bic.w	r3, r3, #3
 80071ca:	f043 0201 	orr.w	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80071d2:	e001      	b.n	80071d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_ADC_Start_DMA+0x1e>
 8007206:	2302      	movs	r3, #2
 8007208:	e0e9      	b.n	80073de <HAL_ADC_Start_DMA+0x1f2>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b01      	cmp	r3, #1
 800721e:	d018      	beq.n	8007252 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689a      	ldr	r2, [r3, #8]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007230:	4b6d      	ldr	r3, [pc, #436]	@ (80073e8 <HAL_ADC_Start_DMA+0x1fc>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a6d      	ldr	r2, [pc, #436]	@ (80073ec <HAL_ADC_Start_DMA+0x200>)
 8007236:	fba2 2303 	umull	r2, r3, r2, r3
 800723a:	0c9a      	lsrs	r2, r3, #18
 800723c:	4613      	mov	r3, r2
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	4413      	add	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8007244:	e002      	b.n	800724c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	3b01      	subs	r3, #1
 800724a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1f9      	bne.n	8007246 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007260:	d107      	bne.n	8007272 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007270:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b01      	cmp	r3, #1
 800727e:	f040 80a1 	bne.w	80073c4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800728a:	f023 0301 	bic.w	r3, r3, #1
 800728e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d007      	beq.n	80072b4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80072ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c0:	d106      	bne.n	80072d0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c6:	f023 0206 	bic.w	r2, r3, #6
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80072ce:	e002      	b.n	80072d6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80072de:	4b44      	ldr	r3, [pc, #272]	@ (80073f0 <HAL_ADC_Start_DMA+0x204>)
 80072e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e6:	4a43      	ldr	r2, [pc, #268]	@ (80073f4 <HAL_ADC_Start_DMA+0x208>)
 80072e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ee:	4a42      	ldr	r2, [pc, #264]	@ (80073f8 <HAL_ADC_Start_DMA+0x20c>)
 80072f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f6:	4a41      	ldr	r2, [pc, #260]	@ (80073fc <HAL_ADC_Start_DMA+0x210>)
 80072f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8007302:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8007312:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007322:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	334c      	adds	r3, #76	@ 0x4c
 800732e:	4619      	mov	r1, r3
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f000 fcd4 	bl	8007ce0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f003 031f 	and.w	r3, r3, #31
 8007340:	2b00      	cmp	r3, #0
 8007342:	d12a      	bne.n	800739a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a2d      	ldr	r2, [pc, #180]	@ (8007400 <HAL_ADC_Start_DMA+0x214>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d015      	beq.n	800737a <HAL_ADC_Start_DMA+0x18e>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a2c      	ldr	r2, [pc, #176]	@ (8007404 <HAL_ADC_Start_DMA+0x218>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d105      	bne.n	8007364 <HAL_ADC_Start_DMA+0x178>
 8007358:	4b25      	ldr	r3, [pc, #148]	@ (80073f0 <HAL_ADC_Start_DMA+0x204>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a27      	ldr	r2, [pc, #156]	@ (8007408 <HAL_ADC_Start_DMA+0x21c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d136      	bne.n	80073dc <HAL_ADC_Start_DMA+0x1f0>
 800736e:	4b20      	ldr	r3, [pc, #128]	@ (80073f0 <HAL_ADC_Start_DMA+0x204>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f003 0310 	and.w	r3, r3, #16
 8007376:	2b00      	cmp	r3, #0
 8007378:	d130      	bne.n	80073dc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d129      	bne.n	80073dc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007396:	609a      	str	r2, [r3, #8]
 8007398:	e020      	b.n	80073dc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a18      	ldr	r2, [pc, #96]	@ (8007400 <HAL_ADC_Start_DMA+0x214>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d11b      	bne.n	80073dc <HAL_ADC_Start_DMA+0x1f0>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d114      	bne.n	80073dc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80073c0:	609a      	str	r2, [r3, #8]
 80073c2:	e00b      	b.n	80073dc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c8:	f043 0210 	orr.w	r2, r3, #16
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073d4:	f043 0201 	orr.w	r2, r3, #1
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20000160 	.word	0x20000160
 80073ec:	431bde83 	.word	0x431bde83
 80073f0:	40012300 	.word	0x40012300
 80073f4:	0800785d 	.word	0x0800785d
 80073f8:	08007917 	.word	0x08007917
 80073fc:	08007933 	.word	0x08007933
 8007400:	40012000 	.word	0x40012000
 8007404:	40012100 	.word	0x40012100
 8007408:	40012200 	.word	0x40012200

0800740c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_ADC_ConfigChannel+0x1c>
 8007438:	2302      	movs	r3, #2
 800743a:	e105      	b.n	8007648 <HAL_ADC_ConfigChannel+0x228>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b09      	cmp	r3, #9
 800744a:	d925      	bls.n	8007498 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68d9      	ldr	r1, [r3, #12]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	4613      	mov	r3, r2
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	4413      	add	r3, r2
 8007460:	3b1e      	subs	r3, #30
 8007462:	2207      	movs	r2, #7
 8007464:	fa02 f303 	lsl.w	r3, r2, r3
 8007468:	43da      	mvns	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	400a      	ands	r2, r1
 8007470:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68d9      	ldr	r1, [r3, #12]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	4618      	mov	r0, r3
 8007484:	4603      	mov	r3, r0
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	4403      	add	r3, r0
 800748a:	3b1e      	subs	r3, #30
 800748c:	409a      	lsls	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	60da      	str	r2, [r3, #12]
 8007496:	e022      	b.n	80074de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6919      	ldr	r1, [r3, #16]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	4613      	mov	r3, r2
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	4413      	add	r3, r2
 80074ac:	2207      	movs	r2, #7
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	43da      	mvns	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	400a      	ands	r2, r1
 80074ba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6919      	ldr	r1, [r3, #16]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	4618      	mov	r0, r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	4403      	add	r3, r0
 80074d4:	409a      	lsls	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b06      	cmp	r3, #6
 80074e4:	d824      	bhi.n	8007530 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	3b05      	subs	r3, #5
 80074f8:	221f      	movs	r2, #31
 80074fa:	fa02 f303 	lsl.w	r3, r2, r3
 80074fe:	43da      	mvns	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	400a      	ands	r2, r1
 8007506:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	b29b      	uxth	r3, r3
 8007514:	4618      	mov	r0, r3
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	3b05      	subs	r3, #5
 8007522:	fa00 f203 	lsl.w	r2, r0, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	635a      	str	r2, [r3, #52]	@ 0x34
 800752e:	e04c      	b.n	80075ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b0c      	cmp	r3, #12
 8007536:	d824      	bhi.n	8007582 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	3b23      	subs	r3, #35	@ 0x23
 800754a:	221f      	movs	r2, #31
 800754c:	fa02 f303 	lsl.w	r3, r2, r3
 8007550:	43da      	mvns	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	400a      	ands	r2, r1
 8007558:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	b29b      	uxth	r3, r3
 8007566:	4618      	mov	r0, r3
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	3b23      	subs	r3, #35	@ 0x23
 8007574:	fa00 f203 	lsl.w	r2, r0, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007580:	e023      	b.n	80075ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	3b41      	subs	r3, #65	@ 0x41
 8007594:	221f      	movs	r2, #31
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	43da      	mvns	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	400a      	ands	r2, r1
 80075a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	4618      	mov	r0, r3
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	3b41      	subs	r3, #65	@ 0x41
 80075be:	fa00 f203 	lsl.w	r2, r0, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80075ca:	4b22      	ldr	r3, [pc, #136]	@ (8007654 <HAL_ADC_ConfigChannel+0x234>)
 80075cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a21      	ldr	r2, [pc, #132]	@ (8007658 <HAL_ADC_ConfigChannel+0x238>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d109      	bne.n	80075ec <HAL_ADC_ConfigChannel+0x1cc>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b12      	cmp	r3, #18
 80075de:	d105      	bne.n	80075ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a19      	ldr	r2, [pc, #100]	@ (8007658 <HAL_ADC_ConfigChannel+0x238>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d123      	bne.n	800763e <HAL_ADC_ConfigChannel+0x21e>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b10      	cmp	r3, #16
 80075fc:	d003      	beq.n	8007606 <HAL_ADC_ConfigChannel+0x1e6>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b11      	cmp	r3, #17
 8007604:	d11b      	bne.n	800763e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b10      	cmp	r3, #16
 8007618:	d111      	bne.n	800763e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800761a:	4b10      	ldr	r3, [pc, #64]	@ (800765c <HAL_ADC_ConfigChannel+0x23c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a10      	ldr	r2, [pc, #64]	@ (8007660 <HAL_ADC_ConfigChannel+0x240>)
 8007620:	fba2 2303 	umull	r2, r3, r2, r3
 8007624:	0c9a      	lsrs	r2, r3, #18
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007630:	e002      	b.n	8007638 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	3b01      	subs	r3, #1
 8007636:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1f9      	bne.n	8007632 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	40012300 	.word	0x40012300
 8007658:	40012000 	.word	0x40012000
 800765c:	20000160 	.word	0x20000160
 8007660:	431bde83 	.word	0x431bde83

08007664 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800766c:	4b79      	ldr	r3, [pc, #484]	@ (8007854 <ADC_Init+0x1f0>)
 800766e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	431a      	orrs	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6859      	ldr	r1, [r3, #4]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	021a      	lsls	r2, r3, #8
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80076bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6859      	ldr	r1, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6899      	ldr	r1, [r3, #8]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f6:	4a58      	ldr	r2, [pc, #352]	@ (8007858 <ADC_Init+0x1f4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d022      	beq.n	8007742 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800770a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6899      	ldr	r1, [r3, #8]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800772c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6899      	ldr	r1, [r3, #8]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	609a      	str	r2, [r3, #8]
 8007740:	e00f      	b.n	8007762 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007760:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689a      	ldr	r2, [r3, #8]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0202 	bic.w	r2, r2, #2
 8007770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6899      	ldr	r1, [r3, #8]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	7e1b      	ldrb	r3, [r3, #24]
 800777c:	005a      	lsls	r2, r3, #1
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01b      	beq.n	80077c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800779e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80077ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6859      	ldr	r1, [r3, #4]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ba:	3b01      	subs	r3, #1
 80077bc:	035a      	lsls	r2, r3, #13
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
 80077c6:	e007      	b.n	80077d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077d6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80077e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	051a      	lsls	r2, r3, #20
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800780c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6899      	ldr	r1, [r3, #8]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800781a:	025a      	lsls	r2, r3, #9
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6899      	ldr	r1, [r3, #8]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	029a      	lsls	r2, r3, #10
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	609a      	str	r2, [r3, #8]
}
 8007848:	bf00      	nop
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	40012300 	.word	0x40012300
 8007858:	0f000001 	.word	0x0f000001

0800785c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007868:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007872:	2b00      	cmp	r3, #0
 8007874:	d13c      	bne.n	80078f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d12b      	bne.n	80078e8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007894:	2b00      	cmp	r3, #0
 8007896:	d127      	bne.n	80078e8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d006      	beq.n	80078b4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d119      	bne.n	80078e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0220 	bic.w	r2, r2, #32
 80078c2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d105      	bne.n	80078e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e0:	f043 0201 	orr.w	r2, r3, #1
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f7fb f819 	bl	8002920 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80078ee:	e00e      	b.n	800790e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f7ff fd85 	bl	800740c <HAL_ADC_ErrorCallback>
}
 8007902:	e004      	b.n	800790e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	4798      	blx	r3
}
 800790e:	bf00      	nop
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007922:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7fa ff87 	bl	8002838 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2240      	movs	r2, #64	@ 0x40
 8007944:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800794a:	f043 0204 	orr.w	r2, r3, #4
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f7ff fd5a 	bl	800740c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007958:	bf00      	nop
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007970:	4b0c      	ldr	r3, [pc, #48]	@ (80079a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800797c:	4013      	ands	r3, r2
 800797e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007988:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800798c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007992:	4a04      	ldr	r2, [pc, #16]	@ (80079a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	60d3      	str	r3, [r2, #12]
}
 8007998:	bf00      	nop
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	e000ed00 	.word	0xe000ed00

080079a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079ac:	4b04      	ldr	r3, [pc, #16]	@ (80079c0 <__NVIC_GetPriorityGrouping+0x18>)
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	0a1b      	lsrs	r3, r3, #8
 80079b2:	f003 0307 	and.w	r3, r3, #7
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	e000ed00 	.word	0xe000ed00

080079c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	4603      	mov	r3, r0
 80079cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	db0b      	blt.n	80079ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079d6:	79fb      	ldrb	r3, [r7, #7]
 80079d8:	f003 021f 	and.w	r2, r3, #31
 80079dc:	4907      	ldr	r1, [pc, #28]	@ (80079fc <__NVIC_EnableIRQ+0x38>)
 80079de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	2001      	movs	r0, #1
 80079e6:	fa00 f202 	lsl.w	r2, r0, r2
 80079ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	e000e100 	.word	0xe000e100

08007a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	db0a      	blt.n	8007a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	490c      	ldr	r1, [pc, #48]	@ (8007a4c <__NVIC_SetPriority+0x4c>)
 8007a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1e:	0112      	lsls	r2, r2, #4
 8007a20:	b2d2      	uxtb	r2, r2
 8007a22:	440b      	add	r3, r1
 8007a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a28:	e00a      	b.n	8007a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	4908      	ldr	r1, [pc, #32]	@ (8007a50 <__NVIC_SetPriority+0x50>)
 8007a30:	79fb      	ldrb	r3, [r7, #7]
 8007a32:	f003 030f 	and.w	r3, r3, #15
 8007a36:	3b04      	subs	r3, #4
 8007a38:	0112      	lsls	r2, r2, #4
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	761a      	strb	r2, [r3, #24]
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	e000e100 	.word	0xe000e100
 8007a50:	e000ed00 	.word	0xe000ed00

08007a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b089      	sub	sp, #36	@ 0x24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	f1c3 0307 	rsb	r3, r3, #7
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	bf28      	it	cs
 8007a72:	2304      	movcs	r3, #4
 8007a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	2b06      	cmp	r3, #6
 8007a7c:	d902      	bls.n	8007a84 <NVIC_EncodePriority+0x30>
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	3b03      	subs	r3, #3
 8007a82:	e000      	b.n	8007a86 <NVIC_EncodePriority+0x32>
 8007a84:	2300      	movs	r3, #0
 8007a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a88:	f04f 32ff 	mov.w	r2, #4294967295
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	43da      	mvns	r2, r3
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	401a      	ands	r2, r3
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa6:	43d9      	mvns	r1, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007aac:	4313      	orrs	r3, r2
         );
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3724      	adds	r7, #36	@ 0x24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
	...

08007abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007acc:	d301      	bcc.n	8007ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e00f      	b.n	8007af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8007afc <SysTick_Config+0x40>)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007ada:	210f      	movs	r1, #15
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	f7ff ff8e 	bl	8007a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ae4:	4b05      	ldr	r3, [pc, #20]	@ (8007afc <SysTick_Config+0x40>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007aea:	4b04      	ldr	r3, [pc, #16]	@ (8007afc <SysTick_Config+0x40>)
 8007aec:	2207      	movs	r2, #7
 8007aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	e000e010 	.word	0xe000e010

08007b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff ff29 	bl	8007960 <__NVIC_SetPriorityGrouping>
}
 8007b0e:	bf00      	nop
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b086      	sub	sp, #24
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	60b9      	str	r1, [r7, #8]
 8007b20:	607a      	str	r2, [r7, #4]
 8007b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b28:	f7ff ff3e 	bl	80079a8 <__NVIC_GetPriorityGrouping>
 8007b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	68b9      	ldr	r1, [r7, #8]
 8007b32:	6978      	ldr	r0, [r7, #20]
 8007b34:	f7ff ff8e 	bl	8007a54 <NVIC_EncodePriority>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b3e:	4611      	mov	r1, r2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff ff5d 	bl	8007a00 <__NVIC_SetPriority>
}
 8007b46:	bf00      	nop
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	4603      	mov	r3, r0
 8007b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7ff ff31 	bl	80079c4 <__NVIC_EnableIRQ>
}
 8007b62:	bf00      	nop
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff ffa2 	bl	8007abc <SysTick_Config>
 8007b78:	4603      	mov	r3, r0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b90:	f7ff fab8 	bl	8007104 <HAL_GetTick>
 8007b94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e099      	b.n	8007cd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0201 	bic.w	r2, r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bc0:	e00f      	b.n	8007be2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bc2:	f7ff fa9f 	bl	8007104 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b05      	cmp	r3, #5
 8007bce:	d908      	bls.n	8007be2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2203      	movs	r2, #3
 8007bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e078      	b.n	8007cd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e8      	bne.n	8007bc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4b38      	ldr	r3, [pc, #224]	@ (8007cdc <HAL_DMA_Init+0x158>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d107      	bne.n	8007c4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c44:	4313      	orrs	r3, r2
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f023 0307 	bic.w	r3, r3, #7
 8007c62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d117      	bne.n	8007ca6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00e      	beq.n	8007ca6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fb01 	bl	8008290 <DMA_CheckFifoParam>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d008      	beq.n	8007ca6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2240      	movs	r2, #64	@ 0x40
 8007c98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e016      	b.n	8007cd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fab8 	bl	8008224 <DMA_CalcBaseAndBitshift>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cbc:	223f      	movs	r2, #63	@ 0x3f
 8007cbe:	409a      	lsls	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	f010803f 	.word	0xf010803f

08007ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d101      	bne.n	8007d06 <HAL_DMA_Start_IT+0x26>
 8007d02:	2302      	movs	r3, #2
 8007d04:	e040      	b.n	8007d88 <HAL_DMA_Start_IT+0xa8>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d12f      	bne.n	8007d7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	68b9      	ldr	r1, [r7, #8]
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 fa4a 	bl	80081c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d38:	223f      	movs	r2, #63	@ 0x3f
 8007d3a:	409a      	lsls	r2, r3
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0216 	orr.w	r2, r2, #22
 8007d4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d007      	beq.n	8007d68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0208 	orr.w	r2, r2, #8
 8007d66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	e005      	b.n	8007d86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d82:	2302      	movs	r3, #2
 8007d84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007d9e:	f7ff f9b1 	bl	8007104 <HAL_GetTick>
 8007da2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d008      	beq.n	8007dc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2280      	movs	r2, #128	@ 0x80
 8007db4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e052      	b.n	8007e68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0216 	bic.w	r2, r2, #22
 8007dd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695a      	ldr	r2, [r3, #20]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007de0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <HAL_DMA_Abort+0x62>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d007      	beq.n	8007e02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 0208 	bic.w	r2, r2, #8
 8007e00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0201 	bic.w	r2, r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e12:	e013      	b.n	8007e3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e14:	f7ff f976 	bl	8007104 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	2b05      	cmp	r3, #5
 8007e20:	d90c      	bls.n	8007e3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2203      	movs	r2, #3
 8007e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e015      	b.n	8007e68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e4      	bne.n	8007e14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e4e:	223f      	movs	r2, #63	@ 0x3f
 8007e50:	409a      	lsls	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d004      	beq.n	8007e8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2280      	movs	r2, #128	@ 0x80
 8007e88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e00c      	b.n	8007ea8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2205      	movs	r2, #5
 8007e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f022 0201 	bic.w	r2, r2, #1
 8007ea4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ec0:	4b8e      	ldr	r3, [pc, #568]	@ (80080fc <HAL_DMA_IRQHandler+0x248>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a8e      	ldr	r2, [pc, #568]	@ (8008100 <HAL_DMA_IRQHandler+0x24c>)
 8007ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eca:	0a9b      	lsrs	r3, r3, #10
 8007ecc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ede:	2208      	movs	r2, #8
 8007ee0:	409a      	lsls	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d01a      	beq.n	8007f20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d013      	beq.n	8007f20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0204 	bic.w	r2, r2, #4
 8007f06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	409a      	lsls	r2, r3
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f18:	f043 0201 	orr.w	r2, r3, #1
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f24:	2201      	movs	r2, #1
 8007f26:	409a      	lsls	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d012      	beq.n	8007f56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00b      	beq.n	8007f56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f42:	2201      	movs	r2, #1
 8007f44:	409a      	lsls	r2, r3
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f4e:	f043 0202 	orr.w	r2, r3, #2
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f5a:	2204      	movs	r2, #4
 8007f5c:	409a      	lsls	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4013      	ands	r3, r2
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d012      	beq.n	8007f8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0302 	and.w	r3, r3, #2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00b      	beq.n	8007f8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f78:	2204      	movs	r2, #4
 8007f7a:	409a      	lsls	r2, r3
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f84:	f043 0204 	orr.w	r2, r3, #4
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f90:	2210      	movs	r2, #16
 8007f92:	409a      	lsls	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4013      	ands	r3, r2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d043      	beq.n	8008024 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d03c      	beq.n	8008024 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fae:	2210      	movs	r2, #16
 8007fb0:	409a      	lsls	r2, r3
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d018      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d108      	bne.n	8007fe4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d024      	beq.n	8008024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
 8007fe2:	e01f      	b.n	8008024 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01b      	beq.n	8008024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	4798      	blx	r3
 8007ff4:	e016      	b.n	8008024 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008000:	2b00      	cmp	r3, #0
 8008002:	d107      	bne.n	8008014 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0208 	bic.w	r2, r2, #8
 8008012:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008028:	2220      	movs	r2, #32
 800802a:	409a      	lsls	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4013      	ands	r3, r2
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 808f 	beq.w	8008154 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8087 	beq.w	8008154 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800804a:	2220      	movs	r2, #32
 800804c:	409a      	lsls	r2, r3
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b05      	cmp	r3, #5
 800805c:	d136      	bne.n	80080cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0216 	bic.w	r2, r2, #22
 800806c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695a      	ldr	r2, [r3, #20]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800807c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	d103      	bne.n	800808e <HAL_DMA_IRQHandler+0x1da>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 0208 	bic.w	r2, r2, #8
 800809c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080a2:	223f      	movs	r2, #63	@ 0x3f
 80080a4:	409a      	lsls	r2, r3
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d07e      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	4798      	blx	r3
        }
        return;
 80080ca:	e079      	b.n	80081c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01d      	beq.n	8008116 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10d      	bne.n	8008104 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d031      	beq.n	8008154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	4798      	blx	r3
 80080f8:	e02c      	b.n	8008154 <HAL_DMA_IRQHandler+0x2a0>
 80080fa:	bf00      	nop
 80080fc:	20000160 	.word	0x20000160
 8008100:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008108:	2b00      	cmp	r3, #0
 800810a:	d023      	beq.n	8008154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
 8008114:	e01e      	b.n	8008154 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10f      	bne.n	8008144 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0210 	bic.w	r2, r2, #16
 8008132:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008158:	2b00      	cmp	r3, #0
 800815a:	d032      	beq.n	80081c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	d022      	beq.n	80081ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2205      	movs	r2, #5
 800816c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0201 	bic.w	r2, r2, #1
 800817e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	3301      	adds	r3, #1
 8008184:	60bb      	str	r3, [r7, #8]
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	429a      	cmp	r2, r3
 800818a:	d307      	bcc.n	800819c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1f2      	bne.n	8008180 <HAL_DMA_IRQHandler+0x2cc>
 800819a:	e000      	b.n	800819e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800819c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d005      	beq.n	80081c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
 80081be:	e000      	b.n	80081c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80081c0:	bf00      	nop
    }
  }
}
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80081e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	2b40      	cmp	r3, #64	@ 0x40
 80081f4:	d108      	bne.n	8008208 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008206:	e007      	b.n	8008218 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	60da      	str	r2, [r3, #12]
}
 8008218:	bf00      	nop
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	3b10      	subs	r3, #16
 8008234:	4a14      	ldr	r2, [pc, #80]	@ (8008288 <DMA_CalcBaseAndBitshift+0x64>)
 8008236:	fba2 2303 	umull	r2, r3, r2, r3
 800823a:	091b      	lsrs	r3, r3, #4
 800823c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800823e:	4a13      	ldr	r2, [pc, #76]	@ (800828c <DMA_CalcBaseAndBitshift+0x68>)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2b03      	cmp	r3, #3
 8008250:	d909      	bls.n	8008266 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800825a:	f023 0303 	bic.w	r3, r3, #3
 800825e:	1d1a      	adds	r2, r3, #4
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	659a      	str	r2, [r3, #88]	@ 0x58
 8008264:	e007      	b.n	8008276 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800826e:	f023 0303 	bic.w	r3, r3, #3
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	aaaaaaab 	.word	0xaaaaaaab
 800828c:	08013c5c 	.word	0x08013c5c

08008290 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d11f      	bne.n	80082ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d856      	bhi.n	800835e <DMA_CheckFifoParam+0xce>
 80082b0:	a201      	add	r2, pc, #4	@ (adr r2, 80082b8 <DMA_CheckFifoParam+0x28>)
 80082b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b6:	bf00      	nop
 80082b8:	080082c9 	.word	0x080082c9
 80082bc:	080082db 	.word	0x080082db
 80082c0:	080082c9 	.word	0x080082c9
 80082c4:	0800835f 	.word	0x0800835f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d046      	beq.n	8008362 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082d8:	e043      	b.n	8008362 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80082e2:	d140      	bne.n	8008366 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082e8:	e03d      	b.n	8008366 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082f2:	d121      	bne.n	8008338 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	d837      	bhi.n	800836a <DMA_CheckFifoParam+0xda>
 80082fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008300 <DMA_CheckFifoParam+0x70>)
 80082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008300:	08008311 	.word	0x08008311
 8008304:	08008317 	.word	0x08008317
 8008308:	08008311 	.word	0x08008311
 800830c:	08008329 	.word	0x08008329
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	73fb      	strb	r3, [r7, #15]
      break;
 8008314:	e030      	b.n	8008378 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d025      	beq.n	800836e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008326:	e022      	b.n	800836e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008330:	d11f      	bne.n	8008372 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008336:	e01c      	b.n	8008372 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b02      	cmp	r3, #2
 800833c:	d903      	bls.n	8008346 <DMA_CheckFifoParam+0xb6>
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2b03      	cmp	r3, #3
 8008342:	d003      	beq.n	800834c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008344:	e018      	b.n	8008378 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	73fb      	strb	r3, [r7, #15]
      break;
 800834a:	e015      	b.n	8008378 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008350:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00e      	beq.n	8008376 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	73fb      	strb	r3, [r7, #15]
      break;
 800835c:	e00b      	b.n	8008376 <DMA_CheckFifoParam+0xe6>
      break;
 800835e:	bf00      	nop
 8008360:	e00a      	b.n	8008378 <DMA_CheckFifoParam+0xe8>
      break;
 8008362:	bf00      	nop
 8008364:	e008      	b.n	8008378 <DMA_CheckFifoParam+0xe8>
      break;
 8008366:	bf00      	nop
 8008368:	e006      	b.n	8008378 <DMA_CheckFifoParam+0xe8>
      break;
 800836a:	bf00      	nop
 800836c:	e004      	b.n	8008378 <DMA_CheckFifoParam+0xe8>
      break;
 800836e:	bf00      	nop
 8008370:	e002      	b.n	8008378 <DMA_CheckFifoParam+0xe8>
      break;   
 8008372:	bf00      	nop
 8008374:	e000      	b.n	8008378 <DMA_CheckFifoParam+0xe8>
      break;
 8008376:	bf00      	nop
    }
  } 
  
  return status; 
 8008378:	7bfb      	ldrb	r3, [r7, #15]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop

08008388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008388:	b480      	push	{r7}
 800838a:	b089      	sub	sp, #36	@ 0x24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008392:	2300      	movs	r3, #0
 8008394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008396:	2300      	movs	r3, #0
 8008398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800839a:	2300      	movs	r3, #0
 800839c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800839e:	2300      	movs	r3, #0
 80083a0:	61fb      	str	r3, [r7, #28]
 80083a2:	e16b      	b.n	800867c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80083a4:	2201      	movs	r2, #1
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4013      	ands	r3, r2
 80083b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	429a      	cmp	r2, r3
 80083be:	f040 815a 	bne.w	8008676 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f003 0303 	and.w	r3, r3, #3
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d005      	beq.n	80083da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d130      	bne.n	800843c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	005b      	lsls	r3, r3, #1
 80083e4:	2203      	movs	r2, #3
 80083e6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ea:	43db      	mvns	r3, r3
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	4013      	ands	r3, r2
 80083f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	fa02 f303 	lsl.w	r3, r2, r3
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	4313      	orrs	r3, r2
 8008402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008410:	2201      	movs	r2, #1
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	fa02 f303 	lsl.w	r3, r2, r3
 8008418:	43db      	mvns	r3, r3
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	4013      	ands	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	091b      	lsrs	r3, r3, #4
 8008426:	f003 0201 	and.w	r2, r3, #1
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	fa02 f303 	lsl.w	r3, r2, r3
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	4313      	orrs	r3, r2
 8008434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f003 0303 	and.w	r3, r3, #3
 8008444:	2b03      	cmp	r3, #3
 8008446:	d017      	beq.n	8008478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	005b      	lsls	r3, r3, #1
 8008452:	2203      	movs	r2, #3
 8008454:	fa02 f303 	lsl.w	r3, r2, r3
 8008458:	43db      	mvns	r3, r3
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	4013      	ands	r3, r2
 800845e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	fa02 f303 	lsl.w	r3, r2, r3
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	4313      	orrs	r3, r2
 8008470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f003 0303 	and.w	r3, r3, #3
 8008480:	2b02      	cmp	r3, #2
 8008482:	d123      	bne.n	80084cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	08da      	lsrs	r2, r3, #3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3208      	adds	r2, #8
 800848c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	f003 0307 	and.w	r3, r3, #7
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	220f      	movs	r2, #15
 800849c:	fa02 f303 	lsl.w	r3, r2, r3
 80084a0:	43db      	mvns	r3, r3
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	4013      	ands	r3, r2
 80084a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	691a      	ldr	r2, [r3, #16]
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	fa02 f303 	lsl.w	r3, r2, r3
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	08da      	lsrs	r2, r3, #3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3208      	adds	r2, #8
 80084c6:	69b9      	ldr	r1, [r7, #24]
 80084c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	2203      	movs	r2, #3
 80084d8:	fa02 f303 	lsl.w	r3, r2, r3
 80084dc:	43db      	mvns	r3, r3
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	4013      	ands	r3, r2
 80084e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f003 0203 	and.w	r2, r3, #3
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	fa02 f303 	lsl.w	r3, r2, r3
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 80b4 	beq.w	8008676 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	4b60      	ldr	r3, [pc, #384]	@ (8008694 <HAL_GPIO_Init+0x30c>)
 8008514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008516:	4a5f      	ldr	r2, [pc, #380]	@ (8008694 <HAL_GPIO_Init+0x30c>)
 8008518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800851c:	6453      	str	r3, [r2, #68]	@ 0x44
 800851e:	4b5d      	ldr	r3, [pc, #372]	@ (8008694 <HAL_GPIO_Init+0x30c>)
 8008520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800852a:	4a5b      	ldr	r2, [pc, #364]	@ (8008698 <HAL_GPIO_Init+0x310>)
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	089b      	lsrs	r3, r3, #2
 8008530:	3302      	adds	r3, #2
 8008532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	220f      	movs	r2, #15
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	43db      	mvns	r3, r3
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	4013      	ands	r3, r2
 800854c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a52      	ldr	r2, [pc, #328]	@ (800869c <HAL_GPIO_Init+0x314>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d02b      	beq.n	80085ae <HAL_GPIO_Init+0x226>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a51      	ldr	r2, [pc, #324]	@ (80086a0 <HAL_GPIO_Init+0x318>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d025      	beq.n	80085aa <HAL_GPIO_Init+0x222>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a50      	ldr	r2, [pc, #320]	@ (80086a4 <HAL_GPIO_Init+0x31c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d01f      	beq.n	80085a6 <HAL_GPIO_Init+0x21e>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a4f      	ldr	r2, [pc, #316]	@ (80086a8 <HAL_GPIO_Init+0x320>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d019      	beq.n	80085a2 <HAL_GPIO_Init+0x21a>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a4e      	ldr	r2, [pc, #312]	@ (80086ac <HAL_GPIO_Init+0x324>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d013      	beq.n	800859e <HAL_GPIO_Init+0x216>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a4d      	ldr	r2, [pc, #308]	@ (80086b0 <HAL_GPIO_Init+0x328>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00d      	beq.n	800859a <HAL_GPIO_Init+0x212>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a4c      	ldr	r2, [pc, #304]	@ (80086b4 <HAL_GPIO_Init+0x32c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d007      	beq.n	8008596 <HAL_GPIO_Init+0x20e>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a4b      	ldr	r2, [pc, #300]	@ (80086b8 <HAL_GPIO_Init+0x330>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d101      	bne.n	8008592 <HAL_GPIO_Init+0x20a>
 800858e:	2307      	movs	r3, #7
 8008590:	e00e      	b.n	80085b0 <HAL_GPIO_Init+0x228>
 8008592:	2308      	movs	r3, #8
 8008594:	e00c      	b.n	80085b0 <HAL_GPIO_Init+0x228>
 8008596:	2306      	movs	r3, #6
 8008598:	e00a      	b.n	80085b0 <HAL_GPIO_Init+0x228>
 800859a:	2305      	movs	r3, #5
 800859c:	e008      	b.n	80085b0 <HAL_GPIO_Init+0x228>
 800859e:	2304      	movs	r3, #4
 80085a0:	e006      	b.n	80085b0 <HAL_GPIO_Init+0x228>
 80085a2:	2303      	movs	r3, #3
 80085a4:	e004      	b.n	80085b0 <HAL_GPIO_Init+0x228>
 80085a6:	2302      	movs	r3, #2
 80085a8:	e002      	b.n	80085b0 <HAL_GPIO_Init+0x228>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e000      	b.n	80085b0 <HAL_GPIO_Init+0x228>
 80085ae:	2300      	movs	r3, #0
 80085b0:	69fa      	ldr	r2, [r7, #28]
 80085b2:	f002 0203 	and.w	r2, r2, #3
 80085b6:	0092      	lsls	r2, r2, #2
 80085b8:	4093      	lsls	r3, r2
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	4313      	orrs	r3, r2
 80085be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80085c0:	4935      	ldr	r1, [pc, #212]	@ (8008698 <HAL_GPIO_Init+0x310>)
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	089b      	lsrs	r3, r3, #2
 80085c6:	3302      	adds	r3, #2
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80085ce:	4b3b      	ldr	r3, [pc, #236]	@ (80086bc <HAL_GPIO_Init+0x334>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	43db      	mvns	r3, r3
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	4013      	ands	r3, r2
 80085dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80085f2:	4a32      	ldr	r2, [pc, #200]	@ (80086bc <HAL_GPIO_Init+0x334>)
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80085f8:	4b30      	ldr	r3, [pc, #192]	@ (80086bc <HAL_GPIO_Init+0x334>)
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	43db      	mvns	r3, r3
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	4013      	ands	r3, r2
 8008606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	4313      	orrs	r3, r2
 800861a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800861c:	4a27      	ldr	r2, [pc, #156]	@ (80086bc <HAL_GPIO_Init+0x334>)
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008622:	4b26      	ldr	r3, [pc, #152]	@ (80086bc <HAL_GPIO_Init+0x334>)
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	43db      	mvns	r3, r3
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	4013      	ands	r3, r2
 8008630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	4313      	orrs	r3, r2
 8008644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008646:	4a1d      	ldr	r2, [pc, #116]	@ (80086bc <HAL_GPIO_Init+0x334>)
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800864c:	4b1b      	ldr	r3, [pc, #108]	@ (80086bc <HAL_GPIO_Init+0x334>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	43db      	mvns	r3, r3
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	4013      	ands	r3, r2
 800865a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	4313      	orrs	r3, r2
 800866e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008670:	4a12      	ldr	r2, [pc, #72]	@ (80086bc <HAL_GPIO_Init+0x334>)
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	3301      	adds	r3, #1
 800867a:	61fb      	str	r3, [r7, #28]
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	2b0f      	cmp	r3, #15
 8008680:	f67f ae90 	bls.w	80083a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008684:	bf00      	nop
 8008686:	bf00      	nop
 8008688:	3724      	adds	r7, #36	@ 0x24
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	40023800 	.word	0x40023800
 8008698:	40013800 	.word	0x40013800
 800869c:	40020000 	.word	0x40020000
 80086a0:	40020400 	.word	0x40020400
 80086a4:	40020800 	.word	0x40020800
 80086a8:	40020c00 	.word	0x40020c00
 80086ac:	40021000 	.word	0x40021000
 80086b0:	40021400 	.word	0x40021400
 80086b4:	40021800 	.word	0x40021800
 80086b8:	40021c00 	.word	0x40021c00
 80086bc:	40013c00 	.word	0x40013c00

080086c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	807b      	strh	r3, [r7, #2]
 80086cc:	4613      	mov	r3, r2
 80086ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086d0:	787b      	ldrb	r3, [r7, #1]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086d6:	887a      	ldrh	r2, [r7, #2]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80086dc:	e003      	b.n	80086e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80086de:	887b      	ldrh	r3, [r7, #2]
 80086e0:	041a      	lsls	r2, r3, #16
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	619a      	str	r2, [r3, #24]
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
	...

080086f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4603      	mov	r3, r0
 80086fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80086fe:	4b08      	ldr	r3, [pc, #32]	@ (8008720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008700:	695a      	ldr	r2, [r3, #20]
 8008702:	88fb      	ldrh	r3, [r7, #6]
 8008704:	4013      	ands	r3, r2
 8008706:	2b00      	cmp	r3, #0
 8008708:	d006      	beq.n	8008718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800870a:	4a05      	ldr	r2, [pc, #20]	@ (8008720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800870c:	88fb      	ldrh	r3, [r7, #6]
 800870e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008710:	88fb      	ldrh	r3, [r7, #6]
 8008712:	4618      	mov	r0, r3
 8008714:	f7f9 fa86 	bl	8001c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	40013c00 	.word	0x40013c00

08008724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e12b      	b.n	800898e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7fe f912 	bl	8006974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2224      	movs	r2, #36	@ 0x24
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0201 	bic.w	r2, r2, #1
 8008766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008788:	f001 fc48 	bl	800a01c <HAL_RCC_GetPCLK1Freq>
 800878c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	4a81      	ldr	r2, [pc, #516]	@ (8008998 <HAL_I2C_Init+0x274>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d807      	bhi.n	80087a8 <HAL_I2C_Init+0x84>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4a80      	ldr	r2, [pc, #512]	@ (800899c <HAL_I2C_Init+0x278>)
 800879c:	4293      	cmp	r3, r2
 800879e:	bf94      	ite	ls
 80087a0:	2301      	movls	r3, #1
 80087a2:	2300      	movhi	r3, #0
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	e006      	b.n	80087b6 <HAL_I2C_Init+0x92>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4a7d      	ldr	r2, [pc, #500]	@ (80089a0 <HAL_I2C_Init+0x27c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	bf94      	ite	ls
 80087b0:	2301      	movls	r3, #1
 80087b2:	2300      	movhi	r3, #0
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e0e7      	b.n	800898e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4a78      	ldr	r2, [pc, #480]	@ (80089a4 <HAL_I2C_Init+0x280>)
 80087c2:	fba2 2303 	umull	r2, r3, r2, r3
 80087c6:	0c9b      	lsrs	r3, r3, #18
 80087c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	430a      	orrs	r2, r1
 80087dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	4a6a      	ldr	r2, [pc, #424]	@ (8008998 <HAL_I2C_Init+0x274>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d802      	bhi.n	80087f8 <HAL_I2C_Init+0xd4>
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	3301      	adds	r3, #1
 80087f6:	e009      	b.n	800880c <HAL_I2C_Init+0xe8>
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80087fe:	fb02 f303 	mul.w	r3, r2, r3
 8008802:	4a69      	ldr	r2, [pc, #420]	@ (80089a8 <HAL_I2C_Init+0x284>)
 8008804:	fba2 2303 	umull	r2, r3, r2, r3
 8008808:	099b      	lsrs	r3, r3, #6
 800880a:	3301      	adds	r3, #1
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6812      	ldr	r2, [r2, #0]
 8008810:	430b      	orrs	r3, r1
 8008812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800881e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	495c      	ldr	r1, [pc, #368]	@ (8008998 <HAL_I2C_Init+0x274>)
 8008828:	428b      	cmp	r3, r1
 800882a:	d819      	bhi.n	8008860 <HAL_I2C_Init+0x13c>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	1e59      	subs	r1, r3, #1
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	005b      	lsls	r3, r3, #1
 8008836:	fbb1 f3f3 	udiv	r3, r1, r3
 800883a:	1c59      	adds	r1, r3, #1
 800883c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008840:	400b      	ands	r3, r1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00a      	beq.n	800885c <HAL_I2C_Init+0x138>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	1e59      	subs	r1, r3, #1
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	fbb1 f3f3 	udiv	r3, r1, r3
 8008854:	3301      	adds	r3, #1
 8008856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800885a:	e051      	b.n	8008900 <HAL_I2C_Init+0x1dc>
 800885c:	2304      	movs	r3, #4
 800885e:	e04f      	b.n	8008900 <HAL_I2C_Init+0x1dc>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d111      	bne.n	800888c <HAL_I2C_Init+0x168>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	1e58      	subs	r0, r3, #1
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6859      	ldr	r1, [r3, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	440b      	add	r3, r1
 8008876:	fbb0 f3f3 	udiv	r3, r0, r3
 800887a:	3301      	adds	r3, #1
 800887c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008880:	2b00      	cmp	r3, #0
 8008882:	bf0c      	ite	eq
 8008884:	2301      	moveq	r3, #1
 8008886:	2300      	movne	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	e012      	b.n	80088b2 <HAL_I2C_Init+0x18e>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	1e58      	subs	r0, r3, #1
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6859      	ldr	r1, [r3, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	440b      	add	r3, r1
 800889a:	0099      	lsls	r1, r3, #2
 800889c:	440b      	add	r3, r1
 800889e:	fbb0 f3f3 	udiv	r3, r0, r3
 80088a2:	3301      	adds	r3, #1
 80088a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bf0c      	ite	eq
 80088ac:	2301      	moveq	r3, #1
 80088ae:	2300      	movne	r3, #0
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <HAL_I2C_Init+0x196>
 80088b6:	2301      	movs	r3, #1
 80088b8:	e022      	b.n	8008900 <HAL_I2C_Init+0x1dc>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10e      	bne.n	80088e0 <HAL_I2C_Init+0x1bc>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	1e58      	subs	r0, r3, #1
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6859      	ldr	r1, [r3, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	440b      	add	r3, r1
 80088d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80088d4:	3301      	adds	r3, #1
 80088d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088de:	e00f      	b.n	8008900 <HAL_I2C_Init+0x1dc>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	1e58      	subs	r0, r3, #1
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6859      	ldr	r1, [r3, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	440b      	add	r3, r1
 80088ee:	0099      	lsls	r1, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80088f6:	3301      	adds	r3, #1
 80088f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	6809      	ldr	r1, [r1, #0]
 8008904:	4313      	orrs	r3, r2
 8008906:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	69da      	ldr	r2, [r3, #28]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	431a      	orrs	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	430a      	orrs	r2, r1
 8008922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800892e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	6911      	ldr	r1, [r2, #16]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	68d2      	ldr	r2, [r2, #12]
 800893a:	4311      	orrs	r1, r2
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6812      	ldr	r2, [r2, #0]
 8008940:	430b      	orrs	r3, r1
 8008942:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695a      	ldr	r2, [r3, #20]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	431a      	orrs	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0201 	orr.w	r2, r2, #1
 800896e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2220      	movs	r2, #32
 800897a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	000186a0 	.word	0x000186a0
 800899c:	001e847f 	.word	0x001e847f
 80089a0:	003d08ff 	.word	0x003d08ff
 80089a4:	431bde83 	.word	0x431bde83
 80089a8:	10624dd3 	.word	0x10624dd3

080089ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	4608      	mov	r0, r1
 80089b6:	4611      	mov	r1, r2
 80089b8:	461a      	mov	r2, r3
 80089ba:	4603      	mov	r3, r0
 80089bc:	817b      	strh	r3, [r7, #10]
 80089be:	460b      	mov	r3, r1
 80089c0:	813b      	strh	r3, [r7, #8]
 80089c2:	4613      	mov	r3, r2
 80089c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80089c6:	f7fe fb9d 	bl	8007104 <HAL_GetTick>
 80089ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b20      	cmp	r3, #32
 80089d6:	f040 80d9 	bne.w	8008b8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	2319      	movs	r3, #25
 80089e0:	2201      	movs	r2, #1
 80089e2:	496d      	ldr	r1, [pc, #436]	@ (8008b98 <HAL_I2C_Mem_Write+0x1ec>)
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fc8b 	bl	8009300 <I2C_WaitOnFlagUntilTimeout>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80089f0:	2302      	movs	r3, #2
 80089f2:	e0cc      	b.n	8008b8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d101      	bne.n	8008a02 <HAL_I2C_Mem_Write+0x56>
 80089fe:	2302      	movs	r3, #2
 8008a00:	e0c5      	b.n	8008b8e <HAL_I2C_Mem_Write+0x1e2>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d007      	beq.n	8008a28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0201 	orr.w	r2, r2, #1
 8008a26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2221      	movs	r2, #33	@ 0x21
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2240      	movs	r2, #64	@ 0x40
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a3a      	ldr	r2, [r7, #32]
 8008a52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4a4d      	ldr	r2, [pc, #308]	@ (8008b9c <HAL_I2C_Mem_Write+0x1f0>)
 8008a68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a6a:	88f8      	ldrh	r0, [r7, #6]
 8008a6c:	893a      	ldrh	r2, [r7, #8]
 8008a6e:	8979      	ldrh	r1, [r7, #10]
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	4603      	mov	r3, r0
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 fac2 	bl	8009004 <I2C_RequestMemoryWrite>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d052      	beq.n	8008b2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e081      	b.n	8008b8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 fd50 	bl	8009534 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00d      	beq.n	8008ab6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d107      	bne.n	8008ab2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ab0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e06b      	b.n	8008b8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aba:	781a      	ldrb	r2, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d11b      	bne.n	8008b2c <HAL_I2C_Mem_Write+0x180>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d017      	beq.n	8008b2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b00:	781a      	ldrb	r2, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b16:	3b01      	subs	r3, #1
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	3b01      	subs	r3, #1
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1aa      	bne.n	8008a8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 fd43 	bl	80095c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00d      	beq.n	8008b60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d107      	bne.n	8008b5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e016      	b.n	8008b8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2220      	movs	r2, #32
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e000      	b.n	8008b8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008b8c:	2302      	movs	r3, #2
  }
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	00100002 	.word	0x00100002
 8008b9c:	ffff0000 	.word	0xffff0000

08008ba0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b08c      	sub	sp, #48	@ 0x30
 8008ba4:	af02      	add	r7, sp, #8
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	4608      	mov	r0, r1
 8008baa:	4611      	mov	r1, r2
 8008bac:	461a      	mov	r2, r3
 8008bae:	4603      	mov	r3, r0
 8008bb0:	817b      	strh	r3, [r7, #10]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	813b      	strh	r3, [r7, #8]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008bba:	f7fe faa3 	bl	8007104 <HAL_GetTick>
 8008bbe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b20      	cmp	r3, #32
 8008bca:	f040 8214 	bne.w	8008ff6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	2319      	movs	r3, #25
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	497b      	ldr	r1, [pc, #492]	@ (8008dc4 <HAL_I2C_Mem_Read+0x224>)
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 fb91 	bl	8009300 <I2C_WaitOnFlagUntilTimeout>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008be4:	2302      	movs	r3, #2
 8008be6:	e207      	b.n	8008ff8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d101      	bne.n	8008bf6 <HAL_I2C_Mem_Read+0x56>
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e200      	b.n	8008ff8 <HAL_I2C_Mem_Read+0x458>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d007      	beq.n	8008c1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f042 0201 	orr.w	r2, r2, #1
 8008c1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2222      	movs	r2, #34	@ 0x22
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2240      	movs	r2, #64	@ 0x40
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4a5b      	ldr	r2, [pc, #364]	@ (8008dc8 <HAL_I2C_Mem_Read+0x228>)
 8008c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c5e:	88f8      	ldrh	r0, [r7, #6]
 8008c60:	893a      	ldrh	r2, [r7, #8]
 8008c62:	8979      	ldrh	r1, [r7, #10]
 8008c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 fa5e 	bl	8009130 <I2C_RequestMemoryRead>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e1bc      	b.n	8008ff8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d113      	bne.n	8008cae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c86:	2300      	movs	r3, #0
 8008c88:	623b      	str	r3, [r7, #32]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	623b      	str	r3, [r7, #32]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	623b      	str	r3, [r7, #32]
 8008c9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	e190      	b.n	8008fd0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d11b      	bne.n	8008cee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	61fb      	str	r3, [r7, #28]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	61fb      	str	r3, [r7, #28]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	e170      	b.n	8008fd0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d11b      	bne.n	8008d2e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d16:	2300      	movs	r3, #0
 8008d18:	61bb      	str	r3, [r7, #24]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	61bb      	str	r3, [r7, #24]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	61bb      	str	r3, [r7, #24]
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	e150      	b.n	8008fd0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d2e:	2300      	movs	r3, #0
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	617b      	str	r3, [r7, #20]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	617b      	str	r3, [r7, #20]
 8008d42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008d44:	e144      	b.n	8008fd0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	f200 80f1 	bhi.w	8008f32 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d123      	bne.n	8008da0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 fc79 	bl	8009654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e145      	b.n	8008ff8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	691a      	ldr	r2, [r3, #16]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d76:	b2d2      	uxtb	r2, r2
 8008d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	3b01      	subs	r3, #1
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008d9e:	e117      	b.n	8008fd0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d14e      	bne.n	8008e46 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dae:	2200      	movs	r2, #0
 8008db0:	4906      	ldr	r1, [pc, #24]	@ (8008dcc <HAL_I2C_Mem_Read+0x22c>)
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 faa4 	bl	8009300 <I2C_WaitOnFlagUntilTimeout>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d008      	beq.n	8008dd0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e11a      	b.n	8008ff8 <HAL_I2C_Mem_Read+0x458>
 8008dc2:	bf00      	nop
 8008dc4:	00100002 	.word	0x00100002
 8008dc8:	ffff0000 	.word	0xffff0000
 8008dcc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	691a      	ldr	r2, [r3, #16]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dea:	b2d2      	uxtb	r2, r2
 8008dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	691a      	ldr	r2, [r3, #16]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1c:	b2d2      	uxtb	r2, r2
 8008e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008e44:	e0c4      	b.n	8008fd0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	496c      	ldr	r1, [pc, #432]	@ (8009000 <HAL_I2C_Mem_Read+0x460>)
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 fa55 	bl	8009300 <I2C_WaitOnFlagUntilTimeout>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e0cb      	b.n	8008ff8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	691a      	ldr	r2, [r3, #16]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7a:	b2d2      	uxtb	r2, r2
 8008e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4955      	ldr	r1, [pc, #340]	@ (8009000 <HAL_I2C_Mem_Read+0x460>)
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f000 fa27 	bl	8009300 <I2C_WaitOnFlagUntilTimeout>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e09d      	b.n	8008ff8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	691a      	ldr	r2, [r3, #16]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	691a      	ldr	r2, [r3, #16]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f08:	b2d2      	uxtb	r2, r2
 8008f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f30:	e04e      	b.n	8008fd0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 fb8c 	bl	8009654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e058      	b.n	8008ff8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	691a      	ldr	r2, [r3, #16]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f50:	b2d2      	uxtb	r2, r2
 8008f52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f62:	3b01      	subs	r3, #1
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	3b01      	subs	r3, #1
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	f003 0304 	and.w	r3, r3, #4
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d124      	bne.n	8008fd0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d107      	bne.n	8008f9e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f9c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	691a      	ldr	r2, [r3, #16]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa8:	b2d2      	uxtb	r2, r2
 8008faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f47f aeb6 	bne.w	8008d46 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e000      	b.n	8008ff8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008ff6:	2302      	movs	r3, #2
  }
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3728      	adds	r7, #40	@ 0x28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	00010004 	.word	0x00010004

08009004 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af02      	add	r7, sp, #8
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	4608      	mov	r0, r1
 800900e:	4611      	mov	r1, r2
 8009010:	461a      	mov	r2, r3
 8009012:	4603      	mov	r3, r0
 8009014:	817b      	strh	r3, [r7, #10]
 8009016:	460b      	mov	r3, r1
 8009018:	813b      	strh	r3, [r7, #8]
 800901a:	4613      	mov	r3, r2
 800901c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800902c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	2200      	movs	r2, #0
 8009036:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 f960 	bl	8009300 <I2C_WaitOnFlagUntilTimeout>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00d      	beq.n	8009062 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009054:	d103      	bne.n	800905e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800905c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e05f      	b.n	8009122 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009062:	897b      	ldrh	r3, [r7, #10]
 8009064:	b2db      	uxtb	r3, r3
 8009066:	461a      	mov	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009070:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009074:	6a3a      	ldr	r2, [r7, #32]
 8009076:	492d      	ldr	r1, [pc, #180]	@ (800912c <I2C_RequestMemoryWrite+0x128>)
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 f9bb 	bl	80093f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e04c      	b.n	8009122 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009088:	2300      	movs	r3, #0
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	617b      	str	r3, [r7, #20]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	617b      	str	r3, [r7, #20]
 800909c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800909e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090a0:	6a39      	ldr	r1, [r7, #32]
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 fa46 	bl	8009534 <I2C_WaitOnTXEFlagUntilTimeout>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00d      	beq.n	80090ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b2:	2b04      	cmp	r3, #4
 80090b4:	d107      	bne.n	80090c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e02b      	b.n	8009122 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80090ca:	88fb      	ldrh	r3, [r7, #6]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d105      	bne.n	80090dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80090d0:	893b      	ldrh	r3, [r7, #8]
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	611a      	str	r2, [r3, #16]
 80090da:	e021      	b.n	8009120 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80090dc:	893b      	ldrh	r3, [r7, #8]
 80090de:	0a1b      	lsrs	r3, r3, #8
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090ec:	6a39      	ldr	r1, [r7, #32]
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 fa20 	bl	8009534 <I2C_WaitOnTXEFlagUntilTimeout>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00d      	beq.n	8009116 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d107      	bne.n	8009112 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009110:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e005      	b.n	8009122 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009116:	893b      	ldrh	r3, [r7, #8]
 8009118:	b2da      	uxtb	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	00010002 	.word	0x00010002

08009130 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af02      	add	r7, sp, #8
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	4608      	mov	r0, r1
 800913a:	4611      	mov	r1, r2
 800913c:	461a      	mov	r2, r3
 800913e:	4603      	mov	r3, r0
 8009140:	817b      	strh	r3, [r7, #10]
 8009142:	460b      	mov	r3, r1
 8009144:	813b      	strh	r3, [r7, #8]
 8009146:	4613      	mov	r3, r2
 8009148:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009158:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009168:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	2200      	movs	r2, #0
 8009172:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 f8c2 	bl	8009300 <I2C_WaitOnFlagUntilTimeout>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00d      	beq.n	800919e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800918c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009190:	d103      	bne.n	800919a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009198:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e0aa      	b.n	80092f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800919e:	897b      	ldrh	r3, [r7, #10]
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	461a      	mov	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80091ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	6a3a      	ldr	r2, [r7, #32]
 80091b2:	4952      	ldr	r1, [pc, #328]	@ (80092fc <I2C_RequestMemoryRead+0x1cc>)
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 f91d 	bl	80093f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e097      	b.n	80092f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091c4:	2300      	movs	r3, #0
 80091c6:	617b      	str	r3, [r7, #20]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091dc:	6a39      	ldr	r1, [r7, #32]
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f000 f9a8 	bl	8009534 <I2C_WaitOnTXEFlagUntilTimeout>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00d      	beq.n	8009206 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d107      	bne.n	8009202 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009200:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e076      	b.n	80092f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d105      	bne.n	8009218 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800920c:	893b      	ldrh	r3, [r7, #8]
 800920e:	b2da      	uxtb	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	611a      	str	r2, [r3, #16]
 8009216:	e021      	b.n	800925c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009218:	893b      	ldrh	r3, [r7, #8]
 800921a:	0a1b      	lsrs	r3, r3, #8
 800921c:	b29b      	uxth	r3, r3
 800921e:	b2da      	uxtb	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009228:	6a39      	ldr	r1, [r7, #32]
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 f982 	bl	8009534 <I2C_WaitOnTXEFlagUntilTimeout>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00d      	beq.n	8009252 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800923a:	2b04      	cmp	r3, #4
 800923c:	d107      	bne.n	800924e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800924c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e050      	b.n	80092f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009252:	893b      	ldrh	r3, [r7, #8]
 8009254:	b2da      	uxtb	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800925c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800925e:	6a39      	ldr	r1, [r7, #32]
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f000 f967 	bl	8009534 <I2C_WaitOnTXEFlagUntilTimeout>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00d      	beq.n	8009288 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009270:	2b04      	cmp	r3, #4
 8009272:	d107      	bne.n	8009284 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009282:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e035      	b.n	80092f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009296:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	2200      	movs	r2, #0
 80092a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 f82b 	bl	8009300 <I2C_WaitOnFlagUntilTimeout>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00d      	beq.n	80092cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092be:	d103      	bne.n	80092c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e013      	b.n	80092f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80092cc:	897b      	ldrh	r3, [r7, #10]
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	f043 0301 	orr.w	r3, r3, #1
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092de:	6a3a      	ldr	r2, [r7, #32]
 80092e0:	4906      	ldr	r1, [pc, #24]	@ (80092fc <I2C_RequestMemoryRead+0x1cc>)
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f000 f886 	bl	80093f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e000      	b.n	80092f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	00010002 	.word	0x00010002

08009300 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	4613      	mov	r3, r2
 800930e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009310:	e048      	b.n	80093a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009318:	d044      	beq.n	80093a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800931a:	f7fd fef3 	bl	8007104 <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d302      	bcc.n	8009330 <I2C_WaitOnFlagUntilTimeout+0x30>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d139      	bne.n	80093a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	0c1b      	lsrs	r3, r3, #16
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b01      	cmp	r3, #1
 8009338:	d10d      	bne.n	8009356 <I2C_WaitOnFlagUntilTimeout+0x56>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	695b      	ldr	r3, [r3, #20]
 8009340:	43da      	mvns	r2, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	4013      	ands	r3, r2
 8009346:	b29b      	uxth	r3, r3
 8009348:	2b00      	cmp	r3, #0
 800934a:	bf0c      	ite	eq
 800934c:	2301      	moveq	r3, #1
 800934e:	2300      	movne	r3, #0
 8009350:	b2db      	uxtb	r3, r3
 8009352:	461a      	mov	r2, r3
 8009354:	e00c      	b.n	8009370 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	43da      	mvns	r2, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	4013      	ands	r3, r2
 8009362:	b29b      	uxth	r3, r3
 8009364:	2b00      	cmp	r3, #0
 8009366:	bf0c      	ite	eq
 8009368:	2301      	moveq	r3, #1
 800936a:	2300      	movne	r3, #0
 800936c:	b2db      	uxtb	r3, r3
 800936e:	461a      	mov	r2, r3
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	429a      	cmp	r2, r3
 8009374:	d116      	bne.n	80093a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2220      	movs	r2, #32
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009390:	f043 0220 	orr.w	r2, r3, #32
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e023      	b.n	80093ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	0c1b      	lsrs	r3, r3, #16
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d10d      	bne.n	80093ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	43da      	mvns	r2, r3
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	4013      	ands	r3, r2
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	bf0c      	ite	eq
 80093c0:	2301      	moveq	r3, #1
 80093c2:	2300      	movne	r3, #0
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	461a      	mov	r2, r3
 80093c8:	e00c      	b.n	80093e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	43da      	mvns	r2, r3
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	4013      	ands	r3, r2
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	2b00      	cmp	r3, #0
 80093da:	bf0c      	ite	eq
 80093dc:	2301      	moveq	r3, #1
 80093de:	2300      	movne	r3, #0
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	461a      	mov	r2, r3
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d093      	beq.n	8009312 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
 8009400:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009402:	e071      	b.n	80094e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800940e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009412:	d123      	bne.n	800945c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009422:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800942c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2220      	movs	r2, #32
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009448:	f043 0204 	orr.w	r2, r3, #4
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e067      	b.n	800952c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009462:	d041      	beq.n	80094e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009464:	f7fd fe4e 	bl	8007104 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	429a      	cmp	r2, r3
 8009472:	d302      	bcc.n	800947a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d136      	bne.n	80094e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	0c1b      	lsrs	r3, r3, #16
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b01      	cmp	r3, #1
 8009482:	d10c      	bne.n	800949e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	43da      	mvns	r2, r3
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	4013      	ands	r3, r2
 8009490:	b29b      	uxth	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	bf14      	ite	ne
 8009496:	2301      	movne	r3, #1
 8009498:	2300      	moveq	r3, #0
 800949a:	b2db      	uxtb	r3, r3
 800949c:	e00b      	b.n	80094b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	43da      	mvns	r2, r3
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	4013      	ands	r3, r2
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bf14      	ite	ne
 80094b0:	2301      	movne	r3, #1
 80094b2:	2300      	moveq	r3, #0
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d016      	beq.n	80094e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2220      	movs	r2, #32
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d4:	f043 0220 	orr.w	r2, r3, #32
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e021      	b.n	800952c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	0c1b      	lsrs	r3, r3, #16
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d10c      	bne.n	800950c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	43da      	mvns	r2, r3
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	4013      	ands	r3, r2
 80094fe:	b29b      	uxth	r3, r3
 8009500:	2b00      	cmp	r3, #0
 8009502:	bf14      	ite	ne
 8009504:	2301      	movne	r3, #1
 8009506:	2300      	moveq	r3, #0
 8009508:	b2db      	uxtb	r3, r3
 800950a:	e00b      	b.n	8009524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	43da      	mvns	r2, r3
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	4013      	ands	r3, r2
 8009518:	b29b      	uxth	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	bf14      	ite	ne
 800951e:	2301      	movne	r3, #1
 8009520:	2300      	moveq	r3, #0
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	f47f af6d 	bne.w	8009404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009540:	e034      	b.n	80095ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f000 f8e3 	bl	800970e <I2C_IsAcknowledgeFailed>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e034      	b.n	80095bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009558:	d028      	beq.n	80095ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800955a:	f7fd fdd3 	bl	8007104 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	429a      	cmp	r2, r3
 8009568:	d302      	bcc.n	8009570 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d11d      	bne.n	80095ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800957a:	2b80      	cmp	r3, #128	@ 0x80
 800957c:	d016      	beq.n	80095ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2220      	movs	r2, #32
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009598:	f043 0220 	orr.w	r2, r3, #32
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e007      	b.n	80095bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095b6:	2b80      	cmp	r3, #128	@ 0x80
 80095b8:	d1c3      	bne.n	8009542 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80095d0:	e034      	b.n	800963c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 f89b 	bl	800970e <I2C_IsAcknowledgeFailed>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e034      	b.n	800964c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e8:	d028      	beq.n	800963c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095ea:	f7fd fd8b 	bl	8007104 <HAL_GetTick>
 80095ee:	4602      	mov	r2, r0
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d302      	bcc.n	8009600 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d11d      	bne.n	800963c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	2b04      	cmp	r3, #4
 800960c:	d016      	beq.n	800963c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2220      	movs	r2, #32
 8009618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009628:	f043 0220 	orr.w	r2, r3, #32
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e007      	b.n	800964c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	f003 0304 	and.w	r3, r3, #4
 8009646:	2b04      	cmp	r3, #4
 8009648:	d1c3      	bne.n	80095d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009660:	e049      	b.n	80096f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	f003 0310 	and.w	r3, r3, #16
 800966c:	2b10      	cmp	r3, #16
 800966e:	d119      	bne.n	80096a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f06f 0210 	mvn.w	r2, #16
 8009678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2220      	movs	r2, #32
 8009684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e030      	b.n	8009706 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096a4:	f7fd fd2e 	bl	8007104 <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d302      	bcc.n	80096ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d11d      	bne.n	80096f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c4:	2b40      	cmp	r3, #64	@ 0x40
 80096c6:	d016      	beq.n	80096f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e2:	f043 0220 	orr.w	r2, r3, #32
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e007      	b.n	8009706 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009700:	2b40      	cmp	r3, #64	@ 0x40
 8009702:	d1ae      	bne.n	8009662 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800970e:	b480      	push	{r7}
 8009710:	b083      	sub	sp, #12
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009724:	d11b      	bne.n	800975e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800972e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974a:	f043 0204 	orr.w	r2, r3, #4
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e000      	b.n	8009760 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009772:	4b06      	ldr	r3, [pc, #24]	@ (800978c <HAL_PWR_EnableBkUpAccess+0x20>)
 8009774:	2201      	movs	r2, #1
 8009776:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009778:	4b05      	ldr	r3, [pc, #20]	@ (8009790 <HAL_PWR_EnableBkUpAccess+0x24>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800977e:	687b      	ldr	r3, [r7, #4]
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	420e0020 	.word	0x420e0020
 8009790:	40007000 	.word	0x40007000

08009794 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800979a:	4b06      	ldr	r3, [pc, #24]	@ (80097b4 <HAL_PWR_DisableBkUpAccess+0x20>)
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80097a0:	4b05      	ldr	r3, [pc, #20]	@ (80097b8 <HAL_PWR_DisableBkUpAccess+0x24>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80097a6:	687b      	ldr	r3, [r7, #4]
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	420e0020 	.word	0x420e0020
 80097b8:	40007000 	.word	0x40007000

080097bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e267      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d075      	beq.n	80098c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80097da:	4b88      	ldr	r3, [pc, #544]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f003 030c 	and.w	r3, r3, #12
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d00c      	beq.n	8009800 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097e6:	4b85      	ldr	r3, [pc, #532]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80097ee:	2b08      	cmp	r3, #8
 80097f0:	d112      	bne.n	8009818 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097f2:	4b82      	ldr	r3, [pc, #520]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097fe:	d10b      	bne.n	8009818 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009800:	4b7e      	ldr	r3, [pc, #504]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d05b      	beq.n	80098c4 <HAL_RCC_OscConfig+0x108>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d157      	bne.n	80098c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e242      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009820:	d106      	bne.n	8009830 <HAL_RCC_OscConfig+0x74>
 8009822:	4b76      	ldr	r3, [pc, #472]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a75      	ldr	r2, [pc, #468]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 8009828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800982c:	6013      	str	r3, [r2, #0]
 800982e:	e01d      	b.n	800986c <HAL_RCC_OscConfig+0xb0>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009838:	d10c      	bne.n	8009854 <HAL_RCC_OscConfig+0x98>
 800983a:	4b70      	ldr	r3, [pc, #448]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a6f      	ldr	r2, [pc, #444]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 8009840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009844:	6013      	str	r3, [r2, #0]
 8009846:	4b6d      	ldr	r3, [pc, #436]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a6c      	ldr	r2, [pc, #432]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 800984c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009850:	6013      	str	r3, [r2, #0]
 8009852:	e00b      	b.n	800986c <HAL_RCC_OscConfig+0xb0>
 8009854:	4b69      	ldr	r3, [pc, #420]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a68      	ldr	r2, [pc, #416]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 800985a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800985e:	6013      	str	r3, [r2, #0]
 8009860:	4b66      	ldr	r3, [pc, #408]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a65      	ldr	r2, [pc, #404]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 8009866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800986a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d013      	beq.n	800989c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009874:	f7fd fc46 	bl	8007104 <HAL_GetTick>
 8009878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800987a:	e008      	b.n	800988e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800987c:	f7fd fc42 	bl	8007104 <HAL_GetTick>
 8009880:	4602      	mov	r2, r0
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	2b64      	cmp	r3, #100	@ 0x64
 8009888:	d901      	bls.n	800988e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	e207      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800988e:	4b5b      	ldr	r3, [pc, #364]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0f0      	beq.n	800987c <HAL_RCC_OscConfig+0xc0>
 800989a:	e014      	b.n	80098c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800989c:	f7fd fc32 	bl	8007104 <HAL_GetTick>
 80098a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098a2:	e008      	b.n	80098b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098a4:	f7fd fc2e 	bl	8007104 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	2b64      	cmp	r3, #100	@ 0x64
 80098b0:	d901      	bls.n	80098b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	e1f3      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098b6:	4b51      	ldr	r3, [pc, #324]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1f0      	bne.n	80098a4 <HAL_RCC_OscConfig+0xe8>
 80098c2:	e000      	b.n	80098c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0302 	and.w	r3, r3, #2
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d063      	beq.n	800999a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098d2:	4b4a      	ldr	r3, [pc, #296]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f003 030c 	and.w	r3, r3, #12
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00b      	beq.n	80098f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098de:	4b47      	ldr	r3, [pc, #284]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098e6:	2b08      	cmp	r3, #8
 80098e8:	d11c      	bne.n	8009924 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098ea:	4b44      	ldr	r3, [pc, #272]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d116      	bne.n	8009924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098f6:	4b41      	ldr	r3, [pc, #260]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0302 	and.w	r3, r3, #2
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d005      	beq.n	800990e <HAL_RCC_OscConfig+0x152>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d001      	beq.n	800990e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e1c7      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800990e:	4b3b      	ldr	r3, [pc, #236]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	4937      	ldr	r1, [pc, #220]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 800991e:	4313      	orrs	r3, r2
 8009920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009922:	e03a      	b.n	800999a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d020      	beq.n	800996e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800992c:	4b34      	ldr	r3, [pc, #208]	@ (8009a00 <HAL_RCC_OscConfig+0x244>)
 800992e:	2201      	movs	r2, #1
 8009930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009932:	f7fd fbe7 	bl	8007104 <HAL_GetTick>
 8009936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009938:	e008      	b.n	800994c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800993a:	f7fd fbe3 	bl	8007104 <HAL_GetTick>
 800993e:	4602      	mov	r2, r0
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	2b02      	cmp	r3, #2
 8009946:	d901      	bls.n	800994c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e1a8      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800994c:	4b2b      	ldr	r3, [pc, #172]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b00      	cmp	r3, #0
 8009956:	d0f0      	beq.n	800993a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009958:	4b28      	ldr	r3, [pc, #160]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	00db      	lsls	r3, r3, #3
 8009966:	4925      	ldr	r1, [pc, #148]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 8009968:	4313      	orrs	r3, r2
 800996a:	600b      	str	r3, [r1, #0]
 800996c:	e015      	b.n	800999a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800996e:	4b24      	ldr	r3, [pc, #144]	@ (8009a00 <HAL_RCC_OscConfig+0x244>)
 8009970:	2200      	movs	r2, #0
 8009972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009974:	f7fd fbc6 	bl	8007104 <HAL_GetTick>
 8009978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800997a:	e008      	b.n	800998e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800997c:	f7fd fbc2 	bl	8007104 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	2b02      	cmp	r3, #2
 8009988:	d901      	bls.n	800998e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800998a:	2303      	movs	r3, #3
 800998c:	e187      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800998e:	4b1b      	ldr	r3, [pc, #108]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0302 	and.w	r3, r3, #2
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1f0      	bne.n	800997c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 0308 	and.w	r3, r3, #8
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d036      	beq.n	8009a14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d016      	beq.n	80099dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099ae:	4b15      	ldr	r3, [pc, #84]	@ (8009a04 <HAL_RCC_OscConfig+0x248>)
 80099b0:	2201      	movs	r2, #1
 80099b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099b4:	f7fd fba6 	bl	8007104 <HAL_GetTick>
 80099b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099ba:	e008      	b.n	80099ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099bc:	f7fd fba2 	bl	8007104 <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d901      	bls.n	80099ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e167      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099ce:	4b0b      	ldr	r3, [pc, #44]	@ (80099fc <HAL_RCC_OscConfig+0x240>)
 80099d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099d2:	f003 0302 	and.w	r3, r3, #2
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d0f0      	beq.n	80099bc <HAL_RCC_OscConfig+0x200>
 80099da:	e01b      	b.n	8009a14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80099dc:	4b09      	ldr	r3, [pc, #36]	@ (8009a04 <HAL_RCC_OscConfig+0x248>)
 80099de:	2200      	movs	r2, #0
 80099e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099e2:	f7fd fb8f 	bl	8007104 <HAL_GetTick>
 80099e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099e8:	e00e      	b.n	8009a08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099ea:	f7fd fb8b 	bl	8007104 <HAL_GetTick>
 80099ee:	4602      	mov	r2, r0
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d907      	bls.n	8009a08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e150      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
 80099fc:	40023800 	.word	0x40023800
 8009a00:	42470000 	.word	0x42470000
 8009a04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a08:	4b88      	ldr	r3, [pc, #544]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a0c:	f003 0302 	and.w	r3, r3, #2
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1ea      	bne.n	80099ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0304 	and.w	r3, r3, #4
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 8097 	beq.w	8009b50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a22:	2300      	movs	r3, #0
 8009a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a26:	4b81      	ldr	r3, [pc, #516]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10f      	bne.n	8009a52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a32:	2300      	movs	r3, #0
 8009a34:	60bb      	str	r3, [r7, #8]
 8009a36:	4b7d      	ldr	r3, [pc, #500]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3a:	4a7c      	ldr	r2, [pc, #496]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8009a42:	4b7a      	ldr	r3, [pc, #488]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a4a:	60bb      	str	r3, [r7, #8]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a52:	4b77      	ldr	r3, [pc, #476]	@ (8009c30 <HAL_RCC_OscConfig+0x474>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d118      	bne.n	8009a90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a5e:	4b74      	ldr	r3, [pc, #464]	@ (8009c30 <HAL_RCC_OscConfig+0x474>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a73      	ldr	r2, [pc, #460]	@ (8009c30 <HAL_RCC_OscConfig+0x474>)
 8009a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a6a:	f7fd fb4b 	bl	8007104 <HAL_GetTick>
 8009a6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a70:	e008      	b.n	8009a84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a72:	f7fd fb47 	bl	8007104 <HAL_GetTick>
 8009a76:	4602      	mov	r2, r0
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d901      	bls.n	8009a84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e10c      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a84:	4b6a      	ldr	r3, [pc, #424]	@ (8009c30 <HAL_RCC_OscConfig+0x474>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d0f0      	beq.n	8009a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d106      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x2ea>
 8009a98:	4b64      	ldr	r3, [pc, #400]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a9c:	4a63      	ldr	r2, [pc, #396]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009a9e:	f043 0301 	orr.w	r3, r3, #1
 8009aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009aa4:	e01c      	b.n	8009ae0 <HAL_RCC_OscConfig+0x324>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	2b05      	cmp	r3, #5
 8009aac:	d10c      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x30c>
 8009aae:	4b5f      	ldr	r3, [pc, #380]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009ab4:	f043 0304 	orr.w	r3, r3, #4
 8009ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009aba:	4b5c      	ldr	r3, [pc, #368]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009abe:	4a5b      	ldr	r2, [pc, #364]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009ac0:	f043 0301 	orr.w	r3, r3, #1
 8009ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ac6:	e00b      	b.n	8009ae0 <HAL_RCC_OscConfig+0x324>
 8009ac8:	4b58      	ldr	r3, [pc, #352]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009acc:	4a57      	ldr	r2, [pc, #348]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009ace:	f023 0301 	bic.w	r3, r3, #1
 8009ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ad4:	4b55      	ldr	r3, [pc, #340]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ad8:	4a54      	ldr	r2, [pc, #336]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009ada:	f023 0304 	bic.w	r3, r3, #4
 8009ade:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d015      	beq.n	8009b14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ae8:	f7fd fb0c 	bl	8007104 <HAL_GetTick>
 8009aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009aee:	e00a      	b.n	8009b06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009af0:	f7fd fb08 	bl	8007104 <HAL_GetTick>
 8009af4:	4602      	mov	r2, r0
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d901      	bls.n	8009b06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e0cb      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b06:	4b49      	ldr	r3, [pc, #292]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b0a:	f003 0302 	and.w	r3, r3, #2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0ee      	beq.n	8009af0 <HAL_RCC_OscConfig+0x334>
 8009b12:	e014      	b.n	8009b3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b14:	f7fd faf6 	bl	8007104 <HAL_GetTick>
 8009b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b1a:	e00a      	b.n	8009b32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b1c:	f7fd faf2 	bl	8007104 <HAL_GetTick>
 8009b20:	4602      	mov	r2, r0
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d901      	bls.n	8009b32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e0b5      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b32:	4b3e      	ldr	r3, [pc, #248]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b36:	f003 0302 	and.w	r3, r3, #2
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1ee      	bne.n	8009b1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d105      	bne.n	8009b50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b44:	4b39      	ldr	r3, [pc, #228]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b48:	4a38      	ldr	r2, [pc, #224]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 80a1 	beq.w	8009c9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b5a:	4b34      	ldr	r3, [pc, #208]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	f003 030c 	and.w	r3, r3, #12
 8009b62:	2b08      	cmp	r3, #8
 8009b64:	d05c      	beq.n	8009c20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d141      	bne.n	8009bf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b6e:	4b31      	ldr	r3, [pc, #196]	@ (8009c34 <HAL_RCC_OscConfig+0x478>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b74:	f7fd fac6 	bl	8007104 <HAL_GetTick>
 8009b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b7c:	f7fd fac2 	bl	8007104 <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d901      	bls.n	8009b8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e087      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b8e:	4b27      	ldr	r3, [pc, #156]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1f0      	bne.n	8009b7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	69da      	ldr	r2, [r3, #28]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
 8009ba2:	431a      	orrs	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba8:	019b      	lsls	r3, r3, #6
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb0:	085b      	lsrs	r3, r3, #1
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	041b      	lsls	r3, r3, #16
 8009bb6:	431a      	orrs	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbc:	061b      	lsls	r3, r3, #24
 8009bbe:	491b      	ldr	r1, [pc, #108]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8009c34 <HAL_RCC_OscConfig+0x478>)
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bca:	f7fd fa9b 	bl	8007104 <HAL_GetTick>
 8009bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bd0:	e008      	b.n	8009be4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bd2:	f7fd fa97 	bl	8007104 <HAL_GetTick>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d901      	bls.n	8009be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e05c      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009be4:	4b11      	ldr	r3, [pc, #68]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0f0      	beq.n	8009bd2 <HAL_RCC_OscConfig+0x416>
 8009bf0:	e054      	b.n	8009c9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bf2:	4b10      	ldr	r3, [pc, #64]	@ (8009c34 <HAL_RCC_OscConfig+0x478>)
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bf8:	f7fd fa84 	bl	8007104 <HAL_GetTick>
 8009bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bfe:	e008      	b.n	8009c12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c00:	f7fd fa80 	bl	8007104 <HAL_GetTick>
 8009c04:	4602      	mov	r2, r0
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d901      	bls.n	8009c12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e045      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c12:	4b06      	ldr	r3, [pc, #24]	@ (8009c2c <HAL_RCC_OscConfig+0x470>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1f0      	bne.n	8009c00 <HAL_RCC_OscConfig+0x444>
 8009c1e:	e03d      	b.n	8009c9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d107      	bne.n	8009c38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e038      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
 8009c2c:	40023800 	.word	0x40023800
 8009c30:	40007000 	.word	0x40007000
 8009c34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009c38:	4b1b      	ldr	r3, [pc, #108]	@ (8009ca8 <HAL_RCC_OscConfig+0x4ec>)
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d028      	beq.n	8009c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d121      	bne.n	8009c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d11a      	bne.n	8009c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009c68:	4013      	ands	r3, r2
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009c6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d111      	bne.n	8009c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7e:	085b      	lsrs	r3, r3, #1
 8009c80:	3b01      	subs	r3, #1
 8009c82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d107      	bne.n	8009c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d001      	beq.n	8009c9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e000      	b.n	8009c9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	40023800 	.word	0x40023800

08009cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e0cc      	b.n	8009e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cc0:	4b68      	ldr	r3, [pc, #416]	@ (8009e64 <HAL_RCC_ClockConfig+0x1b8>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0307 	and.w	r3, r3, #7
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d90c      	bls.n	8009ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cce:	4b65      	ldr	r3, [pc, #404]	@ (8009e64 <HAL_RCC_ClockConfig+0x1b8>)
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	b2d2      	uxtb	r2, r2
 8009cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cd6:	4b63      	ldr	r3, [pc, #396]	@ (8009e64 <HAL_RCC_ClockConfig+0x1b8>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 0307 	and.w	r3, r3, #7
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d001      	beq.n	8009ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e0b8      	b.n	8009e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0302 	and.w	r3, r3, #2
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d020      	beq.n	8009d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0304 	and.w	r3, r3, #4
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d005      	beq.n	8009d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d00:	4b59      	ldr	r3, [pc, #356]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	4a58      	ldr	r2, [pc, #352]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009d06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009d0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0308 	and.w	r3, r3, #8
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d005      	beq.n	8009d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d18:	4b53      	ldr	r3, [pc, #332]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	4a52      	ldr	r2, [pc, #328]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009d1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d24:	4b50      	ldr	r3, [pc, #320]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	494d      	ldr	r1, [pc, #308]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d044      	beq.n	8009dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d107      	bne.n	8009d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d4a:	4b47      	ldr	r3, [pc, #284]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d119      	bne.n	8009d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e07f      	b.n	8009e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d003      	beq.n	8009d6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d107      	bne.n	8009d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d109      	bne.n	8009d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e06f      	b.n	8009e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e067      	b.n	8009e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d8a:	4b37      	ldr	r3, [pc, #220]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f023 0203 	bic.w	r2, r3, #3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	4934      	ldr	r1, [pc, #208]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d9c:	f7fd f9b2 	bl	8007104 <HAL_GetTick>
 8009da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009da2:	e00a      	b.n	8009dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009da4:	f7fd f9ae 	bl	8007104 <HAL_GetTick>
 8009da8:	4602      	mov	r2, r0
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d901      	bls.n	8009dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e04f      	b.n	8009e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dba:	4b2b      	ldr	r3, [pc, #172]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	f003 020c 	and.w	r2, r3, #12
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d1eb      	bne.n	8009da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009dcc:	4b25      	ldr	r3, [pc, #148]	@ (8009e64 <HAL_RCC_ClockConfig+0x1b8>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 0307 	and.w	r3, r3, #7
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d20c      	bcs.n	8009df4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dda:	4b22      	ldr	r3, [pc, #136]	@ (8009e64 <HAL_RCC_ClockConfig+0x1b8>)
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009de2:	4b20      	ldr	r3, [pc, #128]	@ (8009e64 <HAL_RCC_ClockConfig+0x1b8>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d001      	beq.n	8009df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e032      	b.n	8009e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 0304 	and.w	r3, r3, #4
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d008      	beq.n	8009e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e00:	4b19      	ldr	r3, [pc, #100]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	4916      	ldr	r1, [pc, #88]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0308 	and.w	r3, r3, #8
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d009      	beq.n	8009e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e1e:	4b12      	ldr	r3, [pc, #72]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	00db      	lsls	r3, r3, #3
 8009e2c:	490e      	ldr	r1, [pc, #56]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009e32:	f000 f821 	bl	8009e78 <HAL_RCC_GetSysClockFreq>
 8009e36:	4602      	mov	r2, r0
 8009e38:	4b0b      	ldr	r3, [pc, #44]	@ (8009e68 <HAL_RCC_ClockConfig+0x1bc>)
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	091b      	lsrs	r3, r3, #4
 8009e3e:	f003 030f 	and.w	r3, r3, #15
 8009e42:	490a      	ldr	r1, [pc, #40]	@ (8009e6c <HAL_RCC_ClockConfig+0x1c0>)
 8009e44:	5ccb      	ldrb	r3, [r1, r3]
 8009e46:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4a:	4a09      	ldr	r2, [pc, #36]	@ (8009e70 <HAL_RCC_ClockConfig+0x1c4>)
 8009e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009e4e:	4b09      	ldr	r3, [pc, #36]	@ (8009e74 <HAL_RCC_ClockConfig+0x1c8>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fd f912 	bl	800707c <HAL_InitTick>

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	40023c00 	.word	0x40023c00
 8009e68:	40023800 	.word	0x40023800
 8009e6c:	08013c44 	.word	0x08013c44
 8009e70:	20000160 	.word	0x20000160
 8009e74:	20000164 	.word	0x20000164

08009e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e7c:	b090      	sub	sp, #64	@ 0x40
 8009e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e84:	2300      	movs	r3, #0
 8009e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e88:	2300      	movs	r3, #0
 8009e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e90:	4b59      	ldr	r3, [pc, #356]	@ (8009ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	f003 030c 	and.w	r3, r3, #12
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	d00d      	beq.n	8009eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8009e9c:	2b08      	cmp	r3, #8
 8009e9e:	f200 80a1 	bhi.w	8009fe4 <HAL_RCC_GetSysClockFreq+0x16c>
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d002      	beq.n	8009eac <HAL_RCC_GetSysClockFreq+0x34>
 8009ea6:	2b04      	cmp	r3, #4
 8009ea8:	d003      	beq.n	8009eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8009eaa:	e09b      	b.n	8009fe4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009eac:	4b53      	ldr	r3, [pc, #332]	@ (8009ffc <HAL_RCC_GetSysClockFreq+0x184>)
 8009eae:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8009eb0:	e09b      	b.n	8009fea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009eb2:	4b53      	ldr	r3, [pc, #332]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x188>)
 8009eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009eb6:	e098      	b.n	8009fea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009eb8:	4b4f      	ldr	r3, [pc, #316]	@ (8009ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ec0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ec2:	4b4d      	ldr	r3, [pc, #308]	@ (8009ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d028      	beq.n	8009f20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ece:	4b4a      	ldr	r3, [pc, #296]	@ (8009ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	099b      	lsrs	r3, r3, #6
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	623b      	str	r3, [r7, #32]
 8009ed8:	627a      	str	r2, [r7, #36]	@ 0x24
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4b47      	ldr	r3, [pc, #284]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x188>)
 8009ee4:	fb03 f201 	mul.w	r2, r3, r1
 8009ee8:	2300      	movs	r3, #0
 8009eea:	fb00 f303 	mul.w	r3, r0, r3
 8009eee:	4413      	add	r3, r2
 8009ef0:	4a43      	ldr	r2, [pc, #268]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x188>)
 8009ef2:	fba0 1202 	umull	r1, r2, r0, r2
 8009ef6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ef8:	460a      	mov	r2, r1
 8009efa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009efc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009efe:	4413      	add	r3, r2
 8009f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f04:	2200      	movs	r2, #0
 8009f06:	61bb      	str	r3, [r7, #24]
 8009f08:	61fa      	str	r2, [r7, #28]
 8009f0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009f12:	f7f6 feb9 	bl	8000c88 <__aeabi_uldivmod>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f1e:	e053      	b.n	8009fc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f20:	4b35      	ldr	r3, [pc, #212]	@ (8009ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	099b      	lsrs	r3, r3, #6
 8009f26:	2200      	movs	r2, #0
 8009f28:	613b      	str	r3, [r7, #16]
 8009f2a:	617a      	str	r2, [r7, #20]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009f32:	f04f 0b00 	mov.w	fp, #0
 8009f36:	4652      	mov	r2, sl
 8009f38:	465b      	mov	r3, fp
 8009f3a:	f04f 0000 	mov.w	r0, #0
 8009f3e:	f04f 0100 	mov.w	r1, #0
 8009f42:	0159      	lsls	r1, r3, #5
 8009f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f48:	0150      	lsls	r0, r2, #5
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	ebb2 080a 	subs.w	r8, r2, sl
 8009f52:	eb63 090b 	sbc.w	r9, r3, fp
 8009f56:	f04f 0200 	mov.w	r2, #0
 8009f5a:	f04f 0300 	mov.w	r3, #0
 8009f5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009f62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009f66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009f6a:	ebb2 0408 	subs.w	r4, r2, r8
 8009f6e:	eb63 0509 	sbc.w	r5, r3, r9
 8009f72:	f04f 0200 	mov.w	r2, #0
 8009f76:	f04f 0300 	mov.w	r3, #0
 8009f7a:	00eb      	lsls	r3, r5, #3
 8009f7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f80:	00e2      	lsls	r2, r4, #3
 8009f82:	4614      	mov	r4, r2
 8009f84:	461d      	mov	r5, r3
 8009f86:	eb14 030a 	adds.w	r3, r4, sl
 8009f8a:	603b      	str	r3, [r7, #0]
 8009f8c:	eb45 030b 	adc.w	r3, r5, fp
 8009f90:	607b      	str	r3, [r7, #4]
 8009f92:	f04f 0200 	mov.w	r2, #0
 8009f96:	f04f 0300 	mov.w	r3, #0
 8009f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	028b      	lsls	r3, r1, #10
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009fa8:	4621      	mov	r1, r4
 8009faa:	028a      	lsls	r2, r1, #10
 8009fac:	4610      	mov	r0, r2
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	60bb      	str	r3, [r7, #8]
 8009fb6:	60fa      	str	r2, [r7, #12]
 8009fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fbc:	f7f6 fe64 	bl	8000c88 <__aeabi_uldivmod>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	0c1b      	lsrs	r3, r3, #16
 8009fce:	f003 0303 	and.w	r3, r3, #3
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	005b      	lsls	r3, r3, #1
 8009fd6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8009fd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009fe2:	e002      	b.n	8009fea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fe4:	4b05      	ldr	r3, [pc, #20]	@ (8009ffc <HAL_RCC_GetSysClockFreq+0x184>)
 8009fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3740      	adds	r7, #64	@ 0x40
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ff6:	bf00      	nop
 8009ff8:	40023800 	.word	0x40023800
 8009ffc:	00f42400 	.word	0x00f42400
 800a000:	017d7840 	.word	0x017d7840

0800a004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a004:	b480      	push	{r7}
 800a006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a008:	4b03      	ldr	r3, [pc, #12]	@ (800a018 <HAL_RCC_GetHCLKFreq+0x14>)
 800a00a:	681b      	ldr	r3, [r3, #0]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	20000160 	.word	0x20000160

0800a01c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a020:	f7ff fff0 	bl	800a004 <HAL_RCC_GetHCLKFreq>
 800a024:	4602      	mov	r2, r0
 800a026:	4b05      	ldr	r3, [pc, #20]	@ (800a03c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	0a9b      	lsrs	r3, r3, #10
 800a02c:	f003 0307 	and.w	r3, r3, #7
 800a030:	4903      	ldr	r1, [pc, #12]	@ (800a040 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a032:	5ccb      	ldrb	r3, [r1, r3]
 800a034:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a038:	4618      	mov	r0, r3
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	40023800 	.word	0x40023800
 800a040:	08013c54 	.word	0x08013c54

0800a044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a048:	f7ff ffdc 	bl	800a004 <HAL_RCC_GetHCLKFreq>
 800a04c:	4602      	mov	r2, r0
 800a04e:	4b05      	ldr	r3, [pc, #20]	@ (800a064 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	0b5b      	lsrs	r3, r3, #13
 800a054:	f003 0307 	and.w	r3, r3, #7
 800a058:	4903      	ldr	r1, [pc, #12]	@ (800a068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a05a:	5ccb      	ldrb	r3, [r1, r3]
 800a05c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a060:	4618      	mov	r0, r3
 800a062:	bd80      	pop	{r7, pc}
 800a064:	40023800 	.word	0x40023800
 800a068:	08013c54 	.word	0x08013c54

0800a06c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e041      	b.n	800a102 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d106      	bne.n	800a098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7fc fcb6 	bl	8006a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2202      	movs	r2, #2
 800a09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f000 fff0 	bl	800b090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d001      	beq.n	800a124 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e046      	b.n	800a1b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2202      	movs	r2, #2
 800a128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a23      	ldr	r2, [pc, #140]	@ (800a1c0 <HAL_TIM_Base_Start+0xb4>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d022      	beq.n	800a17c <HAL_TIM_Base_Start+0x70>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a13e:	d01d      	beq.n	800a17c <HAL_TIM_Base_Start+0x70>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a1f      	ldr	r2, [pc, #124]	@ (800a1c4 <HAL_TIM_Base_Start+0xb8>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d018      	beq.n	800a17c <HAL_TIM_Base_Start+0x70>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a1e      	ldr	r2, [pc, #120]	@ (800a1c8 <HAL_TIM_Base_Start+0xbc>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d013      	beq.n	800a17c <HAL_TIM_Base_Start+0x70>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a1c      	ldr	r2, [pc, #112]	@ (800a1cc <HAL_TIM_Base_Start+0xc0>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d00e      	beq.n	800a17c <HAL_TIM_Base_Start+0x70>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a1b      	ldr	r2, [pc, #108]	@ (800a1d0 <HAL_TIM_Base_Start+0xc4>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d009      	beq.n	800a17c <HAL_TIM_Base_Start+0x70>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a19      	ldr	r2, [pc, #100]	@ (800a1d4 <HAL_TIM_Base_Start+0xc8>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d004      	beq.n	800a17c <HAL_TIM_Base_Start+0x70>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a18      	ldr	r2, [pc, #96]	@ (800a1d8 <HAL_TIM_Base_Start+0xcc>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d111      	bne.n	800a1a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	f003 0307 	and.w	r3, r3, #7
 800a186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2b06      	cmp	r3, #6
 800a18c:	d010      	beq.n	800a1b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f042 0201 	orr.w	r2, r2, #1
 800a19c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a19e:	e007      	b.n	800a1b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f042 0201 	orr.w	r2, r2, #1
 800a1ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	40010000 	.word	0x40010000
 800a1c4:	40000400 	.word	0x40000400
 800a1c8:	40000800 	.word	0x40000800
 800a1cc:	40000c00 	.word	0x40000c00
 800a1d0:	40010400 	.word	0x40010400
 800a1d4:	40014000 	.word	0x40014000
 800a1d8:	40001800 	.word	0x40001800

0800a1dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e041      	b.n	800a272 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d106      	bne.n	800a208 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f839 	bl	800a27a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2202      	movs	r2, #2
 800a20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3304      	adds	r3, #4
 800a218:	4619      	mov	r1, r3
 800a21a:	4610      	mov	r0, r2
 800a21c:	f000 ff38 	bl	800b090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a282:	bf00      	nop
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
	...

0800a290 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d109      	bne.n	800a2b4 <HAL_TIM_PWM_Start+0x24>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	bf14      	ite	ne
 800a2ac:	2301      	movne	r3, #1
 800a2ae:	2300      	moveq	r3, #0
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	e022      	b.n	800a2fa <HAL_TIM_PWM_Start+0x6a>
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b04      	cmp	r3, #4
 800a2b8:	d109      	bne.n	800a2ce <HAL_TIM_PWM_Start+0x3e>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	bf14      	ite	ne
 800a2c6:	2301      	movne	r3, #1
 800a2c8:	2300      	moveq	r3, #0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	e015      	b.n	800a2fa <HAL_TIM_PWM_Start+0x6a>
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2b08      	cmp	r3, #8
 800a2d2:	d109      	bne.n	800a2e8 <HAL_TIM_PWM_Start+0x58>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	bf14      	ite	ne
 800a2e0:	2301      	movne	r3, #1
 800a2e2:	2300      	moveq	r3, #0
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	e008      	b.n	800a2fa <HAL_TIM_PWM_Start+0x6a>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	bf14      	ite	ne
 800a2f4:	2301      	movne	r3, #1
 800a2f6:	2300      	moveq	r3, #0
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e07c      	b.n	800a3fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d104      	bne.n	800a312 <HAL_TIM_PWM_Start+0x82>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2202      	movs	r2, #2
 800a30c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a310:	e013      	b.n	800a33a <HAL_TIM_PWM_Start+0xaa>
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2b04      	cmp	r3, #4
 800a316:	d104      	bne.n	800a322 <HAL_TIM_PWM_Start+0x92>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2202      	movs	r2, #2
 800a31c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a320:	e00b      	b.n	800a33a <HAL_TIM_PWM_Start+0xaa>
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b08      	cmp	r3, #8
 800a326:	d104      	bne.n	800a332 <HAL_TIM_PWM_Start+0xa2>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2202      	movs	r2, #2
 800a32c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a330:	e003      	b.n	800a33a <HAL_TIM_PWM_Start+0xaa>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2202      	movs	r2, #2
 800a336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2201      	movs	r2, #1
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	4618      	mov	r0, r3
 800a344:	f001 fac4 	bl	800b8d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a2d      	ldr	r2, [pc, #180]	@ (800a404 <HAL_TIM_PWM_Start+0x174>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d004      	beq.n	800a35c <HAL_TIM_PWM_Start+0xcc>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a2c      	ldr	r2, [pc, #176]	@ (800a408 <HAL_TIM_PWM_Start+0x178>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d101      	bne.n	800a360 <HAL_TIM_PWM_Start+0xd0>
 800a35c:	2301      	movs	r3, #1
 800a35e:	e000      	b.n	800a362 <HAL_TIM_PWM_Start+0xd2>
 800a360:	2300      	movs	r3, #0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d007      	beq.n	800a376 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a374:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a22      	ldr	r2, [pc, #136]	@ (800a404 <HAL_TIM_PWM_Start+0x174>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d022      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x136>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a388:	d01d      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x136>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a1f      	ldr	r2, [pc, #124]	@ (800a40c <HAL_TIM_PWM_Start+0x17c>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d018      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x136>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a1d      	ldr	r2, [pc, #116]	@ (800a410 <HAL_TIM_PWM_Start+0x180>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d013      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x136>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a1c      	ldr	r2, [pc, #112]	@ (800a414 <HAL_TIM_PWM_Start+0x184>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d00e      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x136>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a16      	ldr	r2, [pc, #88]	@ (800a408 <HAL_TIM_PWM_Start+0x178>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d009      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x136>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a18      	ldr	r2, [pc, #96]	@ (800a418 <HAL_TIM_PWM_Start+0x188>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d004      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x136>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a16      	ldr	r2, [pc, #88]	@ (800a41c <HAL_TIM_PWM_Start+0x18c>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d111      	bne.n	800a3ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	f003 0307 	and.w	r3, r3, #7
 800a3d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b06      	cmp	r3, #6
 800a3d6:	d010      	beq.n	800a3fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f042 0201 	orr.w	r2, r2, #1
 800a3e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3e8:	e007      	b.n	800a3fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f042 0201 	orr.w	r2, r2, #1
 800a3f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	40010000 	.word	0x40010000
 800a408:	40010400 	.word	0x40010400
 800a40c:	40000400 	.word	0x40000400
 800a410:	40000800 	.word	0x40000800
 800a414:	40000c00 	.word	0x40000c00
 800a418:	40014000 	.word	0x40014000
 800a41c:	40001800 	.word	0x40001800

0800a420 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e041      	b.n	800a4b6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d106      	bne.n	800a44c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f839 	bl	800a4be <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2202      	movs	r2, #2
 800a450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3304      	adds	r3, #4
 800a45c:	4619      	mov	r1, r3
 800a45e:	4610      	mov	r0, r2
 800a460:	f000 fe16 	bl	800b090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b083      	sub	sp, #12
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a4c6:	bf00      	nop
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
	...

0800a4d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d104      	bne.n	800a4f2 <HAL_TIM_IC_Start_IT+0x1e>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	e013      	b.n	800a51a <HAL_TIM_IC_Start_IT+0x46>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b04      	cmp	r3, #4
 800a4f6:	d104      	bne.n	800a502 <HAL_TIM_IC_Start_IT+0x2e>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	e00b      	b.n	800a51a <HAL_TIM_IC_Start_IT+0x46>
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b08      	cmp	r3, #8
 800a506:	d104      	bne.n	800a512 <HAL_TIM_IC_Start_IT+0x3e>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	e003      	b.n	800a51a <HAL_TIM_IC_Start_IT+0x46>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d104      	bne.n	800a52c <HAL_TIM_IC_Start_IT+0x58>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	e013      	b.n	800a554 <HAL_TIM_IC_Start_IT+0x80>
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	2b04      	cmp	r3, #4
 800a530:	d104      	bne.n	800a53c <HAL_TIM_IC_Start_IT+0x68>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	e00b      	b.n	800a554 <HAL_TIM_IC_Start_IT+0x80>
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2b08      	cmp	r3, #8
 800a540:	d104      	bne.n	800a54c <HAL_TIM_IC_Start_IT+0x78>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	e003      	b.n	800a554 <HAL_TIM_IC_Start_IT+0x80>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a552:	b2db      	uxtb	r3, r3
 800a554:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a556:	7bbb      	ldrb	r3, [r7, #14]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d102      	bne.n	800a562 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a55c:	7b7b      	ldrb	r3, [r7, #13]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d001      	beq.n	800a566 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	e0cc      	b.n	800a700 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d104      	bne.n	800a576 <HAL_TIM_IC_Start_IT+0xa2>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a574:	e013      	b.n	800a59e <HAL_TIM_IC_Start_IT+0xca>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b04      	cmp	r3, #4
 800a57a:	d104      	bne.n	800a586 <HAL_TIM_IC_Start_IT+0xb2>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a584:	e00b      	b.n	800a59e <HAL_TIM_IC_Start_IT+0xca>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b08      	cmp	r3, #8
 800a58a:	d104      	bne.n	800a596 <HAL_TIM_IC_Start_IT+0xc2>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a594:	e003      	b.n	800a59e <HAL_TIM_IC_Start_IT+0xca>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2202      	movs	r2, #2
 800a59a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d104      	bne.n	800a5ae <HAL_TIM_IC_Start_IT+0xda>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5ac:	e013      	b.n	800a5d6 <HAL_TIM_IC_Start_IT+0x102>
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b04      	cmp	r3, #4
 800a5b2:	d104      	bne.n	800a5be <HAL_TIM_IC_Start_IT+0xea>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a5bc:	e00b      	b.n	800a5d6 <HAL_TIM_IC_Start_IT+0x102>
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d104      	bne.n	800a5ce <HAL_TIM_IC_Start_IT+0xfa>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5cc:	e003      	b.n	800a5d6 <HAL_TIM_IC_Start_IT+0x102>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b0c      	cmp	r3, #12
 800a5da:	d841      	bhi.n	800a660 <HAL_TIM_IC_Start_IT+0x18c>
 800a5dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e4 <HAL_TIM_IC_Start_IT+0x110>)
 800a5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e2:	bf00      	nop
 800a5e4:	0800a619 	.word	0x0800a619
 800a5e8:	0800a661 	.word	0x0800a661
 800a5ec:	0800a661 	.word	0x0800a661
 800a5f0:	0800a661 	.word	0x0800a661
 800a5f4:	0800a62b 	.word	0x0800a62b
 800a5f8:	0800a661 	.word	0x0800a661
 800a5fc:	0800a661 	.word	0x0800a661
 800a600:	0800a661 	.word	0x0800a661
 800a604:	0800a63d 	.word	0x0800a63d
 800a608:	0800a661 	.word	0x0800a661
 800a60c:	0800a661 	.word	0x0800a661
 800a610:	0800a661 	.word	0x0800a661
 800a614:	0800a64f 	.word	0x0800a64f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68da      	ldr	r2, [r3, #12]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f042 0202 	orr.w	r2, r2, #2
 800a626:	60da      	str	r2, [r3, #12]
      break;
 800a628:	e01d      	b.n	800a666 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68da      	ldr	r2, [r3, #12]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f042 0204 	orr.w	r2, r2, #4
 800a638:	60da      	str	r2, [r3, #12]
      break;
 800a63a:	e014      	b.n	800a666 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f042 0208 	orr.w	r2, r2, #8
 800a64a:	60da      	str	r2, [r3, #12]
      break;
 800a64c:	e00b      	b.n	800a666 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68da      	ldr	r2, [r3, #12]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f042 0210 	orr.w	r2, r2, #16
 800a65c:	60da      	str	r2, [r3, #12]
      break;
 800a65e:	e002      	b.n	800a666 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	73fb      	strb	r3, [r7, #15]
      break;
 800a664:	bf00      	nop
  }

  if (status == HAL_OK)
 800a666:	7bfb      	ldrb	r3, [r7, #15]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d148      	bne.n	800a6fe <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2201      	movs	r2, #1
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	4618      	mov	r0, r3
 800a676:	f001 f92b 	bl	800b8d0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a22      	ldr	r2, [pc, #136]	@ (800a708 <HAL_TIM_IC_Start_IT+0x234>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d022      	beq.n	800a6ca <HAL_TIM_IC_Start_IT+0x1f6>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a68c:	d01d      	beq.n	800a6ca <HAL_TIM_IC_Start_IT+0x1f6>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a1e      	ldr	r2, [pc, #120]	@ (800a70c <HAL_TIM_IC_Start_IT+0x238>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d018      	beq.n	800a6ca <HAL_TIM_IC_Start_IT+0x1f6>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a1c      	ldr	r2, [pc, #112]	@ (800a710 <HAL_TIM_IC_Start_IT+0x23c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d013      	beq.n	800a6ca <HAL_TIM_IC_Start_IT+0x1f6>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a1b      	ldr	r2, [pc, #108]	@ (800a714 <HAL_TIM_IC_Start_IT+0x240>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d00e      	beq.n	800a6ca <HAL_TIM_IC_Start_IT+0x1f6>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a19      	ldr	r2, [pc, #100]	@ (800a718 <HAL_TIM_IC_Start_IT+0x244>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d009      	beq.n	800a6ca <HAL_TIM_IC_Start_IT+0x1f6>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a18      	ldr	r2, [pc, #96]	@ (800a71c <HAL_TIM_IC_Start_IT+0x248>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d004      	beq.n	800a6ca <HAL_TIM_IC_Start_IT+0x1f6>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a16      	ldr	r2, [pc, #88]	@ (800a720 <HAL_TIM_IC_Start_IT+0x24c>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d111      	bne.n	800a6ee <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	f003 0307 	and.w	r3, r3, #7
 800a6d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2b06      	cmp	r3, #6
 800a6da:	d010      	beq.n	800a6fe <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f042 0201 	orr.w	r2, r2, #1
 800a6ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ec:	e007      	b.n	800a6fe <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f042 0201 	orr.w	r2, r2, #1
 800a6fc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	40010000 	.word	0x40010000
 800a70c:	40000400 	.word	0x40000400
 800a710:	40000800 	.word	0x40000800
 800a714:	40000c00 	.word	0x40000c00
 800a718:	40010400 	.word	0x40010400
 800a71c:	40014000 	.word	0x40014000
 800a720:	40001800 	.word	0x40001800

0800a724 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e097      	b.n	800a868 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b00      	cmp	r3, #0
 800a742:	d106      	bne.n	800a752 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f7fc fa15 	bl	8006b7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2202      	movs	r2, #2
 800a756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	6812      	ldr	r2, [r2, #0]
 800a764:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a768:	f023 0307 	bic.w	r3, r3, #7
 800a76c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3304      	adds	r3, #4
 800a776:	4619      	mov	r1, r3
 800a778:	4610      	mov	r0, r2
 800a77a:	f000 fc89 	bl	800b090 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6a1b      	ldr	r3, [r3, #32]
 800a794:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7a6:	f023 0303 	bic.w	r3, r3, #3
 800a7aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	689a      	ldr	r2, [r3, #8]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a7c4:	f023 030c 	bic.w	r3, r3, #12
 800a7c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a7d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a7d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	68da      	ldr	r2, [r3, #12]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	021b      	lsls	r3, r3, #8
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	011a      	lsls	r2, r3, #4
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	031b      	lsls	r3, r3, #12
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a802:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a80a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	685a      	ldr	r2, [r3, #4]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	011b      	lsls	r3, r3, #4
 800a816:	4313      	orrs	r3, r2
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a880:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a888:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a890:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a898:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d110      	bne.n	800a8c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d102      	bne.n	800a8ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8a6:	7b7b      	ldrb	r3, [r7, #13]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d001      	beq.n	800a8b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e069      	b.n	800a984 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8c0:	e031      	b.n	800a926 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d110      	bne.n	800a8ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d102      	bne.n	800a8d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8ce:	7b3b      	ldrb	r3, [r7, #12]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d001      	beq.n	800a8d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e055      	b.n	800a984 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2202      	movs	r2, #2
 800a8e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a8e8:	e01d      	b.n	800a926 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d108      	bne.n	800a902 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8f0:	7bbb      	ldrb	r3, [r7, #14]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d105      	bne.n	800a902 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8f6:	7b7b      	ldrb	r3, [r7, #13]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d102      	bne.n	800a902 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8fc:	7b3b      	ldrb	r3, [r7, #12]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d001      	beq.n	800a906 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e03e      	b.n	800a984 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2202      	movs	r2, #2
 800a90a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2202      	movs	r2, #2
 800a912:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2202      	movs	r2, #2
 800a91a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2202      	movs	r2, #2
 800a922:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <HAL_TIM_Encoder_Start+0xc4>
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	2b04      	cmp	r3, #4
 800a930:	d008      	beq.n	800a944 <HAL_TIM_Encoder_Start+0xd4>
 800a932:	e00f      	b.n	800a954 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2201      	movs	r2, #1
 800a93a:	2100      	movs	r1, #0
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 ffc7 	bl	800b8d0 <TIM_CCxChannelCmd>
      break;
 800a942:	e016      	b.n	800a972 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2201      	movs	r2, #1
 800a94a:	2104      	movs	r1, #4
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 ffbf 	bl	800b8d0 <TIM_CCxChannelCmd>
      break;
 800a952:	e00e      	b.n	800a972 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2201      	movs	r2, #1
 800a95a:	2100      	movs	r1, #0
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 ffb7 	bl	800b8d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2201      	movs	r2, #1
 800a968:	2104      	movs	r1, #4
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 ffb0 	bl	800b8d0 <TIM_CCxChannelCmd>
      break;
 800a970:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f042 0201 	orr.w	r2, r2, #1
 800a980:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d020      	beq.n	800a9f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d01b      	beq.n	800a9f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f06f 0202 	mvn.w	r2, #2
 800a9c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	f003 0303 	and.w	r3, r3, #3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d003      	beq.n	800a9de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7f7 fe96 	bl	8002708 <HAL_TIM_IC_CaptureCallback>
 800a9dc:	e005      	b.n	800a9ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fb38 	bl	800b054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fb3f 	bl	800b068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	f003 0304 	and.w	r3, r3, #4
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d020      	beq.n	800aa3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f003 0304 	and.w	r3, r3, #4
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d01b      	beq.n	800aa3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f06f 0204 	mvn.w	r2, #4
 800aa0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2202      	movs	r2, #2
 800aa12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7f7 fe70 	bl	8002708 <HAL_TIM_IC_CaptureCallback>
 800aa28:	e005      	b.n	800aa36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fb12 	bl	800b054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fb19 	bl	800b068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	f003 0308 	and.w	r3, r3, #8
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d020      	beq.n	800aa88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f003 0308 	and.w	r3, r3, #8
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d01b      	beq.n	800aa88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f06f 0208 	mvn.w	r2, #8
 800aa58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2204      	movs	r2, #4
 800aa5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	69db      	ldr	r3, [r3, #28]
 800aa66:	f003 0303 	and.w	r3, r3, #3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d003      	beq.n	800aa76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7f7 fe4a 	bl	8002708 <HAL_TIM_IC_CaptureCallback>
 800aa74:	e005      	b.n	800aa82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 faec 	bl	800b054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 faf3 	bl	800b068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	f003 0310 	and.w	r3, r3, #16
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d020      	beq.n	800aad4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f003 0310 	and.w	r3, r3, #16
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01b      	beq.n	800aad4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f06f 0210 	mvn.w	r2, #16
 800aaa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2208      	movs	r2, #8
 800aaaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d003      	beq.n	800aac2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7f7 fe24 	bl	8002708 <HAL_TIM_IC_CaptureCallback>
 800aac0:	e005      	b.n	800aace <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fac6 	bl	800b054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 facd 	bl	800b068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00c      	beq.n	800aaf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d007      	beq.n	800aaf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f06f 0201 	mvn.w	r2, #1
 800aaf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 faa4 	bl	800b040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00c      	beq.n	800ab1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d007      	beq.n	800ab1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ab14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 ffd8 	bl	800bacc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00c      	beq.n	800ab40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d007      	beq.n	800ab40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ab38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fa9e 	bl	800b07c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	f003 0320 	and.w	r3, r3, #32
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00c      	beq.n	800ab64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f003 0320 	and.w	r3, r3, #32
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d007      	beq.n	800ab64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f06f 0220 	mvn.w	r2, #32
 800ab5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 ffaa 	bl	800bab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab64:	bf00      	nop
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b086      	sub	sp, #24
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d101      	bne.n	800ab8a <HAL_TIM_IC_ConfigChannel+0x1e>
 800ab86:	2302      	movs	r3, #2
 800ab88:	e088      	b.n	800ac9c <HAL_TIM_IC_ConfigChannel+0x130>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d11b      	bne.n	800abd0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800aba8:	f000 fcce 	bl	800b548 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	699a      	ldr	r2, [r3, #24]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 020c 	bic.w	r2, r2, #12
 800abba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6999      	ldr	r1, [r3, #24]
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	689a      	ldr	r2, [r3, #8]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	430a      	orrs	r2, r1
 800abcc:	619a      	str	r2, [r3, #24]
 800abce:	e060      	b.n	800ac92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b04      	cmp	r3, #4
 800abd4:	d11c      	bne.n	800ac10 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800abe6:	f000 fd52 	bl	800b68e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	699a      	ldr	r2, [r3, #24]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800abf8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	6999      	ldr	r1, [r3, #24]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	021a      	lsls	r2, r3, #8
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	430a      	orrs	r2, r1
 800ac0c:	619a      	str	r2, [r3, #24]
 800ac0e:	e040      	b.n	800ac92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b08      	cmp	r3, #8
 800ac14:	d11b      	bne.n	800ac4e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ac26:	f000 fd9f 	bl	800b768 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	69da      	ldr	r2, [r3, #28]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f022 020c 	bic.w	r2, r2, #12
 800ac38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	69d9      	ldr	r1, [r3, #28]
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	689a      	ldr	r2, [r3, #8]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	430a      	orrs	r2, r1
 800ac4a:	61da      	str	r2, [r3, #28]
 800ac4c:	e021      	b.n	800ac92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b0c      	cmp	r3, #12
 800ac52:	d11c      	bne.n	800ac8e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800ac64:	f000 fdbc 	bl	800b7e0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	69da      	ldr	r2, [r3, #28]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ac76:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	69d9      	ldr	r1, [r3, #28]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	021a      	lsls	r2, r3, #8
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	430a      	orrs	r2, r1
 800ac8a:	61da      	str	r2, [r3, #28]
 800ac8c:	e001      	b.n	800ac92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d101      	bne.n	800acc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800acbe:	2302      	movs	r3, #2
 800acc0:	e0ae      	b.n	800ae20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b0c      	cmp	r3, #12
 800acce:	f200 809f 	bhi.w	800ae10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800acd2:	a201      	add	r2, pc, #4	@ (adr r2, 800acd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800acd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd8:	0800ad0d 	.word	0x0800ad0d
 800acdc:	0800ae11 	.word	0x0800ae11
 800ace0:	0800ae11 	.word	0x0800ae11
 800ace4:	0800ae11 	.word	0x0800ae11
 800ace8:	0800ad4d 	.word	0x0800ad4d
 800acec:	0800ae11 	.word	0x0800ae11
 800acf0:	0800ae11 	.word	0x0800ae11
 800acf4:	0800ae11 	.word	0x0800ae11
 800acf8:	0800ad8f 	.word	0x0800ad8f
 800acfc:	0800ae11 	.word	0x0800ae11
 800ad00:	0800ae11 	.word	0x0800ae11
 800ad04:	0800ae11 	.word	0x0800ae11
 800ad08:	0800adcf 	.word	0x0800adcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68b9      	ldr	r1, [r7, #8]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 fa68 	bl	800b1e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	699a      	ldr	r2, [r3, #24]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f042 0208 	orr.w	r2, r2, #8
 800ad26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	699a      	ldr	r2, [r3, #24]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f022 0204 	bic.w	r2, r2, #4
 800ad36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	6999      	ldr	r1, [r3, #24]
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	691a      	ldr	r2, [r3, #16]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	430a      	orrs	r2, r1
 800ad48:	619a      	str	r2, [r3, #24]
      break;
 800ad4a:	e064      	b.n	800ae16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68b9      	ldr	r1, [r7, #8]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f000 fab8 	bl	800b2c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	699a      	ldr	r2, [r3, #24]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	699a      	ldr	r2, [r3, #24]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6999      	ldr	r1, [r3, #24]
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	021a      	lsls	r2, r3, #8
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	430a      	orrs	r2, r1
 800ad8a:	619a      	str	r2, [r3, #24]
      break;
 800ad8c:	e043      	b.n	800ae16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68b9      	ldr	r1, [r7, #8]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 fb0d 	bl	800b3b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	69da      	ldr	r2, [r3, #28]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f042 0208 	orr.w	r2, r2, #8
 800ada8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	69da      	ldr	r2, [r3, #28]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f022 0204 	bic.w	r2, r2, #4
 800adb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	69d9      	ldr	r1, [r3, #28]
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	691a      	ldr	r2, [r3, #16]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	430a      	orrs	r2, r1
 800adca:	61da      	str	r2, [r3, #28]
      break;
 800adcc:	e023      	b.n	800ae16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68b9      	ldr	r1, [r7, #8]
 800add4:	4618      	mov	r0, r3
 800add6:	f000 fb61 	bl	800b49c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	69da      	ldr	r2, [r3, #28]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ade8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	69da      	ldr	r2, [r3, #28]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	69d9      	ldr	r1, [r3, #28]
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	021a      	lsls	r2, r3, #8
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	61da      	str	r2, [r3, #28]
      break;
 800ae0e:	e002      	b.n	800ae16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	75fb      	strb	r3, [r7, #23]
      break;
 800ae14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ae1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d101      	bne.n	800ae44 <HAL_TIM_ConfigClockSource+0x1c>
 800ae40:	2302      	movs	r3, #2
 800ae42:	e0b4      	b.n	800afae <HAL_TIM_ConfigClockSource+0x186>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ae62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae7c:	d03e      	beq.n	800aefc <HAL_TIM_ConfigClockSource+0xd4>
 800ae7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae82:	f200 8087 	bhi.w	800af94 <HAL_TIM_ConfigClockSource+0x16c>
 800ae86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae8a:	f000 8086 	beq.w	800af9a <HAL_TIM_ConfigClockSource+0x172>
 800ae8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae92:	d87f      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x16c>
 800ae94:	2b70      	cmp	r3, #112	@ 0x70
 800ae96:	d01a      	beq.n	800aece <HAL_TIM_ConfigClockSource+0xa6>
 800ae98:	2b70      	cmp	r3, #112	@ 0x70
 800ae9a:	d87b      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x16c>
 800ae9c:	2b60      	cmp	r3, #96	@ 0x60
 800ae9e:	d050      	beq.n	800af42 <HAL_TIM_ConfigClockSource+0x11a>
 800aea0:	2b60      	cmp	r3, #96	@ 0x60
 800aea2:	d877      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x16c>
 800aea4:	2b50      	cmp	r3, #80	@ 0x50
 800aea6:	d03c      	beq.n	800af22 <HAL_TIM_ConfigClockSource+0xfa>
 800aea8:	2b50      	cmp	r3, #80	@ 0x50
 800aeaa:	d873      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x16c>
 800aeac:	2b40      	cmp	r3, #64	@ 0x40
 800aeae:	d058      	beq.n	800af62 <HAL_TIM_ConfigClockSource+0x13a>
 800aeb0:	2b40      	cmp	r3, #64	@ 0x40
 800aeb2:	d86f      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x16c>
 800aeb4:	2b30      	cmp	r3, #48	@ 0x30
 800aeb6:	d064      	beq.n	800af82 <HAL_TIM_ConfigClockSource+0x15a>
 800aeb8:	2b30      	cmp	r3, #48	@ 0x30
 800aeba:	d86b      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x16c>
 800aebc:	2b20      	cmp	r3, #32
 800aebe:	d060      	beq.n	800af82 <HAL_TIM_ConfigClockSource+0x15a>
 800aec0:	2b20      	cmp	r3, #32
 800aec2:	d867      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x16c>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d05c      	beq.n	800af82 <HAL_TIM_ConfigClockSource+0x15a>
 800aec8:	2b10      	cmp	r3, #16
 800aeca:	d05a      	beq.n	800af82 <HAL_TIM_ConfigClockSource+0x15a>
 800aecc:	e062      	b.n	800af94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aede:	f000 fcd7 	bl	800b890 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aef0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	609a      	str	r2, [r3, #8]
      break;
 800aefa:	e04f      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af0c:	f000 fcc0 	bl	800b890 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689a      	ldr	r2, [r3, #8]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af1e:	609a      	str	r2, [r3, #8]
      break;
 800af20:	e03c      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af2e:	461a      	mov	r2, r3
 800af30:	f000 fb7e 	bl	800b630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2150      	movs	r1, #80	@ 0x50
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fc8d 	bl	800b85a <TIM_ITRx_SetConfig>
      break;
 800af40:	e02c      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af4e:	461a      	mov	r2, r3
 800af50:	f000 fbda 	bl	800b708 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2160      	movs	r1, #96	@ 0x60
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 fc7d 	bl	800b85a <TIM_ITRx_SetConfig>
      break;
 800af60:	e01c      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af6e:	461a      	mov	r2, r3
 800af70:	f000 fb5e 	bl	800b630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2140      	movs	r1, #64	@ 0x40
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 fc6d 	bl	800b85a <TIM_ITRx_SetConfig>
      break;
 800af80:	e00c      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4619      	mov	r1, r3
 800af8c:	4610      	mov	r0, r2
 800af8e:	f000 fc64 	bl	800b85a <TIM_ITRx_SetConfig>
      break;
 800af92:	e003      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	73fb      	strb	r3, [r7, #15]
      break;
 800af98:	e000      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800af9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800afac:	7bfb      	ldrb	r3, [r7, #15]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
	...

0800afb8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800afc2:	2300      	movs	r3, #0
 800afc4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b0c      	cmp	r3, #12
 800afca:	d831      	bhi.n	800b030 <HAL_TIM_ReadCapturedValue+0x78>
 800afcc:	a201      	add	r2, pc, #4	@ (adr r2, 800afd4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800afce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd2:	bf00      	nop
 800afd4:	0800b009 	.word	0x0800b009
 800afd8:	0800b031 	.word	0x0800b031
 800afdc:	0800b031 	.word	0x0800b031
 800afe0:	0800b031 	.word	0x0800b031
 800afe4:	0800b013 	.word	0x0800b013
 800afe8:	0800b031 	.word	0x0800b031
 800afec:	0800b031 	.word	0x0800b031
 800aff0:	0800b031 	.word	0x0800b031
 800aff4:	0800b01d 	.word	0x0800b01d
 800aff8:	0800b031 	.word	0x0800b031
 800affc:	0800b031 	.word	0x0800b031
 800b000:	0800b031 	.word	0x0800b031
 800b004:	0800b027 	.word	0x0800b027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b00e:	60fb      	str	r3, [r7, #12]

      break;
 800b010:	e00f      	b.n	800b032 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b018:	60fb      	str	r3, [r7, #12]

      break;
 800b01a:	e00a      	b.n	800b032 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b022:	60fb      	str	r3, [r7, #12]

      break;
 800b024:	e005      	b.n	800b032 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b02c:	60fb      	str	r3, [r7, #12]

      break;
 800b02e:	e000      	b.n	800b032 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b030:	bf00      	nop
  }

  return tmpreg;
 800b032:	68fb      	ldr	r3, [r7, #12]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3714      	adds	r7, #20
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a46      	ldr	r2, [pc, #280]	@ (800b1bc <TIM_Base_SetConfig+0x12c>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d013      	beq.n	800b0d0 <TIM_Base_SetConfig+0x40>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0ae:	d00f      	beq.n	800b0d0 <TIM_Base_SetConfig+0x40>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a43      	ldr	r2, [pc, #268]	@ (800b1c0 <TIM_Base_SetConfig+0x130>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d00b      	beq.n	800b0d0 <TIM_Base_SetConfig+0x40>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a42      	ldr	r2, [pc, #264]	@ (800b1c4 <TIM_Base_SetConfig+0x134>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d007      	beq.n	800b0d0 <TIM_Base_SetConfig+0x40>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a41      	ldr	r2, [pc, #260]	@ (800b1c8 <TIM_Base_SetConfig+0x138>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d003      	beq.n	800b0d0 <TIM_Base_SetConfig+0x40>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a40      	ldr	r2, [pc, #256]	@ (800b1cc <TIM_Base_SetConfig+0x13c>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d108      	bne.n	800b0e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a35      	ldr	r2, [pc, #212]	@ (800b1bc <TIM_Base_SetConfig+0x12c>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d02b      	beq.n	800b142 <TIM_Base_SetConfig+0xb2>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0f0:	d027      	beq.n	800b142 <TIM_Base_SetConfig+0xb2>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a32      	ldr	r2, [pc, #200]	@ (800b1c0 <TIM_Base_SetConfig+0x130>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d023      	beq.n	800b142 <TIM_Base_SetConfig+0xb2>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a31      	ldr	r2, [pc, #196]	@ (800b1c4 <TIM_Base_SetConfig+0x134>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d01f      	beq.n	800b142 <TIM_Base_SetConfig+0xb2>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a30      	ldr	r2, [pc, #192]	@ (800b1c8 <TIM_Base_SetConfig+0x138>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d01b      	beq.n	800b142 <TIM_Base_SetConfig+0xb2>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a2f      	ldr	r2, [pc, #188]	@ (800b1cc <TIM_Base_SetConfig+0x13c>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d017      	beq.n	800b142 <TIM_Base_SetConfig+0xb2>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a2e      	ldr	r2, [pc, #184]	@ (800b1d0 <TIM_Base_SetConfig+0x140>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d013      	beq.n	800b142 <TIM_Base_SetConfig+0xb2>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a2d      	ldr	r2, [pc, #180]	@ (800b1d4 <TIM_Base_SetConfig+0x144>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d00f      	beq.n	800b142 <TIM_Base_SetConfig+0xb2>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4a2c      	ldr	r2, [pc, #176]	@ (800b1d8 <TIM_Base_SetConfig+0x148>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d00b      	beq.n	800b142 <TIM_Base_SetConfig+0xb2>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a2b      	ldr	r2, [pc, #172]	@ (800b1dc <TIM_Base_SetConfig+0x14c>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d007      	beq.n	800b142 <TIM_Base_SetConfig+0xb2>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a2a      	ldr	r2, [pc, #168]	@ (800b1e0 <TIM_Base_SetConfig+0x150>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d003      	beq.n	800b142 <TIM_Base_SetConfig+0xb2>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a29      	ldr	r2, [pc, #164]	@ (800b1e4 <TIM_Base_SetConfig+0x154>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d108      	bne.n	800b154 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	4313      	orrs	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	4313      	orrs	r3, r2
 800b160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	689a      	ldr	r2, [r3, #8]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a10      	ldr	r2, [pc, #64]	@ (800b1bc <TIM_Base_SetConfig+0x12c>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d003      	beq.n	800b188 <TIM_Base_SetConfig+0xf8>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4a12      	ldr	r2, [pc, #72]	@ (800b1cc <TIM_Base_SetConfig+0x13c>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d103      	bne.n	800b190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	691a      	ldr	r2, [r3, #16]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2201      	movs	r2, #1
 800b194:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	f003 0301 	and.w	r3, r3, #1
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d105      	bne.n	800b1ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	f023 0201 	bic.w	r2, r3, #1
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	611a      	str	r2, [r3, #16]
  }
}
 800b1ae:	bf00      	nop
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	40010000 	.word	0x40010000
 800b1c0:	40000400 	.word	0x40000400
 800b1c4:	40000800 	.word	0x40000800
 800b1c8:	40000c00 	.word	0x40000c00
 800b1cc:	40010400 	.word	0x40010400
 800b1d0:	40014000 	.word	0x40014000
 800b1d4:	40014400 	.word	0x40014400
 800b1d8:	40014800 	.word	0x40014800
 800b1dc:	40001800 	.word	0x40001800
 800b1e0:	40001c00 	.word	0x40001c00
 800b1e4:	40002000 	.word	0x40002000

0800b1e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b087      	sub	sp, #28
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a1b      	ldr	r3, [r3, #32]
 800b1fc:	f023 0201 	bic.w	r2, r3, #1
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	699b      	ldr	r3, [r3, #24]
 800b20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f023 0303 	bic.w	r3, r3, #3
 800b21e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	4313      	orrs	r3, r2
 800b228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f023 0302 	bic.w	r3, r3, #2
 800b230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	4313      	orrs	r3, r2
 800b23a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a20      	ldr	r2, [pc, #128]	@ (800b2c0 <TIM_OC1_SetConfig+0xd8>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d003      	beq.n	800b24c <TIM_OC1_SetConfig+0x64>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a1f      	ldr	r2, [pc, #124]	@ (800b2c4 <TIM_OC1_SetConfig+0xdc>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d10c      	bne.n	800b266 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	f023 0308 	bic.w	r3, r3, #8
 800b252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	697a      	ldr	r2, [r7, #20]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f023 0304 	bic.w	r3, r3, #4
 800b264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a15      	ldr	r2, [pc, #84]	@ (800b2c0 <TIM_OC1_SetConfig+0xd8>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d003      	beq.n	800b276 <TIM_OC1_SetConfig+0x8e>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a14      	ldr	r2, [pc, #80]	@ (800b2c4 <TIM_OC1_SetConfig+0xdc>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d111      	bne.n	800b29a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b27c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	693a      	ldr	r2, [r7, #16]
 800b28c:	4313      	orrs	r3, r2
 800b28e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	699b      	ldr	r3, [r3, #24]
 800b294:	693a      	ldr	r2, [r7, #16]
 800b296:	4313      	orrs	r3, r2
 800b298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	685a      	ldr	r2, [r3, #4]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	621a      	str	r2, [r3, #32]
}
 800b2b4:	bf00      	nop
 800b2b6:	371c      	adds	r7, #28
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	40010000 	.word	0x40010000
 800b2c4:	40010400 	.word	0x40010400

0800b2c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a1b      	ldr	r3, [r3, #32]
 800b2dc:	f023 0210 	bic.w	r2, r3, #16
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	021b      	lsls	r3, r3, #8
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	4313      	orrs	r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f023 0320 	bic.w	r3, r3, #32
 800b312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	011b      	lsls	r3, r3, #4
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a22      	ldr	r2, [pc, #136]	@ (800b3ac <TIM_OC2_SetConfig+0xe4>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d003      	beq.n	800b330 <TIM_OC2_SetConfig+0x68>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a21      	ldr	r2, [pc, #132]	@ (800b3b0 <TIM_OC2_SetConfig+0xe8>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d10d      	bne.n	800b34c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	011b      	lsls	r3, r3, #4
 800b33e:	697a      	ldr	r2, [r7, #20]
 800b340:	4313      	orrs	r3, r2
 800b342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b34a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a17      	ldr	r2, [pc, #92]	@ (800b3ac <TIM_OC2_SetConfig+0xe4>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d003      	beq.n	800b35c <TIM_OC2_SetConfig+0x94>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a16      	ldr	r2, [pc, #88]	@ (800b3b0 <TIM_OC2_SetConfig+0xe8>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d113      	bne.n	800b384 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b36a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	4313      	orrs	r3, r2
 800b376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	4313      	orrs	r3, r2
 800b382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	693a      	ldr	r2, [r7, #16]
 800b388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	621a      	str	r2, [r3, #32]
}
 800b39e:	bf00      	nop
 800b3a0:	371c      	adds	r7, #28
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	40010000 	.word	0x40010000
 800b3b0:	40010400 	.word	0x40010400

0800b3b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a1b      	ldr	r3, [r3, #32]
 800b3c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	69db      	ldr	r3, [r3, #28]
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f023 0303 	bic.w	r3, r3, #3
 800b3ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	021b      	lsls	r3, r3, #8
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	4313      	orrs	r3, r2
 800b408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a21      	ldr	r2, [pc, #132]	@ (800b494 <TIM_OC3_SetConfig+0xe0>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d003      	beq.n	800b41a <TIM_OC3_SetConfig+0x66>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a20      	ldr	r2, [pc, #128]	@ (800b498 <TIM_OC3_SetConfig+0xe4>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d10d      	bne.n	800b436 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	021b      	lsls	r3, r3, #8
 800b428:	697a      	ldr	r2, [r7, #20]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a16      	ldr	r2, [pc, #88]	@ (800b494 <TIM_OC3_SetConfig+0xe0>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d003      	beq.n	800b446 <TIM_OC3_SetConfig+0x92>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a15      	ldr	r2, [pc, #84]	@ (800b498 <TIM_OC3_SetConfig+0xe4>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d113      	bne.n	800b46e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b44c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	011b      	lsls	r3, r3, #4
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	4313      	orrs	r3, r2
 800b460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	699b      	ldr	r3, [r3, #24]
 800b466:	011b      	lsls	r3, r3, #4
 800b468:	693a      	ldr	r2, [r7, #16]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	685a      	ldr	r2, [r3, #4]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	621a      	str	r2, [r3, #32]
}
 800b488:	bf00      	nop
 800b48a:	371c      	adds	r7, #28
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	40010000 	.word	0x40010000
 800b498:	40010400 	.word	0x40010400

0800b49c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b087      	sub	sp, #28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a1b      	ldr	r3, [r3, #32]
 800b4aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a1b      	ldr	r3, [r3, #32]
 800b4b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	021b      	lsls	r3, r3, #8
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b4e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	031b      	lsls	r3, r3, #12
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a12      	ldr	r2, [pc, #72]	@ (800b540 <TIM_OC4_SetConfig+0xa4>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d003      	beq.n	800b504 <TIM_OC4_SetConfig+0x68>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4a11      	ldr	r2, [pc, #68]	@ (800b544 <TIM_OC4_SetConfig+0xa8>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d109      	bne.n	800b518 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b50a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	695b      	ldr	r3, [r3, #20]
 800b510:	019b      	lsls	r3, r3, #6
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	4313      	orrs	r3, r2
 800b516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	685a      	ldr	r2, [r3, #4]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	693a      	ldr	r2, [r7, #16]
 800b530:	621a      	str	r2, [r3, #32]
}
 800b532:	bf00      	nop
 800b534:	371c      	adds	r7, #28
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	40010000 	.word	0x40010000
 800b544:	40010400 	.word	0x40010400

0800b548 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
 800b554:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6a1b      	ldr	r3, [r3, #32]
 800b55a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6a1b      	ldr	r3, [r3, #32]
 800b560:	f023 0201 	bic.w	r2, r3, #1
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	4a28      	ldr	r2, [pc, #160]	@ (800b614 <TIM_TI1_SetConfig+0xcc>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d01b      	beq.n	800b5ae <TIM_TI1_SetConfig+0x66>
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b57c:	d017      	beq.n	800b5ae <TIM_TI1_SetConfig+0x66>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	4a25      	ldr	r2, [pc, #148]	@ (800b618 <TIM_TI1_SetConfig+0xd0>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d013      	beq.n	800b5ae <TIM_TI1_SetConfig+0x66>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	4a24      	ldr	r2, [pc, #144]	@ (800b61c <TIM_TI1_SetConfig+0xd4>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d00f      	beq.n	800b5ae <TIM_TI1_SetConfig+0x66>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	4a23      	ldr	r2, [pc, #140]	@ (800b620 <TIM_TI1_SetConfig+0xd8>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d00b      	beq.n	800b5ae <TIM_TI1_SetConfig+0x66>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	4a22      	ldr	r2, [pc, #136]	@ (800b624 <TIM_TI1_SetConfig+0xdc>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d007      	beq.n	800b5ae <TIM_TI1_SetConfig+0x66>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4a21      	ldr	r2, [pc, #132]	@ (800b628 <TIM_TI1_SetConfig+0xe0>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d003      	beq.n	800b5ae <TIM_TI1_SetConfig+0x66>
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	4a20      	ldr	r2, [pc, #128]	@ (800b62c <TIM_TI1_SetConfig+0xe4>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d101      	bne.n	800b5b2 <TIM_TI1_SetConfig+0x6a>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e000      	b.n	800b5b4 <TIM_TI1_SetConfig+0x6c>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d008      	beq.n	800b5ca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f023 0303 	bic.w	r3, r3, #3
 800b5be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	617b      	str	r3, [r7, #20]
 800b5c8:	e003      	b.n	800b5d2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f043 0301 	orr.w	r3, r3, #1
 800b5d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b5d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	011b      	lsls	r3, r3, #4
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	f023 030a 	bic.w	r3, r3, #10
 800b5ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	f003 030a 	and.w	r3, r3, #10
 800b5f4:	693a      	ldr	r2, [r7, #16]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	621a      	str	r2, [r3, #32]
}
 800b606:	bf00      	nop
 800b608:	371c      	adds	r7, #28
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	40010000 	.word	0x40010000
 800b618:	40000400 	.word	0x40000400
 800b61c:	40000800 	.word	0x40000800
 800b620:	40000c00 	.word	0x40000c00
 800b624:	40010400 	.word	0x40010400
 800b628:	40014000 	.word	0x40014000
 800b62c:	40001800 	.word	0x40001800

0800b630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6a1b      	ldr	r3, [r3, #32]
 800b640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	f023 0201 	bic.w	r2, r3, #1
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	699b      	ldr	r3, [r3, #24]
 800b652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b65a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	011b      	lsls	r3, r3, #4
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	4313      	orrs	r3, r2
 800b664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f023 030a 	bic.w	r3, r3, #10
 800b66c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	4313      	orrs	r3, r2
 800b674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	693a      	ldr	r2, [r7, #16]
 800b67a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	621a      	str	r2, [r3, #32]
}
 800b682:	bf00      	nop
 800b684:	371c      	adds	r7, #28
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b68e:	b480      	push	{r7}
 800b690:	b087      	sub	sp, #28
 800b692:	af00      	add	r7, sp, #0
 800b694:	60f8      	str	r0, [r7, #12]
 800b696:	60b9      	str	r1, [r7, #8]
 800b698:	607a      	str	r2, [r7, #4]
 800b69a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6a1b      	ldr	r3, [r3, #32]
 800b6a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	f023 0210 	bic.w	r2, r3, #16
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	693a      	ldr	r2, [r7, #16]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b6cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	031b      	lsls	r3, r3, #12
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b6e0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	011b      	lsls	r3, r3, #4
 800b6e6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	621a      	str	r2, [r3, #32]
}
 800b6fc:	bf00      	nop
 800b6fe:	371c      	adds	r7, #28
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6a1b      	ldr	r3, [r3, #32]
 800b718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	f023 0210 	bic.w	r2, r3, #16
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	699b      	ldr	r3, [r3, #24]
 800b72a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	031b      	lsls	r3, r3, #12
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b744:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	011b      	lsls	r3, r3, #4
 800b74a:	697a      	ldr	r2, [r7, #20]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	697a      	ldr	r2, [r7, #20]
 800b75a:	621a      	str	r2, [r3, #32]
}
 800b75c:	bf00      	nop
 800b75e:	371c      	adds	r7, #28
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b768:	b480      	push	{r7}
 800b76a:	b087      	sub	sp, #28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6a1b      	ldr	r3, [r3, #32]
 800b77a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6a1b      	ldr	r3, [r3, #32]
 800b780:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	69db      	ldr	r3, [r3, #28]
 800b78c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	f023 0303 	bic.w	r3, r3, #3
 800b794:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b7a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	011b      	lsls	r3, r3, #4
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	693a      	ldr	r2, [r7, #16]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800b7b8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	021b      	lsls	r3, r3, #8
 800b7be:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800b7c2:	697a      	ldr	r2, [r7, #20]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	693a      	ldr	r2, [r7, #16]
 800b7cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	697a      	ldr	r2, [r7, #20]
 800b7d2:	621a      	str	r2, [r3, #32]
}
 800b7d4:	bf00      	nop
 800b7d6:	371c      	adds	r7, #28
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b087      	sub	sp, #28
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
 800b7ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6a1b      	ldr	r3, [r3, #32]
 800b7f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	69db      	ldr	r3, [r3, #28]
 800b804:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b80c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	021b      	lsls	r3, r3, #8
 800b812:	693a      	ldr	r2, [r7, #16]
 800b814:	4313      	orrs	r3, r2
 800b816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b81e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	031b      	lsls	r3, r3, #12
 800b824:	b29b      	uxth	r3, r3
 800b826:	693a      	ldr	r2, [r7, #16]
 800b828:	4313      	orrs	r3, r2
 800b82a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800b832:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	031b      	lsls	r3, r3, #12
 800b838:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800b83c:	697a      	ldr	r2, [r7, #20]
 800b83e:	4313      	orrs	r3, r2
 800b840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	693a      	ldr	r2, [r7, #16]
 800b846:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	621a      	str	r2, [r3, #32]
}
 800b84e:	bf00      	nop
 800b850:	371c      	adds	r7, #28
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b085      	sub	sp, #20
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	4313      	orrs	r3, r2
 800b878:	f043 0307 	orr.w	r3, r3, #7
 800b87c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	609a      	str	r2, [r3, #8]
}
 800b884:	bf00      	nop
 800b886:	3714      	adds	r7, #20
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b890:	b480      	push	{r7}
 800b892:	b087      	sub	sp, #28
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
 800b89c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b8aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	021a      	lsls	r2, r3, #8
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	431a      	orrs	r2, r3
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	697a      	ldr	r2, [r7, #20]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	609a      	str	r2, [r3, #8]
}
 800b8c4:	bf00      	nop
 800b8c6:	371c      	adds	r7, #28
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b087      	sub	sp, #28
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	f003 031f 	and.w	r3, r3, #31
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6a1a      	ldr	r2, [r3, #32]
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	43db      	mvns	r3, r3
 800b8f2:	401a      	ands	r2, r3
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6a1a      	ldr	r2, [r3, #32]
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f003 031f 	and.w	r3, r3, #31
 800b902:	6879      	ldr	r1, [r7, #4]
 800b904:	fa01 f303 	lsl.w	r3, r1, r3
 800b908:	431a      	orrs	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	621a      	str	r2, [r3, #32]
}
 800b90e:	bf00      	nop
 800b910:	371c      	adds	r7, #28
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr
	...

0800b91c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d101      	bne.n	800b934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b930:	2302      	movs	r3, #2
 800b932:	e05a      	b.n	800b9ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2202      	movs	r2, #2
 800b940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b95a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	4313      	orrs	r3, r2
 800b964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a21      	ldr	r2, [pc, #132]	@ (800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d022      	beq.n	800b9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b980:	d01d      	beq.n	800b9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a1d      	ldr	r2, [pc, #116]	@ (800b9fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d018      	beq.n	800b9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a1b      	ldr	r2, [pc, #108]	@ (800ba00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d013      	beq.n	800b9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a1a      	ldr	r2, [pc, #104]	@ (800ba04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d00e      	beq.n	800b9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a18      	ldr	r2, [pc, #96]	@ (800ba08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d009      	beq.n	800b9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a17      	ldr	r2, [pc, #92]	@ (800ba0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d004      	beq.n	800b9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a15      	ldr	r2, [pc, #84]	@ (800ba10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d10c      	bne.n	800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3714      	adds	r7, #20
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	40010000 	.word	0x40010000
 800b9fc:	40000400 	.word	0x40000400
 800ba00:	40000800 	.word	0x40000800
 800ba04:	40000c00 	.word	0x40000c00
 800ba08:	40010400 	.word	0x40010400
 800ba0c:	40014000 	.word	0x40014000
 800ba10:	40001800 	.word	0x40001800

0800ba14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d101      	bne.n	800ba30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	e03d      	b.n	800baac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	695b      	ldr	r3, [r3, #20]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	69db      	ldr	r3, [r3, #28]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3714      	adds	r7, #20
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bac0:	bf00      	nop
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bad4:	bf00      	nop
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e042      	b.n	800bb78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d106      	bne.n	800bb0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7fb f8ec 	bl	8006ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2224      	movs	r2, #36	@ 0x24
 800bb10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68da      	ldr	r2, [r3, #12]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bb22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fdbd 	bl	800c6a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	691a      	ldr	r2, [r3, #16]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bb38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	695a      	ldr	r2, [r3, #20]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bb48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68da      	ldr	r2, [r3, #12]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bb58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2220      	movs	r2, #32
 800bb64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b08a      	sub	sp, #40	@ 0x28
 800bb84:	af02      	add	r7, sp, #8
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	603b      	str	r3, [r7, #0]
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bb90:	2300      	movs	r3, #0
 800bb92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	2b20      	cmp	r3, #32
 800bb9e:	d175      	bne.n	800bc8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d002      	beq.n	800bbac <HAL_UART_Transmit+0x2c>
 800bba6:	88fb      	ldrh	r3, [r7, #6]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d101      	bne.n	800bbb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bbac:	2301      	movs	r3, #1
 800bbae:	e06e      	b.n	800bc8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2221      	movs	r2, #33	@ 0x21
 800bbba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bbbe:	f7fb faa1 	bl	8007104 <HAL_GetTick>
 800bbc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	88fa      	ldrh	r2, [r7, #6]
 800bbc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	88fa      	ldrh	r2, [r7, #6]
 800bbce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbd8:	d108      	bne.n	800bbec <HAL_UART_Transmit+0x6c>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d104      	bne.n	800bbec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	61bb      	str	r3, [r7, #24]
 800bbea:	e003      	b.n	800bbf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bbf4:	e02e      	b.n	800bc54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	2180      	movs	r1, #128	@ 0x80
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f000 fb1f 	bl	800c244 <UART_WaitOnFlagUntilTimeout>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d005      	beq.n	800bc18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2220      	movs	r2, #32
 800bc10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800bc14:	2303      	movs	r3, #3
 800bc16:	e03a      	b.n	800bc8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10b      	bne.n	800bc36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	881b      	ldrh	r3, [r3, #0]
 800bc22:	461a      	mov	r2, r3
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	3302      	adds	r3, #2
 800bc32:	61bb      	str	r3, [r7, #24]
 800bc34:	e007      	b.n	800bc46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	781a      	ldrb	r2, [r3, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	3301      	adds	r3, #1
 800bc44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1cb      	bne.n	800bbf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	9300      	str	r3, [sp, #0]
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	2200      	movs	r2, #0
 800bc66:	2140      	movs	r1, #64	@ 0x40
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f000 faeb 	bl	800c244 <UART_WaitOnFlagUntilTimeout>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d005      	beq.n	800bc80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2220      	movs	r2, #32
 800bc78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	e006      	b.n	800bc8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2220      	movs	r2, #32
 800bc84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	e000      	b.n	800bc8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800bc8c:	2302      	movs	r3, #2
  }
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3720      	adds	r7, #32
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	60b9      	str	r1, [r7, #8]
 800bca0:	4613      	mov	r3, r2
 800bca2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	2b20      	cmp	r3, #32
 800bcae:	d112      	bne.n	800bcd6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d002      	beq.n	800bcbc <HAL_UART_Receive_IT+0x26>
 800bcb6:	88fb      	ldrh	r3, [r7, #6]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d101      	bne.n	800bcc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e00b      	b.n	800bcd8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bcc6:	88fb      	ldrh	r3, [r7, #6]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	68b9      	ldr	r1, [r7, #8]
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 fb12 	bl	800c2f6 <UART_Start_Receive_IT>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	e000      	b.n	800bcd8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800bcd6:	2302      	movs	r3, #2
  }
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b0ba      	sub	sp, #232	@ 0xe8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bd06:	2300      	movs	r3, #0
 800bd08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd16:	f003 030f 	and.w	r3, r3, #15
 800bd1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bd1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10f      	bne.n	800bd46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd2a:	f003 0320 	and.w	r3, r3, #32
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d009      	beq.n	800bd46 <HAL_UART_IRQHandler+0x66>
 800bd32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd36:	f003 0320 	and.w	r3, r3, #32
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 fbf2 	bl	800c528 <UART_Receive_IT>
      return;
 800bd44:	e25b      	b.n	800c1fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bd46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 80de 	beq.w	800bf0c <HAL_UART_IRQHandler+0x22c>
 800bd50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd54:	f003 0301 	and.w	r3, r3, #1
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d106      	bne.n	800bd6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bd5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd60:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f000 80d1 	beq.w	800bf0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bd6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00b      	beq.n	800bd8e <HAL_UART_IRQHandler+0xae>
 800bd76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d005      	beq.n	800bd8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd86:	f043 0201 	orr.w	r2, r3, #1
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd92:	f003 0304 	and.w	r3, r3, #4
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00b      	beq.n	800bdb2 <HAL_UART_IRQHandler+0xd2>
 800bd9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd9e:	f003 0301 	and.w	r3, r3, #1
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d005      	beq.n	800bdb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdaa:	f043 0202 	orr.w	r2, r3, #2
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bdb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdb6:	f003 0302 	and.w	r3, r3, #2
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00b      	beq.n	800bdd6 <HAL_UART_IRQHandler+0xf6>
 800bdbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdc2:	f003 0301 	and.w	r3, r3, #1
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdce:	f043 0204 	orr.w	r2, r3, #4
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bdd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdda:	f003 0308 	and.w	r3, r3, #8
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d011      	beq.n	800be06 <HAL_UART_IRQHandler+0x126>
 800bde2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bde6:	f003 0320 	and.w	r3, r3, #32
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d105      	bne.n	800bdfa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bdee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdf2:	f003 0301 	and.w	r3, r3, #1
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d005      	beq.n	800be06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdfe:	f043 0208 	orr.w	r2, r3, #8
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f000 81f2 	beq.w	800c1f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be14:	f003 0320 	and.w	r3, r3, #32
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d008      	beq.n	800be2e <HAL_UART_IRQHandler+0x14e>
 800be1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be20:	f003 0320 	and.w	r3, r3, #32
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fb7d 	bl	800c528 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	695b      	ldr	r3, [r3, #20]
 800be34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be38:	2b40      	cmp	r3, #64	@ 0x40
 800be3a:	bf0c      	ite	eq
 800be3c:	2301      	moveq	r3, #1
 800be3e:	2300      	movne	r3, #0
 800be40:	b2db      	uxtb	r3, r3
 800be42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be4a:	f003 0308 	and.w	r3, r3, #8
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d103      	bne.n	800be5a <HAL_UART_IRQHandler+0x17a>
 800be52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800be56:	2b00      	cmp	r3, #0
 800be58:	d04f      	beq.n	800befa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fa85 	bl	800c36a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be6a:	2b40      	cmp	r3, #64	@ 0x40
 800be6c:	d141      	bne.n	800bef2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	3314      	adds	r3, #20
 800be74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be7c:	e853 3f00 	ldrex	r3, [r3]
 800be80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800be84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	3314      	adds	r3, #20
 800be96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800be9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800be9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800beaa:	e841 2300 	strex	r3, r2, [r1]
 800beae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800beb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1d9      	bne.n	800be6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d013      	beq.n	800beea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bec6:	4a7e      	ldr	r2, [pc, #504]	@ (800c0c0 <HAL_UART_IRQHandler+0x3e0>)
 800bec8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fb ffce 	bl	8007e70 <HAL_DMA_Abort_IT>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d016      	beq.n	800bf08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bee4:	4610      	mov	r0, r2
 800bee6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bee8:	e00e      	b.n	800bf08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f994 	bl	800c218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bef0:	e00a      	b.n	800bf08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 f990 	bl	800c218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bef8:	e006      	b.n	800bf08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f98c 	bl	800c218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800bf06:	e175      	b.n	800c1f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf08:	bf00      	nop
    return;
 800bf0a:	e173      	b.n	800c1f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	f040 814f 	bne.w	800c1b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bf16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf1a:	f003 0310 	and.w	r3, r3, #16
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f000 8148 	beq.w	800c1b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bf24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf28:	f003 0310 	and.w	r3, r3, #16
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f000 8141 	beq.w	800c1b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf32:	2300      	movs	r3, #0
 800bf34:	60bb      	str	r3, [r7, #8]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	60bb      	str	r3, [r7, #8]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	60bb      	str	r3, [r7, #8]
 800bf46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	695b      	ldr	r3, [r3, #20]
 800bf4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf52:	2b40      	cmp	r3, #64	@ 0x40
 800bf54:	f040 80b6 	bne.w	800c0c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 8145 	beq.w	800c1f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bf72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bf76:	429a      	cmp	r2, r3
 800bf78:	f080 813e 	bcs.w	800c1f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bf82:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf88:	69db      	ldr	r3, [r3, #28]
 800bf8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf8e:	f000 8088 	beq.w	800c0a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	330c      	adds	r3, #12
 800bf98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bfa0:	e853 3f00 	ldrex	r3, [r3]
 800bfa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bfa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bfac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bfb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	330c      	adds	r3, #12
 800bfba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bfbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bfc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bfca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bfce:	e841 2300 	strex	r3, r2, [r1]
 800bfd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bfd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1d9      	bne.n	800bf92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	3314      	adds	r3, #20
 800bfe4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfe8:	e853 3f00 	ldrex	r3, [r3]
 800bfec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bfee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bff0:	f023 0301 	bic.w	r3, r3, #1
 800bff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3314      	adds	r3, #20
 800bffe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c002:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c006:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c00a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c00e:	e841 2300 	strex	r3, r2, [r1]
 800c012:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c014:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1e1      	bne.n	800bfde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3314      	adds	r3, #20
 800c020:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c022:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c024:	e853 3f00 	ldrex	r3, [r3]
 800c028:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c02a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c02c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c030:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	3314      	adds	r3, #20
 800c03a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c03e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c040:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c042:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c044:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c046:	e841 2300 	strex	r3, r2, [r1]
 800c04a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c04c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1e3      	bne.n	800c01a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2220      	movs	r2, #32
 800c056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	330c      	adds	r3, #12
 800c066:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c06a:	e853 3f00 	ldrex	r3, [r3]
 800c06e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c072:	f023 0310 	bic.w	r3, r3, #16
 800c076:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	330c      	adds	r3, #12
 800c080:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c084:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c086:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c088:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c08a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c08c:	e841 2300 	strex	r3, r2, [r1]
 800c090:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1e3      	bne.n	800c060 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fb fe77 	bl	8007d90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2202      	movs	r2, #2
 800c0a6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f8b7 	bl	800c22c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0be:	e09b      	b.n	800c1f8 <HAL_UART_IRQHandler+0x518>
 800c0c0:	0800c431 	.word	0x0800c431
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	1ad3      	subs	r3, r2, r3
 800c0d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f000 808e 	beq.w	800c1fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c0e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 8089 	beq.w	800c1fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	330c      	adds	r3, #12
 800c0f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f4:	e853 3f00 	ldrex	r3, [r3]
 800c0f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c100:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	330c      	adds	r3, #12
 800c10a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c10e:	647a      	str	r2, [r7, #68]	@ 0x44
 800c110:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c112:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c116:	e841 2300 	strex	r3, r2, [r1]
 800c11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c11c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1e3      	bne.n	800c0ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	3314      	adds	r3, #20
 800c128:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12c:	e853 3f00 	ldrex	r3, [r3]
 800c130:	623b      	str	r3, [r7, #32]
   return(result);
 800c132:	6a3b      	ldr	r3, [r7, #32]
 800c134:	f023 0301 	bic.w	r3, r3, #1
 800c138:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3314      	adds	r3, #20
 800c142:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c146:	633a      	str	r2, [r7, #48]	@ 0x30
 800c148:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c14c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c14e:	e841 2300 	strex	r3, r2, [r1]
 800c152:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1e3      	bne.n	800c122 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2220      	movs	r2, #32
 800c15e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	330c      	adds	r3, #12
 800c16e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	e853 3f00 	ldrex	r3, [r3]
 800c176:	60fb      	str	r3, [r7, #12]
   return(result);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f023 0310 	bic.w	r3, r3, #16
 800c17e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	330c      	adds	r3, #12
 800c188:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c18c:	61fa      	str	r2, [r7, #28]
 800c18e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c190:	69b9      	ldr	r1, [r7, #24]
 800c192:	69fa      	ldr	r2, [r7, #28]
 800c194:	e841 2300 	strex	r3, r2, [r1]
 800c198:	617b      	str	r3, [r7, #20]
   return(result);
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1e3      	bne.n	800c168 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c1a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 f83d 	bl	800c22c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c1b2:	e023      	b.n	800c1fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d009      	beq.n	800c1d4 <HAL_UART_IRQHandler+0x4f4>
 800c1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d003      	beq.n	800c1d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f943 	bl	800c458 <UART_Transmit_IT>
    return;
 800c1d2:	e014      	b.n	800c1fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00e      	beq.n	800c1fe <HAL_UART_IRQHandler+0x51e>
 800c1e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d008      	beq.n	800c1fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 f983 	bl	800c4f8 <UART_EndTransmit_IT>
    return;
 800c1f2:	e004      	b.n	800c1fe <HAL_UART_IRQHandler+0x51e>
    return;
 800c1f4:	bf00      	nop
 800c1f6:	e002      	b.n	800c1fe <HAL_UART_IRQHandler+0x51e>
      return;
 800c1f8:	bf00      	nop
 800c1fa:	e000      	b.n	800c1fe <HAL_UART_IRQHandler+0x51e>
      return;
 800c1fc:	bf00      	nop
  }
}
 800c1fe:	37e8      	adds	r7, #232	@ 0xe8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c20c:	bf00      	nop
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	460b      	mov	r3, r1
 800c236:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b086      	sub	sp, #24
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	603b      	str	r3, [r7, #0]
 800c250:	4613      	mov	r3, r2
 800c252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c254:	e03b      	b.n	800c2ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c256:	6a3b      	ldr	r3, [r7, #32]
 800c258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25c:	d037      	beq.n	800c2ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c25e:	f7fa ff51 	bl	8007104 <HAL_GetTick>
 800c262:	4602      	mov	r2, r0
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	1ad3      	subs	r3, r2, r3
 800c268:	6a3a      	ldr	r2, [r7, #32]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d302      	bcc.n	800c274 <UART_WaitOnFlagUntilTimeout+0x30>
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c274:	2303      	movs	r3, #3
 800c276:	e03a      	b.n	800c2ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	f003 0304 	and.w	r3, r3, #4
 800c282:	2b00      	cmp	r3, #0
 800c284:	d023      	beq.n	800c2ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	2b80      	cmp	r3, #128	@ 0x80
 800c28a:	d020      	beq.n	800c2ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2b40      	cmp	r3, #64	@ 0x40
 800c290:	d01d      	beq.n	800c2ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 0308 	and.w	r3, r3, #8
 800c29c:	2b08      	cmp	r3, #8
 800c29e:	d116      	bne.n	800c2ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	617b      	str	r3, [r7, #20]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	617b      	str	r3, [r7, #20]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	617b      	str	r3, [r7, #20]
 800c2b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f000 f857 	bl	800c36a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2208      	movs	r2, #8
 800c2c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e00f      	b.n	800c2ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	4013      	ands	r3, r2
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	bf0c      	ite	eq
 800c2de:	2301      	moveq	r3, #1
 800c2e0:	2300      	movne	r3, #0
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	79fb      	ldrb	r3, [r7, #7]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d0b4      	beq.n	800c256 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2f6:	b480      	push	{r7}
 800c2f8:	b085      	sub	sp, #20
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	60f8      	str	r0, [r7, #12]
 800c2fe:	60b9      	str	r1, [r7, #8]
 800c300:	4613      	mov	r3, r2
 800c302:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	88fa      	ldrh	r2, [r7, #6]
 800c30e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	88fa      	ldrh	r2, [r7, #6]
 800c314:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2200      	movs	r2, #0
 800c31a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2222      	movs	r2, #34	@ 0x22
 800c320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d007      	beq.n	800c33c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c33a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	695a      	ldr	r2, [r3, #20]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f042 0201 	orr.w	r2, r2, #1
 800c34a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	68da      	ldr	r2, [r3, #12]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f042 0220 	orr.w	r2, r2, #32
 800c35a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c36a:	b480      	push	{r7}
 800c36c:	b095      	sub	sp, #84	@ 0x54
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	330c      	adds	r3, #12
 800c378:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c37c:	e853 3f00 	ldrex	r3, [r3]
 800c380:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	330c      	adds	r3, #12
 800c390:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c392:	643a      	str	r2, [r7, #64]	@ 0x40
 800c394:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c396:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c39a:	e841 2300 	strex	r3, r2, [r1]
 800c39e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1e5      	bne.n	800c372 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	3314      	adds	r3, #20
 800c3ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ae:	6a3b      	ldr	r3, [r7, #32]
 800c3b0:	e853 3f00 	ldrex	r3, [r3]
 800c3b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	f023 0301 	bic.w	r3, r3, #1
 800c3bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3314      	adds	r3, #20
 800c3c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c3c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c3cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3ce:	e841 2300 	strex	r3, r2, [r1]
 800c3d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1e5      	bne.n	800c3a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d119      	bne.n	800c416 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	330c      	adds	r3, #12
 800c3e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	e853 3f00 	ldrex	r3, [r3]
 800c3f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	f023 0310 	bic.w	r3, r3, #16
 800c3f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	330c      	adds	r3, #12
 800c400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c402:	61ba      	str	r2, [r7, #24]
 800c404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c406:	6979      	ldr	r1, [r7, #20]
 800c408:	69ba      	ldr	r2, [r7, #24]
 800c40a:	e841 2300 	strex	r3, r2, [r1]
 800c40e:	613b      	str	r3, [r7, #16]
   return(result);
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1e5      	bne.n	800c3e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2220      	movs	r2, #32
 800c41a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c424:	bf00      	nop
 800c426:	3754      	adds	r7, #84	@ 0x54
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c43c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f7ff fee4 	bl	800c218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c450:	bf00      	nop
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b21      	cmp	r3, #33	@ 0x21
 800c46a:	d13e      	bne.n	800c4ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c474:	d114      	bne.n	800c4a0 <UART_Transmit_IT+0x48>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d110      	bne.n	800c4a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	881b      	ldrh	r3, [r3, #0]
 800c488:	461a      	mov	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c492:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a1b      	ldr	r3, [r3, #32]
 800c498:	1c9a      	adds	r2, r3, #2
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	621a      	str	r2, [r3, #32]
 800c49e:	e008      	b.n	800c4b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6a1b      	ldr	r3, [r3, #32]
 800c4a4:	1c59      	adds	r1, r3, #1
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	6211      	str	r1, [r2, #32]
 800c4aa:	781a      	ldrb	r2, [r3, #0]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	4619      	mov	r1, r3
 800c4c0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10f      	bne.n	800c4e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68da      	ldr	r2, [r3, #12]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c4d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	68da      	ldr	r2, [r3, #12]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c4e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	e000      	b.n	800c4ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c4ea:	2302      	movs	r3, #2
  }
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3714      	adds	r7, #20
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68da      	ldr	r2, [r3, #12]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c50e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2220      	movs	r2, #32
 800c514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7ff fe73 	bl	800c204 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b08c      	sub	sp, #48	@ 0x30
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b22      	cmp	r3, #34	@ 0x22
 800c53a:	f040 80ae 	bne.w	800c69a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c546:	d117      	bne.n	800c578 <UART_Receive_IT+0x50>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d113      	bne.n	800c578 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c550:	2300      	movs	r3, #0
 800c552:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c558:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	b29b      	uxth	r3, r3
 800c562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c566:	b29a      	uxth	r2, r3
 800c568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c56a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c570:	1c9a      	adds	r2, r3, #2
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	629a      	str	r2, [r3, #40]	@ 0x28
 800c576:	e026      	b.n	800c5c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c57c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c57e:	2300      	movs	r3, #0
 800c580:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c58a:	d007      	beq.n	800c59c <UART_Receive_IT+0x74>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10a      	bne.n	800c5aa <UART_Receive_IT+0x82>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	691b      	ldr	r3, [r3, #16]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d106      	bne.n	800c5aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a6:	701a      	strb	r2, [r3, #0]
 800c5a8:	e008      	b.n	800c5bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5c0:	1c5a      	adds	r2, r3, #1
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d15d      	bne.n	800c696 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68da      	ldr	r2, [r3, #12]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f022 0220 	bic.w	r2, r2, #32
 800c5e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68da      	ldr	r2, [r3, #12]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	695a      	ldr	r2, [r3, #20]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f022 0201 	bic.w	r2, r2, #1
 800c608:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2220      	movs	r2, #32
 800c60e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d135      	bne.n	800c68c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	330c      	adds	r3, #12
 800c62c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	e853 3f00 	ldrex	r3, [r3]
 800c634:	613b      	str	r3, [r7, #16]
   return(result);
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	f023 0310 	bic.w	r3, r3, #16
 800c63c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	330c      	adds	r3, #12
 800c644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c646:	623a      	str	r2, [r7, #32]
 800c648:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64a:	69f9      	ldr	r1, [r7, #28]
 800c64c:	6a3a      	ldr	r2, [r7, #32]
 800c64e:	e841 2300 	strex	r3, r2, [r1]
 800c652:	61bb      	str	r3, [r7, #24]
   return(result);
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1e5      	bne.n	800c626 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f003 0310 	and.w	r3, r3, #16
 800c664:	2b10      	cmp	r3, #16
 800c666:	d10a      	bne.n	800c67e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c668:	2300      	movs	r3, #0
 800c66a:	60fb      	str	r3, [r7, #12]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	60fb      	str	r3, [r7, #12]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	60fb      	str	r3, [r7, #12]
 800c67c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7ff fdd1 	bl	800c22c <HAL_UARTEx_RxEventCallback>
 800c68a:	e002      	b.n	800c692 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7f5 fc7f 	bl	8001f90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c692:	2300      	movs	r3, #0
 800c694:	e002      	b.n	800c69c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c696:	2300      	movs	r3, #0
 800c698:	e000      	b.n	800c69c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c69a:	2302      	movs	r3, #2
  }
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3730      	adds	r7, #48	@ 0x30
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6a8:	b0c0      	sub	sp, #256	@ 0x100
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6c0:	68d9      	ldr	r1, [r3, #12]
 800c6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	ea40 0301 	orr.w	r3, r0, r1
 800c6cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6d2:	689a      	ldr	r2, [r3, #8]
 800c6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	431a      	orrs	r2, r3
 800c6dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6e0:	695b      	ldr	r3, [r3, #20]
 800c6e2:	431a      	orrs	r2, r3
 800c6e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6e8:	69db      	ldr	r3, [r3, #28]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c6f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c6fc:	f021 010c 	bic.w	r1, r1, #12
 800c700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c70a:	430b      	orrs	r3, r1
 800c70c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c71a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c71e:	6999      	ldr	r1, [r3, #24]
 800c720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	ea40 0301 	orr.w	r3, r0, r1
 800c72a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c72c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	4b8f      	ldr	r3, [pc, #572]	@ (800c970 <UART_SetConfig+0x2cc>)
 800c734:	429a      	cmp	r2, r3
 800c736:	d005      	beq.n	800c744 <UART_SetConfig+0xa0>
 800c738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	4b8d      	ldr	r3, [pc, #564]	@ (800c974 <UART_SetConfig+0x2d0>)
 800c740:	429a      	cmp	r2, r3
 800c742:	d104      	bne.n	800c74e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c744:	f7fd fc7e 	bl	800a044 <HAL_RCC_GetPCLK2Freq>
 800c748:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c74c:	e003      	b.n	800c756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c74e:	f7fd fc65 	bl	800a01c <HAL_RCC_GetPCLK1Freq>
 800c752:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c75a:	69db      	ldr	r3, [r3, #28]
 800c75c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c760:	f040 810c 	bne.w	800c97c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c768:	2200      	movs	r2, #0
 800c76a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c76e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c776:	4622      	mov	r2, r4
 800c778:	462b      	mov	r3, r5
 800c77a:	1891      	adds	r1, r2, r2
 800c77c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c77e:	415b      	adcs	r3, r3
 800c780:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c786:	4621      	mov	r1, r4
 800c788:	eb12 0801 	adds.w	r8, r2, r1
 800c78c:	4629      	mov	r1, r5
 800c78e:	eb43 0901 	adc.w	r9, r3, r1
 800c792:	f04f 0200 	mov.w	r2, #0
 800c796:	f04f 0300 	mov.w	r3, #0
 800c79a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c79e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c7a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c7a6:	4690      	mov	r8, r2
 800c7a8:	4699      	mov	r9, r3
 800c7aa:	4623      	mov	r3, r4
 800c7ac:	eb18 0303 	adds.w	r3, r8, r3
 800c7b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c7b4:	462b      	mov	r3, r5
 800c7b6:	eb49 0303 	adc.w	r3, r9, r3
 800c7ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c7ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c7ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	18db      	adds	r3, r3, r3
 800c7d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7d8:	4613      	mov	r3, r2
 800c7da:	eb42 0303 	adc.w	r3, r2, r3
 800c7de:	657b      	str	r3, [r7, #84]	@ 0x54
 800c7e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c7e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c7e8:	f7f4 fa4e 	bl	8000c88 <__aeabi_uldivmod>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	4b61      	ldr	r3, [pc, #388]	@ (800c978 <UART_SetConfig+0x2d4>)
 800c7f2:	fba3 2302 	umull	r2, r3, r3, r2
 800c7f6:	095b      	lsrs	r3, r3, #5
 800c7f8:	011c      	lsls	r4, r3, #4
 800c7fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7fe:	2200      	movs	r2, #0
 800c800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c804:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c80c:	4642      	mov	r2, r8
 800c80e:	464b      	mov	r3, r9
 800c810:	1891      	adds	r1, r2, r2
 800c812:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c814:	415b      	adcs	r3, r3
 800c816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c81c:	4641      	mov	r1, r8
 800c81e:	eb12 0a01 	adds.w	sl, r2, r1
 800c822:	4649      	mov	r1, r9
 800c824:	eb43 0b01 	adc.w	fp, r3, r1
 800c828:	f04f 0200 	mov.w	r2, #0
 800c82c:	f04f 0300 	mov.w	r3, #0
 800c830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c83c:	4692      	mov	sl, r2
 800c83e:	469b      	mov	fp, r3
 800c840:	4643      	mov	r3, r8
 800c842:	eb1a 0303 	adds.w	r3, sl, r3
 800c846:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c84a:	464b      	mov	r3, r9
 800c84c:	eb4b 0303 	adc.w	r3, fp, r3
 800c850:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c860:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c868:	460b      	mov	r3, r1
 800c86a:	18db      	adds	r3, r3, r3
 800c86c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c86e:	4613      	mov	r3, r2
 800c870:	eb42 0303 	adc.w	r3, r2, r3
 800c874:	647b      	str	r3, [r7, #68]	@ 0x44
 800c876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c87a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c87e:	f7f4 fa03 	bl	8000c88 <__aeabi_uldivmod>
 800c882:	4602      	mov	r2, r0
 800c884:	460b      	mov	r3, r1
 800c886:	4611      	mov	r1, r2
 800c888:	4b3b      	ldr	r3, [pc, #236]	@ (800c978 <UART_SetConfig+0x2d4>)
 800c88a:	fba3 2301 	umull	r2, r3, r3, r1
 800c88e:	095b      	lsrs	r3, r3, #5
 800c890:	2264      	movs	r2, #100	@ 0x64
 800c892:	fb02 f303 	mul.w	r3, r2, r3
 800c896:	1acb      	subs	r3, r1, r3
 800c898:	00db      	lsls	r3, r3, #3
 800c89a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c89e:	4b36      	ldr	r3, [pc, #216]	@ (800c978 <UART_SetConfig+0x2d4>)
 800c8a0:	fba3 2302 	umull	r2, r3, r3, r2
 800c8a4:	095b      	lsrs	r3, r3, #5
 800c8a6:	005b      	lsls	r3, r3, #1
 800c8a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c8ac:	441c      	add	r4, r3
 800c8ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c8b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c8bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c8c0:	4642      	mov	r2, r8
 800c8c2:	464b      	mov	r3, r9
 800c8c4:	1891      	adds	r1, r2, r2
 800c8c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c8c8:	415b      	adcs	r3, r3
 800c8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c8d0:	4641      	mov	r1, r8
 800c8d2:	1851      	adds	r1, r2, r1
 800c8d4:	6339      	str	r1, [r7, #48]	@ 0x30
 800c8d6:	4649      	mov	r1, r9
 800c8d8:	414b      	adcs	r3, r1
 800c8da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8dc:	f04f 0200 	mov.w	r2, #0
 800c8e0:	f04f 0300 	mov.w	r3, #0
 800c8e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c8e8:	4659      	mov	r1, fp
 800c8ea:	00cb      	lsls	r3, r1, #3
 800c8ec:	4651      	mov	r1, sl
 800c8ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c8f2:	4651      	mov	r1, sl
 800c8f4:	00ca      	lsls	r2, r1, #3
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	4642      	mov	r2, r8
 800c8fe:	189b      	adds	r3, r3, r2
 800c900:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c904:	464b      	mov	r3, r9
 800c906:	460a      	mov	r2, r1
 800c908:	eb42 0303 	adc.w	r3, r2, r3
 800c90c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c91c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c924:	460b      	mov	r3, r1
 800c926:	18db      	adds	r3, r3, r3
 800c928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c92a:	4613      	mov	r3, r2
 800c92c:	eb42 0303 	adc.w	r3, r2, r3
 800c930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c93a:	f7f4 f9a5 	bl	8000c88 <__aeabi_uldivmod>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4b0d      	ldr	r3, [pc, #52]	@ (800c978 <UART_SetConfig+0x2d4>)
 800c944:	fba3 1302 	umull	r1, r3, r3, r2
 800c948:	095b      	lsrs	r3, r3, #5
 800c94a:	2164      	movs	r1, #100	@ 0x64
 800c94c:	fb01 f303 	mul.w	r3, r1, r3
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	00db      	lsls	r3, r3, #3
 800c954:	3332      	adds	r3, #50	@ 0x32
 800c956:	4a08      	ldr	r2, [pc, #32]	@ (800c978 <UART_SetConfig+0x2d4>)
 800c958:	fba2 2303 	umull	r2, r3, r2, r3
 800c95c:	095b      	lsrs	r3, r3, #5
 800c95e:	f003 0207 	and.w	r2, r3, #7
 800c962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4422      	add	r2, r4
 800c96a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c96c:	e106      	b.n	800cb7c <UART_SetConfig+0x4d8>
 800c96e:	bf00      	nop
 800c970:	40011000 	.word	0x40011000
 800c974:	40011400 	.word	0x40011400
 800c978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c97c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c980:	2200      	movs	r2, #0
 800c982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c986:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c98a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c98e:	4642      	mov	r2, r8
 800c990:	464b      	mov	r3, r9
 800c992:	1891      	adds	r1, r2, r2
 800c994:	6239      	str	r1, [r7, #32]
 800c996:	415b      	adcs	r3, r3
 800c998:	627b      	str	r3, [r7, #36]	@ 0x24
 800c99a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c99e:	4641      	mov	r1, r8
 800c9a0:	1854      	adds	r4, r2, r1
 800c9a2:	4649      	mov	r1, r9
 800c9a4:	eb43 0501 	adc.w	r5, r3, r1
 800c9a8:	f04f 0200 	mov.w	r2, #0
 800c9ac:	f04f 0300 	mov.w	r3, #0
 800c9b0:	00eb      	lsls	r3, r5, #3
 800c9b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c9b6:	00e2      	lsls	r2, r4, #3
 800c9b8:	4614      	mov	r4, r2
 800c9ba:	461d      	mov	r5, r3
 800c9bc:	4643      	mov	r3, r8
 800c9be:	18e3      	adds	r3, r4, r3
 800c9c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c9c4:	464b      	mov	r3, r9
 800c9c6:	eb45 0303 	adc.w	r3, r5, r3
 800c9ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c9da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c9de:	f04f 0200 	mov.w	r2, #0
 800c9e2:	f04f 0300 	mov.w	r3, #0
 800c9e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	008b      	lsls	r3, r1, #2
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	008a      	lsls	r2, r1, #2
 800c9f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c9fc:	f7f4 f944 	bl	8000c88 <__aeabi_uldivmod>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	4b60      	ldr	r3, [pc, #384]	@ (800cb88 <UART_SetConfig+0x4e4>)
 800ca06:	fba3 2302 	umull	r2, r3, r3, r2
 800ca0a:	095b      	lsrs	r3, r3, #5
 800ca0c:	011c      	lsls	r4, r3, #4
 800ca0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca12:	2200      	movs	r2, #0
 800ca14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ca18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ca1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ca20:	4642      	mov	r2, r8
 800ca22:	464b      	mov	r3, r9
 800ca24:	1891      	adds	r1, r2, r2
 800ca26:	61b9      	str	r1, [r7, #24]
 800ca28:	415b      	adcs	r3, r3
 800ca2a:	61fb      	str	r3, [r7, #28]
 800ca2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ca30:	4641      	mov	r1, r8
 800ca32:	1851      	adds	r1, r2, r1
 800ca34:	6139      	str	r1, [r7, #16]
 800ca36:	4649      	mov	r1, r9
 800ca38:	414b      	adcs	r3, r1
 800ca3a:	617b      	str	r3, [r7, #20]
 800ca3c:	f04f 0200 	mov.w	r2, #0
 800ca40:	f04f 0300 	mov.w	r3, #0
 800ca44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ca48:	4659      	mov	r1, fp
 800ca4a:	00cb      	lsls	r3, r1, #3
 800ca4c:	4651      	mov	r1, sl
 800ca4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca52:	4651      	mov	r1, sl
 800ca54:	00ca      	lsls	r2, r1, #3
 800ca56:	4610      	mov	r0, r2
 800ca58:	4619      	mov	r1, r3
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	4642      	mov	r2, r8
 800ca5e:	189b      	adds	r3, r3, r2
 800ca60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ca64:	464b      	mov	r3, r9
 800ca66:	460a      	mov	r2, r1
 800ca68:	eb42 0303 	adc.w	r3, r2, r3
 800ca6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ca70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ca7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ca7c:	f04f 0200 	mov.w	r2, #0
 800ca80:	f04f 0300 	mov.w	r3, #0
 800ca84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ca88:	4649      	mov	r1, r9
 800ca8a:	008b      	lsls	r3, r1, #2
 800ca8c:	4641      	mov	r1, r8
 800ca8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca92:	4641      	mov	r1, r8
 800ca94:	008a      	lsls	r2, r1, #2
 800ca96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ca9a:	f7f4 f8f5 	bl	8000c88 <__aeabi_uldivmod>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4611      	mov	r1, r2
 800caa4:	4b38      	ldr	r3, [pc, #224]	@ (800cb88 <UART_SetConfig+0x4e4>)
 800caa6:	fba3 2301 	umull	r2, r3, r3, r1
 800caaa:	095b      	lsrs	r3, r3, #5
 800caac:	2264      	movs	r2, #100	@ 0x64
 800caae:	fb02 f303 	mul.w	r3, r2, r3
 800cab2:	1acb      	subs	r3, r1, r3
 800cab4:	011b      	lsls	r3, r3, #4
 800cab6:	3332      	adds	r3, #50	@ 0x32
 800cab8:	4a33      	ldr	r2, [pc, #204]	@ (800cb88 <UART_SetConfig+0x4e4>)
 800caba:	fba2 2303 	umull	r2, r3, r2, r3
 800cabe:	095b      	lsrs	r3, r3, #5
 800cac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cac4:	441c      	add	r4, r3
 800cac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800caca:	2200      	movs	r2, #0
 800cacc:	673b      	str	r3, [r7, #112]	@ 0x70
 800cace:	677a      	str	r2, [r7, #116]	@ 0x74
 800cad0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800cad4:	4642      	mov	r2, r8
 800cad6:	464b      	mov	r3, r9
 800cad8:	1891      	adds	r1, r2, r2
 800cada:	60b9      	str	r1, [r7, #8]
 800cadc:	415b      	adcs	r3, r3
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cae4:	4641      	mov	r1, r8
 800cae6:	1851      	adds	r1, r2, r1
 800cae8:	6039      	str	r1, [r7, #0]
 800caea:	4649      	mov	r1, r9
 800caec:	414b      	adcs	r3, r1
 800caee:	607b      	str	r3, [r7, #4]
 800caf0:	f04f 0200 	mov.w	r2, #0
 800caf4:	f04f 0300 	mov.w	r3, #0
 800caf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cafc:	4659      	mov	r1, fp
 800cafe:	00cb      	lsls	r3, r1, #3
 800cb00:	4651      	mov	r1, sl
 800cb02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb06:	4651      	mov	r1, sl
 800cb08:	00ca      	lsls	r2, r1, #3
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	4603      	mov	r3, r0
 800cb10:	4642      	mov	r2, r8
 800cb12:	189b      	adds	r3, r3, r2
 800cb14:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb16:	464b      	mov	r3, r9
 800cb18:	460a      	mov	r2, r1
 800cb1a:	eb42 0303 	adc.w	r3, r2, r3
 800cb1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cb20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	663b      	str	r3, [r7, #96]	@ 0x60
 800cb2a:	667a      	str	r2, [r7, #100]	@ 0x64
 800cb2c:	f04f 0200 	mov.w	r2, #0
 800cb30:	f04f 0300 	mov.w	r3, #0
 800cb34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800cb38:	4649      	mov	r1, r9
 800cb3a:	008b      	lsls	r3, r1, #2
 800cb3c:	4641      	mov	r1, r8
 800cb3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb42:	4641      	mov	r1, r8
 800cb44:	008a      	lsls	r2, r1, #2
 800cb46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800cb4a:	f7f4 f89d 	bl	8000c88 <__aeabi_uldivmod>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	4b0d      	ldr	r3, [pc, #52]	@ (800cb88 <UART_SetConfig+0x4e4>)
 800cb54:	fba3 1302 	umull	r1, r3, r3, r2
 800cb58:	095b      	lsrs	r3, r3, #5
 800cb5a:	2164      	movs	r1, #100	@ 0x64
 800cb5c:	fb01 f303 	mul.w	r3, r1, r3
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	011b      	lsls	r3, r3, #4
 800cb64:	3332      	adds	r3, #50	@ 0x32
 800cb66:	4a08      	ldr	r2, [pc, #32]	@ (800cb88 <UART_SetConfig+0x4e4>)
 800cb68:	fba2 2303 	umull	r2, r3, r2, r3
 800cb6c:	095b      	lsrs	r3, r3, #5
 800cb6e:	f003 020f 	and.w	r2, r3, #15
 800cb72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4422      	add	r2, r4
 800cb7a:	609a      	str	r2, [r3, #8]
}
 800cb7c:	bf00      	nop
 800cb7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800cb82:	46bd      	mov	sp, r7
 800cb84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb88:	51eb851f 	.word	0x51eb851f

0800cb8c <__NVIC_SetPriority>:
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	4603      	mov	r3, r0
 800cb94:	6039      	str	r1, [r7, #0]
 800cb96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	db0a      	blt.n	800cbb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	490c      	ldr	r1, [pc, #48]	@ (800cbd8 <__NVIC_SetPriority+0x4c>)
 800cba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbaa:	0112      	lsls	r2, r2, #4
 800cbac:	b2d2      	uxtb	r2, r2
 800cbae:	440b      	add	r3, r1
 800cbb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cbb4:	e00a      	b.n	800cbcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	4908      	ldr	r1, [pc, #32]	@ (800cbdc <__NVIC_SetPriority+0x50>)
 800cbbc:	79fb      	ldrb	r3, [r7, #7]
 800cbbe:	f003 030f 	and.w	r3, r3, #15
 800cbc2:	3b04      	subs	r3, #4
 800cbc4:	0112      	lsls	r2, r2, #4
 800cbc6:	b2d2      	uxtb	r2, r2
 800cbc8:	440b      	add	r3, r1
 800cbca:	761a      	strb	r2, [r3, #24]
}
 800cbcc:	bf00      	nop
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr
 800cbd8:	e000e100 	.word	0xe000e100
 800cbdc:	e000ed00 	.word	0xe000ed00

0800cbe0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	f06f 0004 	mvn.w	r0, #4
 800cbea:	f7ff ffcf 	bl	800cb8c <__NVIC_SetPriority>
#endif
}
 800cbee:	bf00      	nop
 800cbf0:	bd80      	pop	{r7, pc}
	...

0800cbf4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cbf4:	b480      	push	{r7}
 800cbf6:	b083      	sub	sp, #12
 800cbf8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbfa:	f3ef 8305 	mrs	r3, IPSR
 800cbfe:	603b      	str	r3, [r7, #0]
  return(result);
 800cc00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d003      	beq.n	800cc0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cc06:	f06f 0305 	mvn.w	r3, #5
 800cc0a:	607b      	str	r3, [r7, #4]
 800cc0c:	e00c      	b.n	800cc28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc0e:	4b0a      	ldr	r3, [pc, #40]	@ (800cc38 <osKernelInitialize+0x44>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d105      	bne.n	800cc22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc16:	4b08      	ldr	r3, [pc, #32]	@ (800cc38 <osKernelInitialize+0x44>)
 800cc18:	2201      	movs	r2, #1
 800cc1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	607b      	str	r3, [r7, #4]
 800cc20:	e002      	b.n	800cc28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cc22:	f04f 33ff 	mov.w	r3, #4294967295
 800cc26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cc28:	687b      	ldr	r3, [r7, #4]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	370c      	adds	r7, #12
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop
 800cc38:	2000080c 	.word	0x2000080c

0800cc3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc42:	f3ef 8305 	mrs	r3, IPSR
 800cc46:	603b      	str	r3, [r7, #0]
  return(result);
 800cc48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d003      	beq.n	800cc56 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cc4e:	f06f 0305 	mvn.w	r3, #5
 800cc52:	607b      	str	r3, [r7, #4]
 800cc54:	e010      	b.n	800cc78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cc56:	4b0b      	ldr	r3, [pc, #44]	@ (800cc84 <osKernelStart+0x48>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d109      	bne.n	800cc72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cc5e:	f7ff ffbf 	bl	800cbe0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cc62:	4b08      	ldr	r3, [pc, #32]	@ (800cc84 <osKernelStart+0x48>)
 800cc64:	2202      	movs	r2, #2
 800cc66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cc68:	f001 f87a 	bl	800dd60 <vTaskStartScheduler>
      stat = osOK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	607b      	str	r3, [r7, #4]
 800cc70:	e002      	b.n	800cc78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cc72:	f04f 33ff 	mov.w	r3, #4294967295
 800cc76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cc78:	687b      	ldr	r3, [r7, #4]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	2000080c 	.word	0x2000080c

0800cc88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08e      	sub	sp, #56	@ 0x38
 800cc8c:	af04      	add	r7, sp, #16
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc98:	f3ef 8305 	mrs	r3, IPSR
 800cc9c:	617b      	str	r3, [r7, #20]
  return(result);
 800cc9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d17e      	bne.n	800cda2 <osThreadNew+0x11a>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d07b      	beq.n	800cda2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ccaa:	2380      	movs	r3, #128	@ 0x80
 800ccac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ccae:	2318      	movs	r3, #24
 800ccb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ccb6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d045      	beq.n	800cd4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d002      	beq.n	800ccd0 <osThreadNew+0x48>
        name = attr->name;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	699b      	ldr	r3, [r3, #24]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d002      	beq.n	800ccde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	699b      	ldr	r3, [r3, #24]
 800ccdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d008      	beq.n	800ccf6 <osThreadNew+0x6e>
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	2b38      	cmp	r3, #56	@ 0x38
 800cce8:	d805      	bhi.n	800ccf6 <osThreadNew+0x6e>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	f003 0301 	and.w	r3, r3, #1
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d001      	beq.n	800ccfa <osThreadNew+0x72>
        return (NULL);
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	e054      	b.n	800cda4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	695b      	ldr	r3, [r3, #20]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d003      	beq.n	800cd0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	695b      	ldr	r3, [r3, #20]
 800cd06:	089b      	lsrs	r3, r3, #2
 800cd08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	689b      	ldr	r3, [r3, #8]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00e      	beq.n	800cd30 <osThreadNew+0xa8>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	2b5b      	cmp	r3, #91	@ 0x5b
 800cd18:	d90a      	bls.n	800cd30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d006      	beq.n	800cd30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	695b      	ldr	r3, [r3, #20]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d002      	beq.n	800cd30 <osThreadNew+0xa8>
        mem = 1;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	61bb      	str	r3, [r7, #24]
 800cd2e:	e010      	b.n	800cd52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10c      	bne.n	800cd52 <osThreadNew+0xca>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d108      	bne.n	800cd52 <osThreadNew+0xca>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	691b      	ldr	r3, [r3, #16]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d104      	bne.n	800cd52 <osThreadNew+0xca>
          mem = 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	61bb      	str	r3, [r7, #24]
 800cd4c:	e001      	b.n	800cd52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d110      	bne.n	800cd7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd60:	9202      	str	r2, [sp, #8]
 800cd62:	9301      	str	r3, [sp, #4]
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	6a3a      	ldr	r2, [r7, #32]
 800cd6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f000 fe1a 	bl	800d9a8 <xTaskCreateStatic>
 800cd74:	4603      	mov	r3, r0
 800cd76:	613b      	str	r3, [r7, #16]
 800cd78:	e013      	b.n	800cda2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d110      	bne.n	800cda2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd80:	6a3b      	ldr	r3, [r7, #32]
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	f107 0310 	add.w	r3, r7, #16
 800cd88:	9301      	str	r3, [sp, #4]
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	9300      	str	r3, [sp, #0]
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd92:	68f8      	ldr	r0, [r7, #12]
 800cd94:	f000 fe68 	bl	800da68 <xTaskCreate>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d001      	beq.n	800cda2 <osThreadNew+0x11a>
            hTask = NULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cda2:	693b      	ldr	r3, [r7, #16]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3728      	adds	r7, #40	@ 0x28
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdb4:	f3ef 8305 	mrs	r3, IPSR
 800cdb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800cdba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d003      	beq.n	800cdc8 <osDelay+0x1c>
    stat = osErrorISR;
 800cdc0:	f06f 0305 	mvn.w	r3, #5
 800cdc4:	60fb      	str	r3, [r7, #12]
 800cdc6:	e007      	b.n	800cdd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d002      	beq.n	800cdd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 ff8e 	bl	800dcf4 <vTaskDelay>
    }
  }

  return (stat);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
	...

0800cde4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cde4:	b480      	push	{r7}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	4a07      	ldr	r2, [pc, #28]	@ (800ce10 <vApplicationGetIdleTaskMemory+0x2c>)
 800cdf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	4a06      	ldr	r2, [pc, #24]	@ (800ce14 <vApplicationGetIdleTaskMemory+0x30>)
 800cdfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2280      	movs	r2, #128	@ 0x80
 800ce00:	601a      	str	r2, [r3, #0]
}
 800ce02:	bf00      	nop
 800ce04:	3714      	adds	r7, #20
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
 800ce0e:	bf00      	nop
 800ce10:	20000810 	.word	0x20000810
 800ce14:	2000086c 	.word	0x2000086c

0800ce18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	4a07      	ldr	r2, [pc, #28]	@ (800ce44 <vApplicationGetTimerTaskMemory+0x2c>)
 800ce28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	4a06      	ldr	r2, [pc, #24]	@ (800ce48 <vApplicationGetTimerTaskMemory+0x30>)
 800ce2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ce36:	601a      	str	r2, [r3, #0]
}
 800ce38:	bf00      	nop
 800ce3a:	3714      	adds	r7, #20
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr
 800ce44:	20000a6c 	.word	0x20000a6c
 800ce48:	20000ac8 	.word	0x20000ac8

0800ce4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f103 0208 	add.w	r2, r3, #8
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f04f 32ff 	mov.w	r2, #4294967295
 800ce64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f103 0208 	add.w	r2, r3, #8
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f103 0208 	add.w	r2, r3, #8
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ce80:	bf00      	nop
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ce9a:	bf00      	nop
 800ce9c:	370c      	adds	r7, #12
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr

0800cea6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cea6:	b480      	push	{r7}
 800cea8:	b085      	sub	sp, #20
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
 800ceae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	689a      	ldr	r2, [r3, #8]
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	683a      	ldr	r2, [r7, #0]
 800ceca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	683a      	ldr	r2, [r7, #0]
 800ced0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	1c5a      	adds	r2, r3, #1
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	601a      	str	r2, [r3, #0]
}
 800cee2:	bf00      	nop
 800cee4:	3714      	adds	r7, #20
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ceee:	b480      	push	{r7}
 800cef0:	b085      	sub	sp, #20
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf04:	d103      	bne.n	800cf0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	691b      	ldr	r3, [r3, #16]
 800cf0a:	60fb      	str	r3, [r7, #12]
 800cf0c:	e00c      	b.n	800cf28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	3308      	adds	r3, #8
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	e002      	b.n	800cf1c <vListInsert+0x2e>
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	60fb      	str	r3, [r7, #12]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	68ba      	ldr	r2, [r7, #8]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d2f6      	bcs.n	800cf16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	683a      	ldr	r2, [r7, #0]
 800cf36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	68fa      	ldr	r2, [r7, #12]
 800cf3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	601a      	str	r2, [r3, #0]
}
 800cf54:	bf00      	nop
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf60:	b480      	push	{r7}
 800cf62:	b085      	sub	sp, #20
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	691b      	ldr	r3, [r3, #16]
 800cf6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	6892      	ldr	r2, [r2, #8]
 800cf76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	6852      	ldr	r2, [r2, #4]
 800cf80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d103      	bne.n	800cf94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	689a      	ldr	r2, [r3, #8]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	1e5a      	subs	r2, r3, #1
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10b      	bne.n	800cfe0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cfc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfcc:	f383 8811 	msr	BASEPRI, r3
 800cfd0:	f3bf 8f6f 	isb	sy
 800cfd4:	f3bf 8f4f 	dsb	sy
 800cfd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cfda:	bf00      	nop
 800cfdc:	bf00      	nop
 800cfde:	e7fd      	b.n	800cfdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cfe0:	f002 f87a 	bl	800f0d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfec:	68f9      	ldr	r1, [r7, #12]
 800cfee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cff0:	fb01 f303 	mul.w	r3, r1, r3
 800cff4:	441a      	add	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2200      	movs	r2, #0
 800cffe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d010:	3b01      	subs	r3, #1
 800d012:	68f9      	ldr	r1, [r7, #12]
 800d014:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d016:	fb01 f303 	mul.w	r3, r1, r3
 800d01a:	441a      	add	r2, r3
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	22ff      	movs	r2, #255	@ 0xff
 800d024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	22ff      	movs	r2, #255	@ 0xff
 800d02c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d114      	bne.n	800d060 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	691b      	ldr	r3, [r3, #16]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d01a      	beq.n	800d074 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3310      	adds	r3, #16
 800d042:	4618      	mov	r0, r3
 800d044:	f001 f91a 	bl	800e27c <xTaskRemoveFromEventList>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d012      	beq.n	800d074 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d04e:	4b0d      	ldr	r3, [pc, #52]	@ (800d084 <xQueueGenericReset+0xd0>)
 800d050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	e009      	b.n	800d074 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	3310      	adds	r3, #16
 800d064:	4618      	mov	r0, r3
 800d066:	f7ff fef1 	bl	800ce4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	3324      	adds	r3, #36	@ 0x24
 800d06e:	4618      	mov	r0, r3
 800d070:	f7ff feec 	bl	800ce4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d074:	f002 f862 	bl	800f13c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d078:	2301      	movs	r3, #1
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	e000ed04 	.word	0xe000ed04

0800d088 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08e      	sub	sp, #56	@ 0x38
 800d08c:	af02      	add	r7, sp, #8
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
 800d094:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10b      	bne.n	800d0b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d0ae:	bf00      	nop
 800d0b0:	bf00      	nop
 800d0b2:	e7fd      	b.n	800d0b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d10b      	bne.n	800d0d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d0cc:	bf00      	nop
 800d0ce:	bf00      	nop
 800d0d0:	e7fd      	b.n	800d0ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d002      	beq.n	800d0de <xQueueGenericCreateStatic+0x56>
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d001      	beq.n	800d0e2 <xQueueGenericCreateStatic+0x5a>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e000      	b.n	800d0e4 <xQueueGenericCreateStatic+0x5c>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10b      	bne.n	800d100 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	623b      	str	r3, [r7, #32]
}
 800d0fa:	bf00      	nop
 800d0fc:	bf00      	nop
 800d0fe:	e7fd      	b.n	800d0fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d102      	bne.n	800d10c <xQueueGenericCreateStatic+0x84>
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d101      	bne.n	800d110 <xQueueGenericCreateStatic+0x88>
 800d10c:	2301      	movs	r3, #1
 800d10e:	e000      	b.n	800d112 <xQueueGenericCreateStatic+0x8a>
 800d110:	2300      	movs	r3, #0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10b      	bne.n	800d12e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	61fb      	str	r3, [r7, #28]
}
 800d128:	bf00      	nop
 800d12a:	bf00      	nop
 800d12c:	e7fd      	b.n	800d12a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d12e:	2350      	movs	r3, #80	@ 0x50
 800d130:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	2b50      	cmp	r3, #80	@ 0x50
 800d136:	d00b      	beq.n	800d150 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d13c:	f383 8811 	msr	BASEPRI, r3
 800d140:	f3bf 8f6f 	isb	sy
 800d144:	f3bf 8f4f 	dsb	sy
 800d148:	61bb      	str	r3, [r7, #24]
}
 800d14a:	bf00      	nop
 800d14c:	bf00      	nop
 800d14e:	e7fd      	b.n	800d14c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d150:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00d      	beq.n	800d178 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d164:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16a:	9300      	str	r3, [sp, #0]
 800d16c:	4613      	mov	r3, r2
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	68b9      	ldr	r1, [r7, #8]
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f000 f805 	bl	800d182 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3730      	adds	r7, #48	@ 0x30
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b084      	sub	sp, #16
 800d186:	af00      	add	r7, sp, #0
 800d188:	60f8      	str	r0, [r7, #12]
 800d18a:	60b9      	str	r1, [r7, #8]
 800d18c:	607a      	str	r2, [r7, #4]
 800d18e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d103      	bne.n	800d19e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	69ba      	ldr	r2, [r7, #24]
 800d19a:	601a      	str	r2, [r3, #0]
 800d19c:	e002      	b.n	800d1a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	68fa      	ldr	r2, [r7, #12]
 800d1a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d1b0:	2101      	movs	r1, #1
 800d1b2:	69b8      	ldr	r0, [r7, #24]
 800d1b4:	f7ff fefe 	bl	800cfb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	78fa      	ldrb	r2, [r7, #3]
 800d1bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d1c0:	bf00      	nop
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08e      	sub	sp, #56	@ 0x38
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
 800d1d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d10b      	bne.n	800d1fc <xQueueGenericSend+0x34>
	__asm volatile
 800d1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e8:	f383 8811 	msr	BASEPRI, r3
 800d1ec:	f3bf 8f6f 	isb	sy
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d1f6:	bf00      	nop
 800d1f8:	bf00      	nop
 800d1fa:	e7fd      	b.n	800d1f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d103      	bne.n	800d20a <xQueueGenericSend+0x42>
 800d202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d206:	2b00      	cmp	r3, #0
 800d208:	d101      	bne.n	800d20e <xQueueGenericSend+0x46>
 800d20a:	2301      	movs	r3, #1
 800d20c:	e000      	b.n	800d210 <xQueueGenericSend+0x48>
 800d20e:	2300      	movs	r3, #0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10b      	bne.n	800d22c <xQueueGenericSend+0x64>
	__asm volatile
 800d214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d218:	f383 8811 	msr	BASEPRI, r3
 800d21c:	f3bf 8f6f 	isb	sy
 800d220:	f3bf 8f4f 	dsb	sy
 800d224:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d226:	bf00      	nop
 800d228:	bf00      	nop
 800d22a:	e7fd      	b.n	800d228 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d103      	bne.n	800d23a <xQueueGenericSend+0x72>
 800d232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d236:	2b01      	cmp	r3, #1
 800d238:	d101      	bne.n	800d23e <xQueueGenericSend+0x76>
 800d23a:	2301      	movs	r3, #1
 800d23c:	e000      	b.n	800d240 <xQueueGenericSend+0x78>
 800d23e:	2300      	movs	r3, #0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d10b      	bne.n	800d25c <xQueueGenericSend+0x94>
	__asm volatile
 800d244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d248:	f383 8811 	msr	BASEPRI, r3
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	623b      	str	r3, [r7, #32]
}
 800d256:	bf00      	nop
 800d258:	bf00      	nop
 800d25a:	e7fd      	b.n	800d258 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d25c:	f001 f9ce 	bl	800e5fc <xTaskGetSchedulerState>
 800d260:	4603      	mov	r3, r0
 800d262:	2b00      	cmp	r3, #0
 800d264:	d102      	bne.n	800d26c <xQueueGenericSend+0xa4>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d101      	bne.n	800d270 <xQueueGenericSend+0xa8>
 800d26c:	2301      	movs	r3, #1
 800d26e:	e000      	b.n	800d272 <xQueueGenericSend+0xaa>
 800d270:	2300      	movs	r3, #0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d10b      	bne.n	800d28e <xQueueGenericSend+0xc6>
	__asm volatile
 800d276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	61fb      	str	r3, [r7, #28]
}
 800d288:	bf00      	nop
 800d28a:	bf00      	nop
 800d28c:	e7fd      	b.n	800d28a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d28e:	f001 ff23 	bl	800f0d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d302      	bcc.n	800d2a4 <xQueueGenericSend+0xdc>
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d129      	bne.n	800d2f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d2a4:	683a      	ldr	r2, [r7, #0]
 800d2a6:	68b9      	ldr	r1, [r7, #8]
 800d2a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2aa:	f000 fa0f 	bl	800d6cc <prvCopyDataToQueue>
 800d2ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d010      	beq.n	800d2da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ba:	3324      	adds	r3, #36	@ 0x24
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f000 ffdd 	bl	800e27c <xTaskRemoveFromEventList>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d013      	beq.n	800d2f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d2c8:	4b3f      	ldr	r3, [pc, #252]	@ (800d3c8 <xQueueGenericSend+0x200>)
 800d2ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2ce:	601a      	str	r2, [r3, #0]
 800d2d0:	f3bf 8f4f 	dsb	sy
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	e00a      	b.n	800d2f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d007      	beq.n	800d2f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d2e0:	4b39      	ldr	r3, [pc, #228]	@ (800d3c8 <xQueueGenericSend+0x200>)
 800d2e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2e6:	601a      	str	r2, [r3, #0]
 800d2e8:	f3bf 8f4f 	dsb	sy
 800d2ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d2f0:	f001 ff24 	bl	800f13c <vPortExitCritical>
				return pdPASS;
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	e063      	b.n	800d3c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d103      	bne.n	800d306 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d2fe:	f001 ff1d 	bl	800f13c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d302:	2300      	movs	r3, #0
 800d304:	e05c      	b.n	800d3c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d106      	bne.n	800d31a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d30c:	f107 0314 	add.w	r3, r7, #20
 800d310:	4618      	mov	r0, r3
 800d312:	f001 f817 	bl	800e344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d316:	2301      	movs	r3, #1
 800d318:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d31a:	f001 ff0f 	bl	800f13c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d31e:	f000 fd87 	bl	800de30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d322:	f001 fed9 	bl	800f0d8 <vPortEnterCritical>
 800d326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d32c:	b25b      	sxtb	r3, r3
 800d32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d332:	d103      	bne.n	800d33c <xQueueGenericSend+0x174>
 800d334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d336:	2200      	movs	r2, #0
 800d338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d342:	b25b      	sxtb	r3, r3
 800d344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d348:	d103      	bne.n	800d352 <xQueueGenericSend+0x18a>
 800d34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34c:	2200      	movs	r2, #0
 800d34e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d352:	f001 fef3 	bl	800f13c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d356:	1d3a      	adds	r2, r7, #4
 800d358:	f107 0314 	add.w	r3, r7, #20
 800d35c:	4611      	mov	r1, r2
 800d35e:	4618      	mov	r0, r3
 800d360:	f001 f806 	bl	800e370 <xTaskCheckForTimeOut>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d124      	bne.n	800d3b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d36a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d36c:	f000 faa6 	bl	800d8bc <prvIsQueueFull>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d018      	beq.n	800d3a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d378:	3310      	adds	r3, #16
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	4611      	mov	r1, r2
 800d37e:	4618      	mov	r0, r3
 800d380:	f000 ff2a 	bl	800e1d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d386:	f000 fa31 	bl	800d7ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d38a:	f000 fd5f 	bl	800de4c <xTaskResumeAll>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	f47f af7c 	bne.w	800d28e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d396:	4b0c      	ldr	r3, [pc, #48]	@ (800d3c8 <xQueueGenericSend+0x200>)
 800d398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	f3bf 8f6f 	isb	sy
 800d3a6:	e772      	b.n	800d28e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d3a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3aa:	f000 fa1f 	bl	800d7ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3ae:	f000 fd4d 	bl	800de4c <xTaskResumeAll>
 800d3b2:	e76c      	b.n	800d28e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d3b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3b6:	f000 fa19 	bl	800d7ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3ba:	f000 fd47 	bl	800de4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d3be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3738      	adds	r7, #56	@ 0x38
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	e000ed04 	.word	0xe000ed04

0800d3cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b090      	sub	sp, #64	@ 0x40
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]
 800d3d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10b      	bne.n	800d3fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d3f6:	bf00      	nop
 800d3f8:	bf00      	nop
 800d3fa:	e7fd      	b.n	800d3f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d103      	bne.n	800d40a <xQueueGenericSendFromISR+0x3e>
 800d402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d406:	2b00      	cmp	r3, #0
 800d408:	d101      	bne.n	800d40e <xQueueGenericSendFromISR+0x42>
 800d40a:	2301      	movs	r3, #1
 800d40c:	e000      	b.n	800d410 <xQueueGenericSendFromISR+0x44>
 800d40e:	2300      	movs	r3, #0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10b      	bne.n	800d42c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d418:	f383 8811 	msr	BASEPRI, r3
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	f3bf 8f4f 	dsb	sy
 800d424:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d426:	bf00      	nop
 800d428:	bf00      	nop
 800d42a:	e7fd      	b.n	800d428 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	2b02      	cmp	r3, #2
 800d430:	d103      	bne.n	800d43a <xQueueGenericSendFromISR+0x6e>
 800d432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d436:	2b01      	cmp	r3, #1
 800d438:	d101      	bne.n	800d43e <xQueueGenericSendFromISR+0x72>
 800d43a:	2301      	movs	r3, #1
 800d43c:	e000      	b.n	800d440 <xQueueGenericSendFromISR+0x74>
 800d43e:	2300      	movs	r3, #0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d10b      	bne.n	800d45c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	623b      	str	r3, [r7, #32]
}
 800d456:	bf00      	nop
 800d458:	bf00      	nop
 800d45a:	e7fd      	b.n	800d458 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d45c:	f001 ff1c 	bl	800f298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d460:	f3ef 8211 	mrs	r2, BASEPRI
 800d464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d468:	f383 8811 	msr	BASEPRI, r3
 800d46c:	f3bf 8f6f 	isb	sy
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	61fa      	str	r2, [r7, #28]
 800d476:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d478:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d47a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d484:	429a      	cmp	r2, r3
 800d486:	d302      	bcc.n	800d48e <xQueueGenericSendFromISR+0xc2>
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	d12f      	bne.n	800d4ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d490:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d494:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d49e:	683a      	ldr	r2, [r7, #0]
 800d4a0:	68b9      	ldr	r1, [r7, #8]
 800d4a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d4a4:	f000 f912 	bl	800d6cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d4a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4b0:	d112      	bne.n	800d4d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d016      	beq.n	800d4e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4bc:	3324      	adds	r3, #36	@ 0x24
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 fedc 	bl	800e27c <xTaskRemoveFromEventList>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00e      	beq.n	800d4e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00b      	beq.n	800d4e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	601a      	str	r2, [r3, #0]
 800d4d6:	e007      	b.n	800d4e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d4d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d4dc:	3301      	adds	r3, #1
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	b25a      	sxtb	r2, r3
 800d4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d4ec:	e001      	b.n	800d4f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d4fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d500:	4618      	mov	r0, r3
 800d502:	3740      	adds	r7, #64	@ 0x40
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b08c      	sub	sp, #48	@ 0x30
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d514:	2300      	movs	r3, #0
 800d516:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d10b      	bne.n	800d53a <xQueueReceive+0x32>
	__asm volatile
 800d522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d526:	f383 8811 	msr	BASEPRI, r3
 800d52a:	f3bf 8f6f 	isb	sy
 800d52e:	f3bf 8f4f 	dsb	sy
 800d532:	623b      	str	r3, [r7, #32]
}
 800d534:	bf00      	nop
 800d536:	bf00      	nop
 800d538:	e7fd      	b.n	800d536 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d103      	bne.n	800d548 <xQueueReceive+0x40>
 800d540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d544:	2b00      	cmp	r3, #0
 800d546:	d101      	bne.n	800d54c <xQueueReceive+0x44>
 800d548:	2301      	movs	r3, #1
 800d54a:	e000      	b.n	800d54e <xQueueReceive+0x46>
 800d54c:	2300      	movs	r3, #0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d10b      	bne.n	800d56a <xQueueReceive+0x62>
	__asm volatile
 800d552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	61fb      	str	r3, [r7, #28]
}
 800d564:	bf00      	nop
 800d566:	bf00      	nop
 800d568:	e7fd      	b.n	800d566 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d56a:	f001 f847 	bl	800e5fc <xTaskGetSchedulerState>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d102      	bne.n	800d57a <xQueueReceive+0x72>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d101      	bne.n	800d57e <xQueueReceive+0x76>
 800d57a:	2301      	movs	r3, #1
 800d57c:	e000      	b.n	800d580 <xQueueReceive+0x78>
 800d57e:	2300      	movs	r3, #0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10b      	bne.n	800d59c <xQueueReceive+0x94>
	__asm volatile
 800d584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	61bb      	str	r3, [r7, #24]
}
 800d596:	bf00      	nop
 800d598:	bf00      	nop
 800d59a:	e7fd      	b.n	800d598 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d59c:	f001 fd9c 	bl	800f0d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d01f      	beq.n	800d5ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d5ac:	68b9      	ldr	r1, [r7, #8]
 800d5ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5b0:	f000 f8f6 	bl	800d7a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b6:	1e5a      	subs	r2, r3, #1
 800d5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00f      	beq.n	800d5e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c6:	3310      	adds	r3, #16
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f000 fe57 	bl	800e27c <xTaskRemoveFromEventList>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d007      	beq.n	800d5e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d5d4:	4b3c      	ldr	r3, [pc, #240]	@ (800d6c8 <xQueueReceive+0x1c0>)
 800d5d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5da:	601a      	str	r2, [r3, #0]
 800d5dc:	f3bf 8f4f 	dsb	sy
 800d5e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d5e4:	f001 fdaa 	bl	800f13c <vPortExitCritical>
				return pdPASS;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e069      	b.n	800d6c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d103      	bne.n	800d5fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5f2:	f001 fda3 	bl	800f13c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	e062      	b.n	800d6c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d106      	bne.n	800d60e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d600:	f107 0310 	add.w	r3, r7, #16
 800d604:	4618      	mov	r0, r3
 800d606:	f000 fe9d 	bl	800e344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d60a:	2301      	movs	r3, #1
 800d60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d60e:	f001 fd95 	bl	800f13c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d612:	f000 fc0d 	bl	800de30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d616:	f001 fd5f 	bl	800f0d8 <vPortEnterCritical>
 800d61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d61c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d620:	b25b      	sxtb	r3, r3
 800d622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d626:	d103      	bne.n	800d630 <xQueueReceive+0x128>
 800d628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d62a:	2200      	movs	r2, #0
 800d62c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d632:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d636:	b25b      	sxtb	r3, r3
 800d638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d63c:	d103      	bne.n	800d646 <xQueueReceive+0x13e>
 800d63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d640:	2200      	movs	r2, #0
 800d642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d646:	f001 fd79 	bl	800f13c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d64a:	1d3a      	adds	r2, r7, #4
 800d64c:	f107 0310 	add.w	r3, r7, #16
 800d650:	4611      	mov	r1, r2
 800d652:	4618      	mov	r0, r3
 800d654:	f000 fe8c 	bl	800e370 <xTaskCheckForTimeOut>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d123      	bne.n	800d6a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d65e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d660:	f000 f916 	bl	800d890 <prvIsQueueEmpty>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d017      	beq.n	800d69a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d66c:	3324      	adds	r3, #36	@ 0x24
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	4611      	mov	r1, r2
 800d672:	4618      	mov	r0, r3
 800d674:	f000 fdb0 	bl	800e1d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d67a:	f000 f8b7 	bl	800d7ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d67e:	f000 fbe5 	bl	800de4c <xTaskResumeAll>
 800d682:	4603      	mov	r3, r0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d189      	bne.n	800d59c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d688:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c8 <xQueueReceive+0x1c0>)
 800d68a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d68e:	601a      	str	r2, [r3, #0]
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	f3bf 8f6f 	isb	sy
 800d698:	e780      	b.n	800d59c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d69a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d69c:	f000 f8a6 	bl	800d7ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6a0:	f000 fbd4 	bl	800de4c <xTaskResumeAll>
 800d6a4:	e77a      	b.n	800d59c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d6a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6a8:	f000 f8a0 	bl	800d7ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6ac:	f000 fbce 	bl	800de4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6b2:	f000 f8ed 	bl	800d890 <prvIsQueueEmpty>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f43f af6f 	beq.w	800d59c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d6be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3730      	adds	r7, #48	@ 0x30
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	e000ed04 	.word	0xe000ed04

0800d6cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b086      	sub	sp, #24
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10d      	bne.n	800d706 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d14d      	bne.n	800d78e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f000 ff9e 	bl	800e638 <xTaskPriorityDisinherit>
 800d6fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2200      	movs	r2, #0
 800d702:	609a      	str	r2, [r3, #8]
 800d704:	e043      	b.n	800d78e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d119      	bne.n	800d740 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6858      	ldr	r0, [r3, #4]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d714:	461a      	mov	r2, r3
 800d716:	68b9      	ldr	r1, [r7, #8]
 800d718:	f003 f909 	bl	801092e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	685a      	ldr	r2, [r3, #4]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d724:	441a      	add	r2, r3
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	685a      	ldr	r2, [r3, #4]
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	429a      	cmp	r2, r3
 800d734:	d32b      	bcc.n	800d78e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	605a      	str	r2, [r3, #4]
 800d73e:	e026      	b.n	800d78e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	68d8      	ldr	r0, [r3, #12]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d748:	461a      	mov	r2, r3
 800d74a:	68b9      	ldr	r1, [r7, #8]
 800d74c:	f003 f8ef 	bl	801092e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	68da      	ldr	r2, [r3, #12]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d758:	425b      	negs	r3, r3
 800d75a:	441a      	add	r2, r3
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	68da      	ldr	r2, [r3, #12]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d207      	bcs.n	800d77c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	689a      	ldr	r2, [r3, #8]
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d774:	425b      	negs	r3, r3
 800d776:	441a      	add	r2, r3
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b02      	cmp	r3, #2
 800d780:	d105      	bne.n	800d78e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d002      	beq.n	800d78e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	3b01      	subs	r3, #1
 800d78c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	1c5a      	adds	r2, r3, #1
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d796:	697b      	ldr	r3, [r7, #20]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3718      	adds	r7, #24
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d018      	beq.n	800d7e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	68da      	ldr	r2, [r3, #12]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7ba:	441a      	add	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	68da      	ldr	r2, [r3, #12]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d303      	bcc.n	800d7d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	68d9      	ldr	r1, [r3, #12]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7dc:	461a      	mov	r2, r3
 800d7de:	6838      	ldr	r0, [r7, #0]
 800d7e0:	f003 f8a5 	bl	801092e <memcpy>
	}
}
 800d7e4:	bf00      	nop
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d7f4:	f001 fc70 	bl	800f0d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d800:	e011      	b.n	800d826 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d806:	2b00      	cmp	r3, #0
 800d808:	d012      	beq.n	800d830 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	3324      	adds	r3, #36	@ 0x24
 800d80e:	4618      	mov	r0, r3
 800d810:	f000 fd34 	bl	800e27c <xTaskRemoveFromEventList>
 800d814:	4603      	mov	r3, r0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d81a:	f000 fe0d 	bl	800e438 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d81e:	7bfb      	ldrb	r3, [r7, #15]
 800d820:	3b01      	subs	r3, #1
 800d822:	b2db      	uxtb	r3, r3
 800d824:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	dce9      	bgt.n	800d802 <prvUnlockQueue+0x16>
 800d82e:	e000      	b.n	800d832 <prvUnlockQueue+0x46>
					break;
 800d830:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	22ff      	movs	r2, #255	@ 0xff
 800d836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d83a:	f001 fc7f 	bl	800f13c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d83e:	f001 fc4b 	bl	800f0d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d848:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d84a:	e011      	b.n	800d870 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d012      	beq.n	800d87a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	3310      	adds	r3, #16
 800d858:	4618      	mov	r0, r3
 800d85a:	f000 fd0f 	bl	800e27c <xTaskRemoveFromEventList>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d864:	f000 fde8 	bl	800e438 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d868:	7bbb      	ldrb	r3, [r7, #14]
 800d86a:	3b01      	subs	r3, #1
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d874:	2b00      	cmp	r3, #0
 800d876:	dce9      	bgt.n	800d84c <prvUnlockQueue+0x60>
 800d878:	e000      	b.n	800d87c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d87a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	22ff      	movs	r2, #255	@ 0xff
 800d880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d884:	f001 fc5a 	bl	800f13c <vPortExitCritical>
}
 800d888:	bf00      	nop
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d898:	f001 fc1e 	bl	800f0d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d102      	bne.n	800d8aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	60fb      	str	r3, [r7, #12]
 800d8a8:	e001      	b.n	800d8ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8ae:	f001 fc45 	bl	800f13c <vPortExitCritical>

	return xReturn;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8c4:	f001 fc08 	bl	800f0d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d102      	bne.n	800d8da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	60fb      	str	r3, [r7, #12]
 800d8d8:	e001      	b.n	800d8de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8de:	f001 fc2d 	bl	800f13c <vPortExitCritical>

	return xReturn;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	60fb      	str	r3, [r7, #12]
 800d8fa:	e014      	b.n	800d926 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d8fc:	4a0f      	ldr	r2, [pc, #60]	@ (800d93c <vQueueAddToRegistry+0x50>)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10b      	bne.n	800d920 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d908:	490c      	ldr	r1, [pc, #48]	@ (800d93c <vQueueAddToRegistry+0x50>)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	683a      	ldr	r2, [r7, #0]
 800d90e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d912:	4a0a      	ldr	r2, [pc, #40]	@ (800d93c <vQueueAddToRegistry+0x50>)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	00db      	lsls	r3, r3, #3
 800d918:	4413      	add	r3, r2
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d91e:	e006      	b.n	800d92e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	3301      	adds	r3, #1
 800d924:	60fb      	str	r3, [r7, #12]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2b07      	cmp	r3, #7
 800d92a:	d9e7      	bls.n	800d8fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d92c:	bf00      	nop
 800d92e:	bf00      	nop
 800d930:	3714      	adds	r7, #20
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	20000ec8 	.word	0x20000ec8

0800d940 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d950:	f001 fbc2 	bl	800f0d8 <vPortEnterCritical>
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d95a:	b25b      	sxtb	r3, r3
 800d95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d960:	d103      	bne.n	800d96a <vQueueWaitForMessageRestricted+0x2a>
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	2200      	movs	r2, #0
 800d966:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d970:	b25b      	sxtb	r3, r3
 800d972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d976:	d103      	bne.n	800d980 <vQueueWaitForMessageRestricted+0x40>
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d980:	f001 fbdc 	bl	800f13c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d106      	bne.n	800d99a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	3324      	adds	r3, #36	@ 0x24
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	68b9      	ldr	r1, [r7, #8]
 800d994:	4618      	mov	r0, r3
 800d996:	f000 fc45 	bl	800e224 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d99a:	6978      	ldr	r0, [r7, #20]
 800d99c:	f7ff ff26 	bl	800d7ec <prvUnlockQueue>
	}
 800d9a0:	bf00      	nop
 800d9a2:	3718      	adds	r7, #24
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08e      	sub	sp, #56	@ 0x38
 800d9ac:	af04      	add	r7, sp, #16
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
 800d9b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10b      	bne.n	800d9d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c0:	f383 8811 	msr	BASEPRI, r3
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	f3bf 8f4f 	dsb	sy
 800d9cc:	623b      	str	r3, [r7, #32]
}
 800d9ce:	bf00      	nop
 800d9d0:	bf00      	nop
 800d9d2:	e7fd      	b.n	800d9d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d10b      	bne.n	800d9f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9de:	f383 8811 	msr	BASEPRI, r3
 800d9e2:	f3bf 8f6f 	isb	sy
 800d9e6:	f3bf 8f4f 	dsb	sy
 800d9ea:	61fb      	str	r3, [r7, #28]
}
 800d9ec:	bf00      	nop
 800d9ee:	bf00      	nop
 800d9f0:	e7fd      	b.n	800d9ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d9f2:	235c      	movs	r3, #92	@ 0x5c
 800d9f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d9fa:	d00b      	beq.n	800da14 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da00:	f383 8811 	msr	BASEPRI, r3
 800da04:	f3bf 8f6f 	isb	sy
 800da08:	f3bf 8f4f 	dsb	sy
 800da0c:	61bb      	str	r3, [r7, #24]
}
 800da0e:	bf00      	nop
 800da10:	bf00      	nop
 800da12:	e7fd      	b.n	800da10 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800da14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800da16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d01e      	beq.n	800da5a <xTaskCreateStatic+0xb2>
 800da1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d01b      	beq.n	800da5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800da26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800da2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da2e:	2202      	movs	r2, #2
 800da30:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800da34:	2300      	movs	r3, #0
 800da36:	9303      	str	r3, [sp, #12]
 800da38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da3a:	9302      	str	r3, [sp, #8]
 800da3c:	f107 0314 	add.w	r3, r7, #20
 800da40:	9301      	str	r3, [sp, #4]
 800da42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	68b9      	ldr	r1, [r7, #8]
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f000 f850 	bl	800daf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800da54:	f000 f8de 	bl	800dc14 <prvAddNewTaskToReadyList>
 800da58:	e001      	b.n	800da5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800da5a:	2300      	movs	r3, #0
 800da5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da5e:	697b      	ldr	r3, [r7, #20]
	}
 800da60:	4618      	mov	r0, r3
 800da62:	3728      	adds	r7, #40	@ 0x28
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b08c      	sub	sp, #48	@ 0x30
 800da6c:	af04      	add	r7, sp, #16
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	603b      	str	r3, [r7, #0]
 800da74:	4613      	mov	r3, r2
 800da76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da78:	88fb      	ldrh	r3, [r7, #6]
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	4618      	mov	r0, r3
 800da7e:	f001 fc4d 	bl	800f31c <pvPortMalloc>
 800da82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d00e      	beq.n	800daa8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da8a:	205c      	movs	r0, #92	@ 0x5c
 800da8c:	f001 fc46 	bl	800f31c <pvPortMalloc>
 800da90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d003      	beq.n	800daa0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	697a      	ldr	r2, [r7, #20]
 800da9c:	631a      	str	r2, [r3, #48]	@ 0x30
 800da9e:	e005      	b.n	800daac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800daa0:	6978      	ldr	r0, [r7, #20]
 800daa2:	f001 fd09 	bl	800f4b8 <vPortFree>
 800daa6:	e001      	b.n	800daac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800daa8:	2300      	movs	r3, #0
 800daaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d017      	beq.n	800dae2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800daba:	88fa      	ldrh	r2, [r7, #6]
 800dabc:	2300      	movs	r3, #0
 800dabe:	9303      	str	r3, [sp, #12]
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	9302      	str	r3, [sp, #8]
 800dac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac6:	9301      	str	r3, [sp, #4]
 800dac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	68b9      	ldr	r1, [r7, #8]
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f000 f80e 	bl	800daf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dad6:	69f8      	ldr	r0, [r7, #28]
 800dad8:	f000 f89c 	bl	800dc14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dadc:	2301      	movs	r3, #1
 800dade:	61bb      	str	r3, [r7, #24]
 800dae0:	e002      	b.n	800dae8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dae2:	f04f 33ff 	mov.w	r3, #4294967295
 800dae6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dae8:	69bb      	ldr	r3, [r7, #24]
	}
 800daea:	4618      	mov	r0, r3
 800daec:	3720      	adds	r7, #32
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b088      	sub	sp, #32
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	60f8      	str	r0, [r7, #12]
 800dafa:	60b9      	str	r1, [r7, #8]
 800dafc:	607a      	str	r2, [r7, #4]
 800dafe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800db00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db02:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	461a      	mov	r2, r3
 800db0a:	21a5      	movs	r1, #165	@ 0xa5
 800db0c:	f002 fe8f 	bl	801082e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db1a:	3b01      	subs	r3, #1
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	f023 0307 	bic.w	r3, r3, #7
 800db28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	f003 0307 	and.w	r3, r3, #7
 800db30:	2b00      	cmp	r3, #0
 800db32:	d00b      	beq.n	800db4c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800db34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	617b      	str	r3, [r7, #20]
}
 800db46:	bf00      	nop
 800db48:	bf00      	nop
 800db4a:	e7fd      	b.n	800db48 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d01f      	beq.n	800db92 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db52:	2300      	movs	r3, #0
 800db54:	61fb      	str	r3, [r7, #28]
 800db56:	e012      	b.n	800db7e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db58:	68ba      	ldr	r2, [r7, #8]
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	4413      	add	r3, r2
 800db5e:	7819      	ldrb	r1, [r3, #0]
 800db60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	4413      	add	r3, r2
 800db66:	3334      	adds	r3, #52	@ 0x34
 800db68:	460a      	mov	r2, r1
 800db6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	4413      	add	r3, r2
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d006      	beq.n	800db86 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	3301      	adds	r3, #1
 800db7c:	61fb      	str	r3, [r7, #28]
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	2b0f      	cmp	r3, #15
 800db82:	d9e9      	bls.n	800db58 <prvInitialiseNewTask+0x66>
 800db84:	e000      	b.n	800db88 <prvInitialiseNewTask+0x96>
			{
				break;
 800db86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8a:	2200      	movs	r2, #0
 800db8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800db90:	e003      	b.n	800db9a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db94:	2200      	movs	r2, #0
 800db96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9c:	2b37      	cmp	r3, #55	@ 0x37
 800db9e:	d901      	bls.n	800dba4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dba0:	2337      	movs	r3, #55	@ 0x37
 800dba2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dba8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dbae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb8:	3304      	adds	r3, #4
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7ff f966 	bl	800ce8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dbc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc2:	3318      	adds	r3, #24
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff f961 	bl	800ce8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbde:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dbee:	683a      	ldr	r2, [r7, #0]
 800dbf0:	68f9      	ldr	r1, [r7, #12]
 800dbf2:	69b8      	ldr	r0, [r7, #24]
 800dbf4:	f001 f93e 	bl	800ee74 <pxPortInitialiseStack>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d002      	beq.n	800dc0a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc0a:	bf00      	nop
 800dc0c:	3720      	adds	r7, #32
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
	...

0800dc14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc1c:	f001 fa5c 	bl	800f0d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc20:	4b2d      	ldr	r3, [pc, #180]	@ (800dcd8 <prvAddNewTaskToReadyList+0xc4>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3301      	adds	r3, #1
 800dc26:	4a2c      	ldr	r2, [pc, #176]	@ (800dcd8 <prvAddNewTaskToReadyList+0xc4>)
 800dc28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc2a:	4b2c      	ldr	r3, [pc, #176]	@ (800dcdc <prvAddNewTaskToReadyList+0xc8>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d109      	bne.n	800dc46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc32:	4a2a      	ldr	r2, [pc, #168]	@ (800dcdc <prvAddNewTaskToReadyList+0xc8>)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc38:	4b27      	ldr	r3, [pc, #156]	@ (800dcd8 <prvAddNewTaskToReadyList+0xc4>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d110      	bne.n	800dc62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc40:	f000 fc1e 	bl	800e480 <prvInitialiseTaskLists>
 800dc44:	e00d      	b.n	800dc62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc46:	4b26      	ldr	r3, [pc, #152]	@ (800dce0 <prvAddNewTaskToReadyList+0xcc>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d109      	bne.n	800dc62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc4e:	4b23      	ldr	r3, [pc, #140]	@ (800dcdc <prvAddNewTaskToReadyList+0xc8>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d802      	bhi.n	800dc62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc5c:	4a1f      	ldr	r2, [pc, #124]	@ (800dcdc <prvAddNewTaskToReadyList+0xc8>)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc62:	4b20      	ldr	r3, [pc, #128]	@ (800dce4 <prvAddNewTaskToReadyList+0xd0>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	3301      	adds	r3, #1
 800dc68:	4a1e      	ldr	r2, [pc, #120]	@ (800dce4 <prvAddNewTaskToReadyList+0xd0>)
 800dc6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc6c:	4b1d      	ldr	r3, [pc, #116]	@ (800dce4 <prvAddNewTaskToReadyList+0xd0>)
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc78:	4b1b      	ldr	r3, [pc, #108]	@ (800dce8 <prvAddNewTaskToReadyList+0xd4>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d903      	bls.n	800dc88 <prvAddNewTaskToReadyList+0x74>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc84:	4a18      	ldr	r2, [pc, #96]	@ (800dce8 <prvAddNewTaskToReadyList+0xd4>)
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	4413      	add	r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	4a15      	ldr	r2, [pc, #84]	@ (800dcec <prvAddNewTaskToReadyList+0xd8>)
 800dc96:	441a      	add	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	3304      	adds	r3, #4
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	4610      	mov	r0, r2
 800dca0:	f7ff f901 	bl	800cea6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dca4:	f001 fa4a 	bl	800f13c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dca8:	4b0d      	ldr	r3, [pc, #52]	@ (800dce0 <prvAddNewTaskToReadyList+0xcc>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00e      	beq.n	800dcce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dcb0:	4b0a      	ldr	r3, [pc, #40]	@ (800dcdc <prvAddNewTaskToReadyList+0xc8>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d207      	bcs.n	800dcce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dcbe:	4b0c      	ldr	r3, [pc, #48]	@ (800dcf0 <prvAddNewTaskToReadyList+0xdc>)
 800dcc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcce:	bf00      	nop
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	200013dc 	.word	0x200013dc
 800dcdc:	20000f08 	.word	0x20000f08
 800dce0:	200013e8 	.word	0x200013e8
 800dce4:	200013f8 	.word	0x200013f8
 800dce8:	200013e4 	.word	0x200013e4
 800dcec:	20000f0c 	.word	0x20000f0c
 800dcf0:	e000ed04 	.word	0xe000ed04

0800dcf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d018      	beq.n	800dd38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dd06:	4b14      	ldr	r3, [pc, #80]	@ (800dd58 <vTaskDelay+0x64>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d00b      	beq.n	800dd26 <vTaskDelay+0x32>
	__asm volatile
 800dd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	60bb      	str	r3, [r7, #8]
}
 800dd20:	bf00      	nop
 800dd22:	bf00      	nop
 800dd24:	e7fd      	b.n	800dd22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dd26:	f000 f883 	bl	800de30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 fcf3 	bl	800e718 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd32:	f000 f88b 	bl	800de4c <xTaskResumeAll>
 800dd36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d107      	bne.n	800dd4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dd3e:	4b07      	ldr	r3, [pc, #28]	@ (800dd5c <vTaskDelay+0x68>)
 800dd40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd44:	601a      	str	r2, [r3, #0]
 800dd46:	f3bf 8f4f 	dsb	sy
 800dd4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd4e:	bf00      	nop
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	20001404 	.word	0x20001404
 800dd5c:	e000ed04 	.word	0xe000ed04

0800dd60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08a      	sub	sp, #40	@ 0x28
 800dd64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd6e:	463a      	mov	r2, r7
 800dd70:	1d39      	adds	r1, r7, #4
 800dd72:	f107 0308 	add.w	r3, r7, #8
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7ff f834 	bl	800cde4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd7c:	6839      	ldr	r1, [r7, #0]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	68ba      	ldr	r2, [r7, #8]
 800dd82:	9202      	str	r2, [sp, #8]
 800dd84:	9301      	str	r3, [sp, #4]
 800dd86:	2300      	movs	r3, #0
 800dd88:	9300      	str	r3, [sp, #0]
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	460a      	mov	r2, r1
 800dd8e:	4922      	ldr	r1, [pc, #136]	@ (800de18 <vTaskStartScheduler+0xb8>)
 800dd90:	4822      	ldr	r0, [pc, #136]	@ (800de1c <vTaskStartScheduler+0xbc>)
 800dd92:	f7ff fe09 	bl	800d9a8 <xTaskCreateStatic>
 800dd96:	4603      	mov	r3, r0
 800dd98:	4a21      	ldr	r2, [pc, #132]	@ (800de20 <vTaskStartScheduler+0xc0>)
 800dd9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd9c:	4b20      	ldr	r3, [pc, #128]	@ (800de20 <vTaskStartScheduler+0xc0>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d002      	beq.n	800ddaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dda4:	2301      	movs	r3, #1
 800dda6:	617b      	str	r3, [r7, #20]
 800dda8:	e001      	b.n	800ddae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d102      	bne.n	800ddba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ddb4:	f000 fd04 	bl	800e7c0 <xTimerCreateTimerTask>
 800ddb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d116      	bne.n	800ddee <vTaskStartScheduler+0x8e>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	613b      	str	r3, [r7, #16]
}
 800ddd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ddd4:	4b13      	ldr	r3, [pc, #76]	@ (800de24 <vTaskStartScheduler+0xc4>)
 800ddd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dddc:	4b12      	ldr	r3, [pc, #72]	@ (800de28 <vTaskStartScheduler+0xc8>)
 800ddde:	2201      	movs	r2, #1
 800dde0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dde2:	4b12      	ldr	r3, [pc, #72]	@ (800de2c <vTaskStartScheduler+0xcc>)
 800dde4:	2200      	movs	r2, #0
 800dde6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dde8:	f001 f8d2 	bl	800ef90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ddec:	e00f      	b.n	800de0e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf4:	d10b      	bne.n	800de0e <vTaskStartScheduler+0xae>
	__asm volatile
 800ddf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddfa:	f383 8811 	msr	BASEPRI, r3
 800ddfe:	f3bf 8f6f 	isb	sy
 800de02:	f3bf 8f4f 	dsb	sy
 800de06:	60fb      	str	r3, [r7, #12]
}
 800de08:	bf00      	nop
 800de0a:	bf00      	nop
 800de0c:	e7fd      	b.n	800de0a <vTaskStartScheduler+0xaa>
}
 800de0e:	bf00      	nop
 800de10:	3718      	adds	r7, #24
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	080139ec 	.word	0x080139ec
 800de1c:	0800e451 	.word	0x0800e451
 800de20:	20001400 	.word	0x20001400
 800de24:	200013fc 	.word	0x200013fc
 800de28:	200013e8 	.word	0x200013e8
 800de2c:	200013e0 	.word	0x200013e0

0800de30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de30:	b480      	push	{r7}
 800de32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de34:	4b04      	ldr	r3, [pc, #16]	@ (800de48 <vTaskSuspendAll+0x18>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	3301      	adds	r3, #1
 800de3a:	4a03      	ldr	r2, [pc, #12]	@ (800de48 <vTaskSuspendAll+0x18>)
 800de3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de3e:	bf00      	nop
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr
 800de48:	20001404 	.word	0x20001404

0800de4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de52:	2300      	movs	r3, #0
 800de54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de56:	2300      	movs	r3, #0
 800de58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de5a:	4b42      	ldr	r3, [pc, #264]	@ (800df64 <xTaskResumeAll+0x118>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d10b      	bne.n	800de7a <xTaskResumeAll+0x2e>
	__asm volatile
 800de62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	603b      	str	r3, [r7, #0]
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop
 800de78:	e7fd      	b.n	800de76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de7a:	f001 f92d 	bl	800f0d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de7e:	4b39      	ldr	r3, [pc, #228]	@ (800df64 <xTaskResumeAll+0x118>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	3b01      	subs	r3, #1
 800de84:	4a37      	ldr	r2, [pc, #220]	@ (800df64 <xTaskResumeAll+0x118>)
 800de86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de88:	4b36      	ldr	r3, [pc, #216]	@ (800df64 <xTaskResumeAll+0x118>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d162      	bne.n	800df56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de90:	4b35      	ldr	r3, [pc, #212]	@ (800df68 <xTaskResumeAll+0x11c>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d05e      	beq.n	800df56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de98:	e02f      	b.n	800defa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de9a:	4b34      	ldr	r3, [pc, #208]	@ (800df6c <xTaskResumeAll+0x120>)
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	3318      	adds	r3, #24
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff f85a 	bl	800cf60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	3304      	adds	r3, #4
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7ff f855 	bl	800cf60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deba:	4b2d      	ldr	r3, [pc, #180]	@ (800df70 <xTaskResumeAll+0x124>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d903      	bls.n	800deca <xTaskResumeAll+0x7e>
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dec6:	4a2a      	ldr	r2, [pc, #168]	@ (800df70 <xTaskResumeAll+0x124>)
 800dec8:	6013      	str	r3, [r2, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dece:	4613      	mov	r3, r2
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	4a27      	ldr	r2, [pc, #156]	@ (800df74 <xTaskResumeAll+0x128>)
 800ded8:	441a      	add	r2, r3
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	3304      	adds	r3, #4
 800dede:	4619      	mov	r1, r3
 800dee0:	4610      	mov	r0, r2
 800dee2:	f7fe ffe0 	bl	800cea6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deea:	4b23      	ldr	r3, [pc, #140]	@ (800df78 <xTaskResumeAll+0x12c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def0:	429a      	cmp	r2, r3
 800def2:	d302      	bcc.n	800defa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800def4:	4b21      	ldr	r3, [pc, #132]	@ (800df7c <xTaskResumeAll+0x130>)
 800def6:	2201      	movs	r2, #1
 800def8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800defa:	4b1c      	ldr	r3, [pc, #112]	@ (800df6c <xTaskResumeAll+0x120>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1cb      	bne.n	800de9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df08:	f000 fb58 	bl	800e5bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df0c:	4b1c      	ldr	r3, [pc, #112]	@ (800df80 <xTaskResumeAll+0x134>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d010      	beq.n	800df3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df18:	f000 f846 	bl	800dfa8 <xTaskIncrementTick>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d002      	beq.n	800df28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800df22:	4b16      	ldr	r3, [pc, #88]	@ (800df7c <xTaskResumeAll+0x130>)
 800df24:	2201      	movs	r2, #1
 800df26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	3b01      	subs	r3, #1
 800df2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1f1      	bne.n	800df18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800df34:	4b12      	ldr	r3, [pc, #72]	@ (800df80 <xTaskResumeAll+0x134>)
 800df36:	2200      	movs	r2, #0
 800df38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df3a:	4b10      	ldr	r3, [pc, #64]	@ (800df7c <xTaskResumeAll+0x130>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d009      	beq.n	800df56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df42:	2301      	movs	r3, #1
 800df44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df46:	4b0f      	ldr	r3, [pc, #60]	@ (800df84 <xTaskResumeAll+0x138>)
 800df48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df4c:	601a      	str	r2, [r3, #0]
 800df4e:	f3bf 8f4f 	dsb	sy
 800df52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df56:	f001 f8f1 	bl	800f13c <vPortExitCritical>

	return xAlreadyYielded;
 800df5a:	68bb      	ldr	r3, [r7, #8]
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3710      	adds	r7, #16
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	20001404 	.word	0x20001404
 800df68:	200013dc 	.word	0x200013dc
 800df6c:	2000139c 	.word	0x2000139c
 800df70:	200013e4 	.word	0x200013e4
 800df74:	20000f0c 	.word	0x20000f0c
 800df78:	20000f08 	.word	0x20000f08
 800df7c:	200013f0 	.word	0x200013f0
 800df80:	200013ec 	.word	0x200013ec
 800df84:	e000ed04 	.word	0xe000ed04

0800df88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df8e:	4b05      	ldr	r3, [pc, #20]	@ (800dfa4 <xTaskGetTickCount+0x1c>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df94:	687b      	ldr	r3, [r7, #4]
}
 800df96:	4618      	mov	r0, r3
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	200013e0 	.word	0x200013e0

0800dfa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfb2:	4b4f      	ldr	r3, [pc, #316]	@ (800e0f0 <xTaskIncrementTick+0x148>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f040 8090 	bne.w	800e0dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dfbc:	4b4d      	ldr	r3, [pc, #308]	@ (800e0f4 <xTaskIncrementTick+0x14c>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dfc4:	4a4b      	ldr	r2, [pc, #300]	@ (800e0f4 <xTaskIncrementTick+0x14c>)
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d121      	bne.n	800e014 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dfd0:	4b49      	ldr	r3, [pc, #292]	@ (800e0f8 <xTaskIncrementTick+0x150>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d00b      	beq.n	800dff2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800dfda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfde:	f383 8811 	msr	BASEPRI, r3
 800dfe2:	f3bf 8f6f 	isb	sy
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	603b      	str	r3, [r7, #0]
}
 800dfec:	bf00      	nop
 800dfee:	bf00      	nop
 800dff0:	e7fd      	b.n	800dfee <xTaskIncrementTick+0x46>
 800dff2:	4b41      	ldr	r3, [pc, #260]	@ (800e0f8 <xTaskIncrementTick+0x150>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	60fb      	str	r3, [r7, #12]
 800dff8:	4b40      	ldr	r3, [pc, #256]	@ (800e0fc <xTaskIncrementTick+0x154>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4a3e      	ldr	r2, [pc, #248]	@ (800e0f8 <xTaskIncrementTick+0x150>)
 800dffe:	6013      	str	r3, [r2, #0]
 800e000:	4a3e      	ldr	r2, [pc, #248]	@ (800e0fc <xTaskIncrementTick+0x154>)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	6013      	str	r3, [r2, #0]
 800e006:	4b3e      	ldr	r3, [pc, #248]	@ (800e100 <xTaskIncrementTick+0x158>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	3301      	adds	r3, #1
 800e00c:	4a3c      	ldr	r2, [pc, #240]	@ (800e100 <xTaskIncrementTick+0x158>)
 800e00e:	6013      	str	r3, [r2, #0]
 800e010:	f000 fad4 	bl	800e5bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e014:	4b3b      	ldr	r3, [pc, #236]	@ (800e104 <xTaskIncrementTick+0x15c>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	693a      	ldr	r2, [r7, #16]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d349      	bcc.n	800e0b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e01e:	4b36      	ldr	r3, [pc, #216]	@ (800e0f8 <xTaskIncrementTick+0x150>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d104      	bne.n	800e032 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e028:	4b36      	ldr	r3, [pc, #216]	@ (800e104 <xTaskIncrementTick+0x15c>)
 800e02a:	f04f 32ff 	mov.w	r2, #4294967295
 800e02e:	601a      	str	r2, [r3, #0]
					break;
 800e030:	e03f      	b.n	800e0b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e032:	4b31      	ldr	r3, [pc, #196]	@ (800e0f8 <xTaskIncrementTick+0x150>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e042:	693a      	ldr	r2, [r7, #16]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	429a      	cmp	r2, r3
 800e048:	d203      	bcs.n	800e052 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e04a:	4a2e      	ldr	r2, [pc, #184]	@ (800e104 <xTaskIncrementTick+0x15c>)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e050:	e02f      	b.n	800e0b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	3304      	adds	r3, #4
 800e056:	4618      	mov	r0, r3
 800e058:	f7fe ff82 	bl	800cf60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e060:	2b00      	cmp	r3, #0
 800e062:	d004      	beq.n	800e06e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	3318      	adds	r3, #24
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fe ff79 	bl	800cf60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e072:	4b25      	ldr	r3, [pc, #148]	@ (800e108 <xTaskIncrementTick+0x160>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	429a      	cmp	r2, r3
 800e078:	d903      	bls.n	800e082 <xTaskIncrementTick+0xda>
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e07e:	4a22      	ldr	r2, [pc, #136]	@ (800e108 <xTaskIncrementTick+0x160>)
 800e080:	6013      	str	r3, [r2, #0]
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e086:	4613      	mov	r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4413      	add	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4a1f      	ldr	r2, [pc, #124]	@ (800e10c <xTaskIncrementTick+0x164>)
 800e090:	441a      	add	r2, r3
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	3304      	adds	r3, #4
 800e096:	4619      	mov	r1, r3
 800e098:	4610      	mov	r0, r2
 800e09a:	f7fe ff04 	bl	800cea6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0a2:	4b1b      	ldr	r3, [pc, #108]	@ (800e110 <xTaskIncrementTick+0x168>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d3b8      	bcc.n	800e01e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0b0:	e7b5      	b.n	800e01e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e0b2:	4b17      	ldr	r3, [pc, #92]	@ (800e110 <xTaskIncrementTick+0x168>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0b8:	4914      	ldr	r1, [pc, #80]	@ (800e10c <xTaskIncrementTick+0x164>)
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4413      	add	r3, r2
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	440b      	add	r3, r1
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d901      	bls.n	800e0ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e0ce:	4b11      	ldr	r3, [pc, #68]	@ (800e114 <xTaskIncrementTick+0x16c>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d007      	beq.n	800e0e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	617b      	str	r3, [r7, #20]
 800e0da:	e004      	b.n	800e0e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e0dc:	4b0e      	ldr	r3, [pc, #56]	@ (800e118 <xTaskIncrementTick+0x170>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	4a0d      	ldr	r2, [pc, #52]	@ (800e118 <xTaskIncrementTick+0x170>)
 800e0e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e0e6:	697b      	ldr	r3, [r7, #20]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	20001404 	.word	0x20001404
 800e0f4:	200013e0 	.word	0x200013e0
 800e0f8:	20001394 	.word	0x20001394
 800e0fc:	20001398 	.word	0x20001398
 800e100:	200013f4 	.word	0x200013f4
 800e104:	200013fc 	.word	0x200013fc
 800e108:	200013e4 	.word	0x200013e4
 800e10c:	20000f0c 	.word	0x20000f0c
 800e110:	20000f08 	.word	0x20000f08
 800e114:	200013f0 	.word	0x200013f0
 800e118:	200013ec 	.word	0x200013ec

0800e11c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e122:	4b28      	ldr	r3, [pc, #160]	@ (800e1c4 <vTaskSwitchContext+0xa8>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d003      	beq.n	800e132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e12a:	4b27      	ldr	r3, [pc, #156]	@ (800e1c8 <vTaskSwitchContext+0xac>)
 800e12c:	2201      	movs	r2, #1
 800e12e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e130:	e042      	b.n	800e1b8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e132:	4b25      	ldr	r3, [pc, #148]	@ (800e1c8 <vTaskSwitchContext+0xac>)
 800e134:	2200      	movs	r2, #0
 800e136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e138:	4b24      	ldr	r3, [pc, #144]	@ (800e1cc <vTaskSwitchContext+0xb0>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	60fb      	str	r3, [r7, #12]
 800e13e:	e011      	b.n	800e164 <vTaskSwitchContext+0x48>
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d10b      	bne.n	800e15e <vTaskSwitchContext+0x42>
	__asm volatile
 800e146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e14a:	f383 8811 	msr	BASEPRI, r3
 800e14e:	f3bf 8f6f 	isb	sy
 800e152:	f3bf 8f4f 	dsb	sy
 800e156:	607b      	str	r3, [r7, #4]
}
 800e158:	bf00      	nop
 800e15a:	bf00      	nop
 800e15c:	e7fd      	b.n	800e15a <vTaskSwitchContext+0x3e>
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	3b01      	subs	r3, #1
 800e162:	60fb      	str	r3, [r7, #12]
 800e164:	491a      	ldr	r1, [pc, #104]	@ (800e1d0 <vTaskSwitchContext+0xb4>)
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	4613      	mov	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4413      	add	r3, r2
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	440b      	add	r3, r1
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d0e3      	beq.n	800e140 <vTaskSwitchContext+0x24>
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	4613      	mov	r3, r2
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	4413      	add	r3, r2
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	4a13      	ldr	r2, [pc, #76]	@ (800e1d0 <vTaskSwitchContext+0xb4>)
 800e184:	4413      	add	r3, r2
 800e186:	60bb      	str	r3, [r7, #8]
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	685a      	ldr	r2, [r3, #4]
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	605a      	str	r2, [r3, #4]
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	685a      	ldr	r2, [r3, #4]
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	3308      	adds	r3, #8
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d104      	bne.n	800e1a8 <vTaskSwitchContext+0x8c>
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	605a      	str	r2, [r3, #4]
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	4a09      	ldr	r2, [pc, #36]	@ (800e1d4 <vTaskSwitchContext+0xb8>)
 800e1b0:	6013      	str	r3, [r2, #0]
 800e1b2:	4a06      	ldr	r2, [pc, #24]	@ (800e1cc <vTaskSwitchContext+0xb0>)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6013      	str	r3, [r2, #0]
}
 800e1b8:	bf00      	nop
 800e1ba:	3714      	adds	r7, #20
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr
 800e1c4:	20001404 	.word	0x20001404
 800e1c8:	200013f0 	.word	0x200013f0
 800e1cc:	200013e4 	.word	0x200013e4
 800e1d0:	20000f0c 	.word	0x20000f0c
 800e1d4:	20000f08 	.word	0x20000f08

0800e1d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10b      	bne.n	800e200 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ec:	f383 8811 	msr	BASEPRI, r3
 800e1f0:	f3bf 8f6f 	isb	sy
 800e1f4:	f3bf 8f4f 	dsb	sy
 800e1f8:	60fb      	str	r3, [r7, #12]
}
 800e1fa:	bf00      	nop
 800e1fc:	bf00      	nop
 800e1fe:	e7fd      	b.n	800e1fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e200:	4b07      	ldr	r3, [pc, #28]	@ (800e220 <vTaskPlaceOnEventList+0x48>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	3318      	adds	r3, #24
 800e206:	4619      	mov	r1, r3
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7fe fe70 	bl	800ceee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e20e:	2101      	movs	r1, #1
 800e210:	6838      	ldr	r0, [r7, #0]
 800e212:	f000 fa81 	bl	800e718 <prvAddCurrentTaskToDelayedList>
}
 800e216:	bf00      	nop
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	20000f08 	.word	0x20000f08

0800e224 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e224:	b580      	push	{r7, lr}
 800e226:	b086      	sub	sp, #24
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d10b      	bne.n	800e24e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e23a:	f383 8811 	msr	BASEPRI, r3
 800e23e:	f3bf 8f6f 	isb	sy
 800e242:	f3bf 8f4f 	dsb	sy
 800e246:	617b      	str	r3, [r7, #20]
}
 800e248:	bf00      	nop
 800e24a:	bf00      	nop
 800e24c:	e7fd      	b.n	800e24a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e24e:	4b0a      	ldr	r3, [pc, #40]	@ (800e278 <vTaskPlaceOnEventListRestricted+0x54>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	3318      	adds	r3, #24
 800e254:	4619      	mov	r1, r3
 800e256:	68f8      	ldr	r0, [r7, #12]
 800e258:	f7fe fe25 	bl	800cea6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d002      	beq.n	800e268 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e262:	f04f 33ff 	mov.w	r3, #4294967295
 800e266:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e268:	6879      	ldr	r1, [r7, #4]
 800e26a:	68b8      	ldr	r0, [r7, #8]
 800e26c:	f000 fa54 	bl	800e718 <prvAddCurrentTaskToDelayedList>
	}
 800e270:	bf00      	nop
 800e272:	3718      	adds	r7, #24
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	20000f08 	.word	0x20000f08

0800e27c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b086      	sub	sp, #24
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10b      	bne.n	800e2aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	60fb      	str	r3, [r7, #12]
}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop
 800e2a8:	e7fd      	b.n	800e2a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	3318      	adds	r3, #24
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7fe fe56 	bl	800cf60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2b4:	4b1d      	ldr	r3, [pc, #116]	@ (800e32c <xTaskRemoveFromEventList+0xb0>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d11d      	bne.n	800e2f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	3304      	adds	r3, #4
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7fe fe4d 	bl	800cf60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ca:	4b19      	ldr	r3, [pc, #100]	@ (800e330 <xTaskRemoveFromEventList+0xb4>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d903      	bls.n	800e2da <xTaskRemoveFromEventList+0x5e>
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2d6:	4a16      	ldr	r2, [pc, #88]	@ (800e330 <xTaskRemoveFromEventList+0xb4>)
 800e2d8:	6013      	str	r3, [r2, #0]
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2de:	4613      	mov	r3, r2
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4413      	add	r3, r2
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	4a13      	ldr	r2, [pc, #76]	@ (800e334 <xTaskRemoveFromEventList+0xb8>)
 800e2e8:	441a      	add	r2, r3
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	4610      	mov	r0, r2
 800e2f2:	f7fe fdd8 	bl	800cea6 <vListInsertEnd>
 800e2f6:	e005      	b.n	800e304 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	3318      	adds	r3, #24
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	480e      	ldr	r0, [pc, #56]	@ (800e338 <xTaskRemoveFromEventList+0xbc>)
 800e300:	f7fe fdd1 	bl	800cea6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e308:	4b0c      	ldr	r3, [pc, #48]	@ (800e33c <xTaskRemoveFromEventList+0xc0>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e30e:	429a      	cmp	r2, r3
 800e310:	d905      	bls.n	800e31e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e312:	2301      	movs	r3, #1
 800e314:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e316:	4b0a      	ldr	r3, [pc, #40]	@ (800e340 <xTaskRemoveFromEventList+0xc4>)
 800e318:	2201      	movs	r2, #1
 800e31a:	601a      	str	r2, [r3, #0]
 800e31c:	e001      	b.n	800e322 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e31e:	2300      	movs	r3, #0
 800e320:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e322:	697b      	ldr	r3, [r7, #20]
}
 800e324:	4618      	mov	r0, r3
 800e326:	3718      	adds	r7, #24
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	20001404 	.word	0x20001404
 800e330:	200013e4 	.word	0x200013e4
 800e334:	20000f0c 	.word	0x20000f0c
 800e338:	2000139c 	.word	0x2000139c
 800e33c:	20000f08 	.word	0x20000f08
 800e340:	200013f0 	.word	0x200013f0

0800e344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e34c:	4b06      	ldr	r3, [pc, #24]	@ (800e368 <vTaskInternalSetTimeOutState+0x24>)
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e354:	4b05      	ldr	r3, [pc, #20]	@ (800e36c <vTaskInternalSetTimeOutState+0x28>)
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	605a      	str	r2, [r3, #4]
}
 800e35c:	bf00      	nop
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr
 800e368:	200013f4 	.word	0x200013f4
 800e36c:	200013e0 	.word	0x200013e0

0800e370 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b088      	sub	sp, #32
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d10b      	bne.n	800e398 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	613b      	str	r3, [r7, #16]
}
 800e392:	bf00      	nop
 800e394:	bf00      	nop
 800e396:	e7fd      	b.n	800e394 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d10b      	bne.n	800e3b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a2:	f383 8811 	msr	BASEPRI, r3
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	f3bf 8f4f 	dsb	sy
 800e3ae:	60fb      	str	r3, [r7, #12]
}
 800e3b0:	bf00      	nop
 800e3b2:	bf00      	nop
 800e3b4:	e7fd      	b.n	800e3b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e3b6:	f000 fe8f 	bl	800f0d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e3ba:	4b1d      	ldr	r3, [pc, #116]	@ (800e430 <xTaskCheckForTimeOut+0xc0>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	69ba      	ldr	r2, [r7, #24]
 800e3c6:	1ad3      	subs	r3, r2, r3
 800e3c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3d2:	d102      	bne.n	800e3da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	61fb      	str	r3, [r7, #28]
 800e3d8:	e023      	b.n	800e422 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	4b15      	ldr	r3, [pc, #84]	@ (800e434 <xTaskCheckForTimeOut+0xc4>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d007      	beq.n	800e3f6 <xTaskCheckForTimeOut+0x86>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	69ba      	ldr	r2, [r7, #24]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d302      	bcc.n	800e3f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	61fb      	str	r3, [r7, #28]
 800e3f4:	e015      	b.n	800e422 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	697a      	ldr	r2, [r7, #20]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d20b      	bcs.n	800e418 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	1ad2      	subs	r2, r2, r3
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f7ff ff99 	bl	800e344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e412:	2300      	movs	r3, #0
 800e414:	61fb      	str	r3, [r7, #28]
 800e416:	e004      	b.n	800e422 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	2200      	movs	r2, #0
 800e41c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e41e:	2301      	movs	r3, #1
 800e420:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e422:	f000 fe8b 	bl	800f13c <vPortExitCritical>

	return xReturn;
 800e426:	69fb      	ldr	r3, [r7, #28]
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3720      	adds	r7, #32
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	200013e0 	.word	0x200013e0
 800e434:	200013f4 	.word	0x200013f4

0800e438 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e438:	b480      	push	{r7}
 800e43a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e43c:	4b03      	ldr	r3, [pc, #12]	@ (800e44c <vTaskMissedYield+0x14>)
 800e43e:	2201      	movs	r2, #1
 800e440:	601a      	str	r2, [r3, #0]
}
 800e442:	bf00      	nop
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	200013f0 	.word	0x200013f0

0800e450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e458:	f000 f852 	bl	800e500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e45c:	4b06      	ldr	r3, [pc, #24]	@ (800e478 <prvIdleTask+0x28>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d9f9      	bls.n	800e458 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e464:	4b05      	ldr	r3, [pc, #20]	@ (800e47c <prvIdleTask+0x2c>)
 800e466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e46a:	601a      	str	r2, [r3, #0]
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e474:	e7f0      	b.n	800e458 <prvIdleTask+0x8>
 800e476:	bf00      	nop
 800e478:	20000f0c 	.word	0x20000f0c
 800e47c:	e000ed04 	.word	0xe000ed04

0800e480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e486:	2300      	movs	r3, #0
 800e488:	607b      	str	r3, [r7, #4]
 800e48a:	e00c      	b.n	800e4a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	4613      	mov	r3, r2
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	4413      	add	r3, r2
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	4a12      	ldr	r2, [pc, #72]	@ (800e4e0 <prvInitialiseTaskLists+0x60>)
 800e498:	4413      	add	r3, r2
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7fe fcd6 	bl	800ce4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	607b      	str	r3, [r7, #4]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2b37      	cmp	r3, #55	@ 0x37
 800e4aa:	d9ef      	bls.n	800e48c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e4ac:	480d      	ldr	r0, [pc, #52]	@ (800e4e4 <prvInitialiseTaskLists+0x64>)
 800e4ae:	f7fe fccd 	bl	800ce4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e4b2:	480d      	ldr	r0, [pc, #52]	@ (800e4e8 <prvInitialiseTaskLists+0x68>)
 800e4b4:	f7fe fcca 	bl	800ce4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e4b8:	480c      	ldr	r0, [pc, #48]	@ (800e4ec <prvInitialiseTaskLists+0x6c>)
 800e4ba:	f7fe fcc7 	bl	800ce4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e4be:	480c      	ldr	r0, [pc, #48]	@ (800e4f0 <prvInitialiseTaskLists+0x70>)
 800e4c0:	f7fe fcc4 	bl	800ce4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e4c4:	480b      	ldr	r0, [pc, #44]	@ (800e4f4 <prvInitialiseTaskLists+0x74>)
 800e4c6:	f7fe fcc1 	bl	800ce4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e4ca:	4b0b      	ldr	r3, [pc, #44]	@ (800e4f8 <prvInitialiseTaskLists+0x78>)
 800e4cc:	4a05      	ldr	r2, [pc, #20]	@ (800e4e4 <prvInitialiseTaskLists+0x64>)
 800e4ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e4d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e4fc <prvInitialiseTaskLists+0x7c>)
 800e4d2:	4a05      	ldr	r2, [pc, #20]	@ (800e4e8 <prvInitialiseTaskLists+0x68>)
 800e4d4:	601a      	str	r2, [r3, #0]
}
 800e4d6:	bf00      	nop
 800e4d8:	3708      	adds	r7, #8
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	20000f0c 	.word	0x20000f0c
 800e4e4:	2000136c 	.word	0x2000136c
 800e4e8:	20001380 	.word	0x20001380
 800e4ec:	2000139c 	.word	0x2000139c
 800e4f0:	200013b0 	.word	0x200013b0
 800e4f4:	200013c8 	.word	0x200013c8
 800e4f8:	20001394 	.word	0x20001394
 800e4fc:	20001398 	.word	0x20001398

0800e500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e506:	e019      	b.n	800e53c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e508:	f000 fde6 	bl	800f0d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e50c:	4b10      	ldr	r3, [pc, #64]	@ (800e550 <prvCheckTasksWaitingTermination+0x50>)
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	3304      	adds	r3, #4
 800e518:	4618      	mov	r0, r3
 800e51a:	f7fe fd21 	bl	800cf60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e51e:	4b0d      	ldr	r3, [pc, #52]	@ (800e554 <prvCheckTasksWaitingTermination+0x54>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	3b01      	subs	r3, #1
 800e524:	4a0b      	ldr	r2, [pc, #44]	@ (800e554 <prvCheckTasksWaitingTermination+0x54>)
 800e526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e528:	4b0b      	ldr	r3, [pc, #44]	@ (800e558 <prvCheckTasksWaitingTermination+0x58>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	3b01      	subs	r3, #1
 800e52e:	4a0a      	ldr	r2, [pc, #40]	@ (800e558 <prvCheckTasksWaitingTermination+0x58>)
 800e530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e532:	f000 fe03 	bl	800f13c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 f810 	bl	800e55c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e53c:	4b06      	ldr	r3, [pc, #24]	@ (800e558 <prvCheckTasksWaitingTermination+0x58>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1e1      	bne.n	800e508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e544:	bf00      	nop
 800e546:	bf00      	nop
 800e548:	3708      	adds	r7, #8
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	200013b0 	.word	0x200013b0
 800e554:	200013dc 	.word	0x200013dc
 800e558:	200013c4 	.word	0x200013c4

0800e55c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b084      	sub	sp, #16
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d108      	bne.n	800e580 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e572:	4618      	mov	r0, r3
 800e574:	f000 ffa0 	bl	800f4b8 <vPortFree>
				vPortFree( pxTCB );
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 ff9d 	bl	800f4b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e57e:	e019      	b.n	800e5b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e586:	2b01      	cmp	r3, #1
 800e588:	d103      	bne.n	800e592 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 ff94 	bl	800f4b8 <vPortFree>
	}
 800e590:	e010      	b.n	800e5b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e598:	2b02      	cmp	r3, #2
 800e59a:	d00b      	beq.n	800e5b4 <prvDeleteTCB+0x58>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	60fb      	str	r3, [r7, #12]
}
 800e5ae:	bf00      	nop
 800e5b0:	bf00      	nop
 800e5b2:	e7fd      	b.n	800e5b0 <prvDeleteTCB+0x54>
	}
 800e5b4:	bf00      	nop
 800e5b6:	3710      	adds	r7, #16
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5c2:	4b0c      	ldr	r3, [pc, #48]	@ (800e5f4 <prvResetNextTaskUnblockTime+0x38>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d104      	bne.n	800e5d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e5f8 <prvResetNextTaskUnblockTime+0x3c>)
 800e5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e5d4:	e008      	b.n	800e5e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5d6:	4b07      	ldr	r3, [pc, #28]	@ (800e5f4 <prvResetNextTaskUnblockTime+0x38>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	68db      	ldr	r3, [r3, #12]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	4a04      	ldr	r2, [pc, #16]	@ (800e5f8 <prvResetNextTaskUnblockTime+0x3c>)
 800e5e6:	6013      	str	r3, [r2, #0]
}
 800e5e8:	bf00      	nop
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr
 800e5f4:	20001394 	.word	0x20001394
 800e5f8:	200013fc 	.word	0x200013fc

0800e5fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e602:	4b0b      	ldr	r3, [pc, #44]	@ (800e630 <xTaskGetSchedulerState+0x34>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d102      	bne.n	800e610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e60a:	2301      	movs	r3, #1
 800e60c:	607b      	str	r3, [r7, #4]
 800e60e:	e008      	b.n	800e622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e610:	4b08      	ldr	r3, [pc, #32]	@ (800e634 <xTaskGetSchedulerState+0x38>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d102      	bne.n	800e61e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e618:	2302      	movs	r3, #2
 800e61a:	607b      	str	r3, [r7, #4]
 800e61c:	e001      	b.n	800e622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e61e:	2300      	movs	r3, #0
 800e620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e622:	687b      	ldr	r3, [r7, #4]
	}
 800e624:	4618      	mov	r0, r3
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr
 800e630:	200013e8 	.word	0x200013e8
 800e634:	20001404 	.word	0x20001404

0800e638 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e644:	2300      	movs	r3, #0
 800e646:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d058      	beq.n	800e700 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e64e:	4b2f      	ldr	r3, [pc, #188]	@ (800e70c <xTaskPriorityDisinherit+0xd4>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	693a      	ldr	r2, [r7, #16]
 800e654:	429a      	cmp	r2, r3
 800e656:	d00b      	beq.n	800e670 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e65c:	f383 8811 	msr	BASEPRI, r3
 800e660:	f3bf 8f6f 	isb	sy
 800e664:	f3bf 8f4f 	dsb	sy
 800e668:	60fb      	str	r3, [r7, #12]
}
 800e66a:	bf00      	nop
 800e66c:	bf00      	nop
 800e66e:	e7fd      	b.n	800e66c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e674:	2b00      	cmp	r3, #0
 800e676:	d10b      	bne.n	800e690 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e67c:	f383 8811 	msr	BASEPRI, r3
 800e680:	f3bf 8f6f 	isb	sy
 800e684:	f3bf 8f4f 	dsb	sy
 800e688:	60bb      	str	r3, [r7, #8]
}
 800e68a:	bf00      	nop
 800e68c:	bf00      	nop
 800e68e:	e7fd      	b.n	800e68c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e694:	1e5a      	subs	r2, r3, #1
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d02c      	beq.n	800e700 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d128      	bne.n	800e700 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	3304      	adds	r3, #4
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fe fc54 	bl	800cf60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d0:	4b0f      	ldr	r3, [pc, #60]	@ (800e710 <xTaskPriorityDisinherit+0xd8>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d903      	bls.n	800e6e0 <xTaskPriorityDisinherit+0xa8>
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6dc:	4a0c      	ldr	r2, [pc, #48]	@ (800e710 <xTaskPriorityDisinherit+0xd8>)
 800e6de:	6013      	str	r3, [r2, #0]
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	009b      	lsls	r3, r3, #2
 800e6e8:	4413      	add	r3, r2
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	4a09      	ldr	r2, [pc, #36]	@ (800e714 <xTaskPriorityDisinherit+0xdc>)
 800e6ee:	441a      	add	r2, r3
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	3304      	adds	r3, #4
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	4610      	mov	r0, r2
 800e6f8:	f7fe fbd5 	bl	800cea6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e700:	697b      	ldr	r3, [r7, #20]
	}
 800e702:	4618      	mov	r0, r3
 800e704:	3718      	adds	r7, #24
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	20000f08 	.word	0x20000f08
 800e710:	200013e4 	.word	0x200013e4
 800e714:	20000f0c 	.word	0x20000f0c

0800e718 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b084      	sub	sp, #16
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e722:	4b21      	ldr	r3, [pc, #132]	@ (800e7a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e728:	4b20      	ldr	r3, [pc, #128]	@ (800e7ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	3304      	adds	r3, #4
 800e72e:	4618      	mov	r0, r3
 800e730:	f7fe fc16 	bl	800cf60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e73a:	d10a      	bne.n	800e752 <prvAddCurrentTaskToDelayedList+0x3a>
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d007      	beq.n	800e752 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e742:	4b1a      	ldr	r3, [pc, #104]	@ (800e7ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	3304      	adds	r3, #4
 800e748:	4619      	mov	r1, r3
 800e74a:	4819      	ldr	r0, [pc, #100]	@ (800e7b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800e74c:	f7fe fbab 	bl	800cea6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e750:	e026      	b.n	800e7a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e752:	68fa      	ldr	r2, [r7, #12]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	4413      	add	r3, r2
 800e758:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e75a:	4b14      	ldr	r3, [pc, #80]	@ (800e7ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	68ba      	ldr	r2, [r7, #8]
 800e760:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	429a      	cmp	r2, r3
 800e768:	d209      	bcs.n	800e77e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e76a:	4b12      	ldr	r3, [pc, #72]	@ (800e7b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	4b0f      	ldr	r3, [pc, #60]	@ (800e7ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	3304      	adds	r3, #4
 800e774:	4619      	mov	r1, r3
 800e776:	4610      	mov	r0, r2
 800e778:	f7fe fbb9 	bl	800ceee <vListInsert>
}
 800e77c:	e010      	b.n	800e7a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e77e:	4b0e      	ldr	r3, [pc, #56]	@ (800e7b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	4b0a      	ldr	r3, [pc, #40]	@ (800e7ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	3304      	adds	r3, #4
 800e788:	4619      	mov	r1, r3
 800e78a:	4610      	mov	r0, r2
 800e78c:	f7fe fbaf 	bl	800ceee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e790:	4b0a      	ldr	r3, [pc, #40]	@ (800e7bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	68ba      	ldr	r2, [r7, #8]
 800e796:	429a      	cmp	r2, r3
 800e798:	d202      	bcs.n	800e7a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e79a:	4a08      	ldr	r2, [pc, #32]	@ (800e7bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	6013      	str	r3, [r2, #0]
}
 800e7a0:	bf00      	nop
 800e7a2:	3710      	adds	r7, #16
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	200013e0 	.word	0x200013e0
 800e7ac:	20000f08 	.word	0x20000f08
 800e7b0:	200013c8 	.word	0x200013c8
 800e7b4:	20001398 	.word	0x20001398
 800e7b8:	20001394 	.word	0x20001394
 800e7bc:	200013fc 	.word	0x200013fc

0800e7c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b08a      	sub	sp, #40	@ 0x28
 800e7c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e7ca:	f000 fb13 	bl	800edf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e7ce:	4b1d      	ldr	r3, [pc, #116]	@ (800e844 <xTimerCreateTimerTask+0x84>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d021      	beq.n	800e81a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e7de:	1d3a      	adds	r2, r7, #4
 800e7e0:	f107 0108 	add.w	r1, r7, #8
 800e7e4:	f107 030c 	add.w	r3, r7, #12
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fe fb15 	bl	800ce18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e7ee:	6879      	ldr	r1, [r7, #4]
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	9202      	str	r2, [sp, #8]
 800e7f6:	9301      	str	r3, [sp, #4]
 800e7f8:	2302      	movs	r3, #2
 800e7fa:	9300      	str	r3, [sp, #0]
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	460a      	mov	r2, r1
 800e800:	4911      	ldr	r1, [pc, #68]	@ (800e848 <xTimerCreateTimerTask+0x88>)
 800e802:	4812      	ldr	r0, [pc, #72]	@ (800e84c <xTimerCreateTimerTask+0x8c>)
 800e804:	f7ff f8d0 	bl	800d9a8 <xTaskCreateStatic>
 800e808:	4603      	mov	r3, r0
 800e80a:	4a11      	ldr	r2, [pc, #68]	@ (800e850 <xTimerCreateTimerTask+0x90>)
 800e80c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e80e:	4b10      	ldr	r3, [pc, #64]	@ (800e850 <xTimerCreateTimerTask+0x90>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d001      	beq.n	800e81a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e816:	2301      	movs	r3, #1
 800e818:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10b      	bne.n	800e838 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e824:	f383 8811 	msr	BASEPRI, r3
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	f3bf 8f4f 	dsb	sy
 800e830:	613b      	str	r3, [r7, #16]
}
 800e832:	bf00      	nop
 800e834:	bf00      	nop
 800e836:	e7fd      	b.n	800e834 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e838:	697b      	ldr	r3, [r7, #20]
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3718      	adds	r7, #24
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	20001438 	.word	0x20001438
 800e848:	080139f4 	.word	0x080139f4
 800e84c:	0800e98d 	.word	0x0800e98d
 800e850:	2000143c 	.word	0x2000143c

0800e854 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b08a      	sub	sp, #40	@ 0x28
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
 800e860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e862:	2300      	movs	r3, #0
 800e864:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d10b      	bne.n	800e884 <xTimerGenericCommand+0x30>
	__asm volatile
 800e86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	623b      	str	r3, [r7, #32]
}
 800e87e:	bf00      	nop
 800e880:	bf00      	nop
 800e882:	e7fd      	b.n	800e880 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e884:	4b19      	ldr	r3, [pc, #100]	@ (800e8ec <xTimerGenericCommand+0x98>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d02a      	beq.n	800e8e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	2b05      	cmp	r3, #5
 800e89c:	dc18      	bgt.n	800e8d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e89e:	f7ff fead 	bl	800e5fc <xTaskGetSchedulerState>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d109      	bne.n	800e8bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e8a8:	4b10      	ldr	r3, [pc, #64]	@ (800e8ec <xTimerGenericCommand+0x98>)
 800e8aa:	6818      	ldr	r0, [r3, #0]
 800e8ac:	f107 0110 	add.w	r1, r7, #16
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8b4:	f7fe fc88 	bl	800d1c8 <xQueueGenericSend>
 800e8b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800e8ba:	e012      	b.n	800e8e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e8bc:	4b0b      	ldr	r3, [pc, #44]	@ (800e8ec <xTimerGenericCommand+0x98>)
 800e8be:	6818      	ldr	r0, [r3, #0]
 800e8c0:	f107 0110 	add.w	r1, r7, #16
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f7fe fc7e 	bl	800d1c8 <xQueueGenericSend>
 800e8cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800e8ce:	e008      	b.n	800e8e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e8d0:	4b06      	ldr	r3, [pc, #24]	@ (800e8ec <xTimerGenericCommand+0x98>)
 800e8d2:	6818      	ldr	r0, [r3, #0]
 800e8d4:	f107 0110 	add.w	r1, r7, #16
 800e8d8:	2300      	movs	r3, #0
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	f7fe fd76 	bl	800d3cc <xQueueGenericSendFromISR>
 800e8e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3728      	adds	r7, #40	@ 0x28
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	20001438 	.word	0x20001438

0800e8f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b088      	sub	sp, #32
 800e8f4:	af02      	add	r7, sp, #8
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8fa:	4b23      	ldr	r3, [pc, #140]	@ (800e988 <prvProcessExpiredTimer+0x98>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	3304      	adds	r3, #4
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fe fb29 	bl	800cf60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e914:	f003 0304 	and.w	r3, r3, #4
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d023      	beq.n	800e964 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	699a      	ldr	r2, [r3, #24]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	18d1      	adds	r1, r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	683a      	ldr	r2, [r7, #0]
 800e928:	6978      	ldr	r0, [r7, #20]
 800e92a:	f000 f8d5 	bl	800ead8 <prvInsertTimerInActiveList>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d020      	beq.n	800e976 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e934:	2300      	movs	r3, #0
 800e936:	9300      	str	r3, [sp, #0]
 800e938:	2300      	movs	r3, #0
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	2100      	movs	r1, #0
 800e93e:	6978      	ldr	r0, [r7, #20]
 800e940:	f7ff ff88 	bl	800e854 <xTimerGenericCommand>
 800e944:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d114      	bne.n	800e976 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e950:	f383 8811 	msr	BASEPRI, r3
 800e954:	f3bf 8f6f 	isb	sy
 800e958:	f3bf 8f4f 	dsb	sy
 800e95c:	60fb      	str	r3, [r7, #12]
}
 800e95e:	bf00      	nop
 800e960:	bf00      	nop
 800e962:	e7fd      	b.n	800e960 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e96a:	f023 0301 	bic.w	r3, r3, #1
 800e96e:	b2da      	uxtb	r2, r3
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	6a1b      	ldr	r3, [r3, #32]
 800e97a:	6978      	ldr	r0, [r7, #20]
 800e97c:	4798      	blx	r3
}
 800e97e:	bf00      	nop
 800e980:	3718      	adds	r7, #24
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	20001430 	.word	0x20001430

0800e98c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e994:	f107 0308 	add.w	r3, r7, #8
 800e998:	4618      	mov	r0, r3
 800e99a:	f000 f859 	bl	800ea50 <prvGetNextExpireTime>
 800e99e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f000 f805 	bl	800e9b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e9aa:	f000 f8d7 	bl	800eb5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e9ae:	bf00      	nop
 800e9b0:	e7f0      	b.n	800e994 <prvTimerTask+0x8>
	...

0800e9b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e9be:	f7ff fa37 	bl	800de30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9c2:	f107 0308 	add.w	r3, r7, #8
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f000 f866 	bl	800ea98 <prvSampleTimeNow>
 800e9cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d130      	bne.n	800ea36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d10a      	bne.n	800e9f0 <prvProcessTimerOrBlockTask+0x3c>
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d806      	bhi.n	800e9f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e9e2:	f7ff fa33 	bl	800de4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e9e6:	68f9      	ldr	r1, [r7, #12]
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f7ff ff81 	bl	800e8f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e9ee:	e024      	b.n	800ea3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d008      	beq.n	800ea08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e9f6:	4b13      	ldr	r3, [pc, #76]	@ (800ea44 <prvProcessTimerOrBlockTask+0x90>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d101      	bne.n	800ea04 <prvProcessTimerOrBlockTask+0x50>
 800ea00:	2301      	movs	r3, #1
 800ea02:	e000      	b.n	800ea06 <prvProcessTimerOrBlockTask+0x52>
 800ea04:	2300      	movs	r3, #0
 800ea06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ea08:	4b0f      	ldr	r3, [pc, #60]	@ (800ea48 <prvProcessTimerOrBlockTask+0x94>)
 800ea0a:	6818      	ldr	r0, [r3, #0]
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	1ad3      	subs	r3, r2, r3
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	4619      	mov	r1, r3
 800ea16:	f7fe ff93 	bl	800d940 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ea1a:	f7ff fa17 	bl	800de4c <xTaskResumeAll>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d10a      	bne.n	800ea3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ea24:	4b09      	ldr	r3, [pc, #36]	@ (800ea4c <prvProcessTimerOrBlockTask+0x98>)
 800ea26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea2a:	601a      	str	r2, [r3, #0]
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	f3bf 8f6f 	isb	sy
}
 800ea34:	e001      	b.n	800ea3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ea36:	f7ff fa09 	bl	800de4c <xTaskResumeAll>
}
 800ea3a:	bf00      	nop
 800ea3c:	3710      	adds	r7, #16
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20001434 	.word	0x20001434
 800ea48:	20001438 	.word	0x20001438
 800ea4c:	e000ed04 	.word	0xe000ed04

0800ea50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ea50:	b480      	push	{r7}
 800ea52:	b085      	sub	sp, #20
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ea58:	4b0e      	ldr	r3, [pc, #56]	@ (800ea94 <prvGetNextExpireTime+0x44>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d101      	bne.n	800ea66 <prvGetNextExpireTime+0x16>
 800ea62:	2201      	movs	r2, #1
 800ea64:	e000      	b.n	800ea68 <prvGetNextExpireTime+0x18>
 800ea66:	2200      	movs	r2, #0
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d105      	bne.n	800ea80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea74:	4b07      	ldr	r3, [pc, #28]	@ (800ea94 <prvGetNextExpireTime+0x44>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	60fb      	str	r3, [r7, #12]
 800ea7e:	e001      	b.n	800ea84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ea80:	2300      	movs	r3, #0
 800ea82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ea84:	68fb      	ldr	r3, [r7, #12]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3714      	adds	r7, #20
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	20001430 	.word	0x20001430

0800ea98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eaa0:	f7ff fa72 	bl	800df88 <xTaskGetTickCount>
 800eaa4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eaa6:	4b0b      	ldr	r3, [pc, #44]	@ (800ead4 <prvSampleTimeNow+0x3c>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	68fa      	ldr	r2, [r7, #12]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d205      	bcs.n	800eabc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eab0:	f000 f93a 	bl	800ed28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2201      	movs	r2, #1
 800eab8:	601a      	str	r2, [r3, #0]
 800eaba:	e002      	b.n	800eac2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2200      	movs	r2, #0
 800eac0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eac2:	4a04      	ldr	r2, [pc, #16]	@ (800ead4 <prvSampleTimeNow+0x3c>)
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eac8:	68fb      	ldr	r3, [r7, #12]
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	20001440 	.word	0x20001440

0800ead8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	607a      	str	r2, [r7, #4]
 800eae4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eae6:	2300      	movs	r3, #0
 800eae8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eaf6:	68ba      	ldr	r2, [r7, #8]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d812      	bhi.n	800eb24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	1ad2      	subs	r2, r2, r3
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	699b      	ldr	r3, [r3, #24]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d302      	bcc.n	800eb12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	617b      	str	r3, [r7, #20]
 800eb10:	e01b      	b.n	800eb4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eb12:	4b10      	ldr	r3, [pc, #64]	@ (800eb54 <prvInsertTimerInActiveList+0x7c>)
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	3304      	adds	r3, #4
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	4610      	mov	r0, r2
 800eb1e:	f7fe f9e6 	bl	800ceee <vListInsert>
 800eb22:	e012      	b.n	800eb4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d206      	bcs.n	800eb3a <prvInsertTimerInActiveList+0x62>
 800eb2c:	68ba      	ldr	r2, [r7, #8]
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d302      	bcc.n	800eb3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eb34:	2301      	movs	r3, #1
 800eb36:	617b      	str	r3, [r7, #20]
 800eb38:	e007      	b.n	800eb4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb3a:	4b07      	ldr	r3, [pc, #28]	@ (800eb58 <prvInsertTimerInActiveList+0x80>)
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	3304      	adds	r3, #4
 800eb42:	4619      	mov	r1, r3
 800eb44:	4610      	mov	r0, r2
 800eb46:	f7fe f9d2 	bl	800ceee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eb4a:	697b      	ldr	r3, [r7, #20]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3718      	adds	r7, #24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	20001434 	.word	0x20001434
 800eb58:	20001430 	.word	0x20001430

0800eb5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b08e      	sub	sp, #56	@ 0x38
 800eb60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb62:	e0ce      	b.n	800ed02 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	da19      	bge.n	800eb9e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eb6a:	1d3b      	adds	r3, r7, #4
 800eb6c:	3304      	adds	r3, #4
 800eb6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d10b      	bne.n	800eb8e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800eb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb7a:	f383 8811 	msr	BASEPRI, r3
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	61fb      	str	r3, [r7, #28]
}
 800eb88:	bf00      	nop
 800eb8a:	bf00      	nop
 800eb8c:	e7fd      	b.n	800eb8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb94:	6850      	ldr	r0, [r2, #4]
 800eb96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb98:	6892      	ldr	r2, [r2, #8]
 800eb9a:	4611      	mov	r1, r2
 800eb9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f2c0 80ae 	blt.w	800ed02 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ebaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebac:	695b      	ldr	r3, [r3, #20]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d004      	beq.n	800ebbc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ebb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fe f9d2 	bl	800cf60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ebbc:	463b      	mov	r3, r7
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7ff ff6a 	bl	800ea98 <prvSampleTimeNow>
 800ebc4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2b09      	cmp	r3, #9
 800ebca:	f200 8097 	bhi.w	800ecfc <prvProcessReceivedCommands+0x1a0>
 800ebce:	a201      	add	r2, pc, #4	@ (adr r2, 800ebd4 <prvProcessReceivedCommands+0x78>)
 800ebd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd4:	0800ebfd 	.word	0x0800ebfd
 800ebd8:	0800ebfd 	.word	0x0800ebfd
 800ebdc:	0800ebfd 	.word	0x0800ebfd
 800ebe0:	0800ec73 	.word	0x0800ec73
 800ebe4:	0800ec87 	.word	0x0800ec87
 800ebe8:	0800ecd3 	.word	0x0800ecd3
 800ebec:	0800ebfd 	.word	0x0800ebfd
 800ebf0:	0800ebfd 	.word	0x0800ebfd
 800ebf4:	0800ec73 	.word	0x0800ec73
 800ebf8:	0800ec87 	.word	0x0800ec87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ebfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec02:	f043 0301 	orr.w	r3, r3, #1
 800ec06:	b2da      	uxtb	r2, r3
 800ec08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ec0e:	68ba      	ldr	r2, [r7, #8]
 800ec10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec12:	699b      	ldr	r3, [r3, #24]
 800ec14:	18d1      	adds	r1, r2, r3
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec1c:	f7ff ff5c 	bl	800ead8 <prvInsertTimerInActiveList>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d06c      	beq.n	800ed00 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec28:	6a1b      	ldr	r3, [r3, #32]
 800ec2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec34:	f003 0304 	and.w	r3, r3, #4
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d061      	beq.n	800ed00 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ec3c:	68ba      	ldr	r2, [r7, #8]
 800ec3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec40:	699b      	ldr	r3, [r3, #24]
 800ec42:	441a      	add	r2, r3
 800ec44:	2300      	movs	r3, #0
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	2300      	movs	r3, #0
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec4e:	f7ff fe01 	bl	800e854 <xTimerGenericCommand>
 800ec52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ec54:	6a3b      	ldr	r3, [r7, #32]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d152      	bne.n	800ed00 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ec5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec5e:	f383 8811 	msr	BASEPRI, r3
 800ec62:	f3bf 8f6f 	isb	sy
 800ec66:	f3bf 8f4f 	dsb	sy
 800ec6a:	61bb      	str	r3, [r7, #24]
}
 800ec6c:	bf00      	nop
 800ec6e:	bf00      	nop
 800ec70:	e7fd      	b.n	800ec6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec78:	f023 0301 	bic.w	r3, r3, #1
 800ec7c:	b2da      	uxtb	r2, r3
 800ec7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ec84:	e03d      	b.n	800ed02 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec8c:	f043 0301 	orr.w	r3, r3, #1
 800ec90:	b2da      	uxtb	r2, r3
 800ec92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ec98:	68ba      	ldr	r2, [r7, #8]
 800ec9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ec9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca0:	699b      	ldr	r3, [r3, #24]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d10b      	bne.n	800ecbe <prvProcessReceivedCommands+0x162>
	__asm volatile
 800eca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecaa:	f383 8811 	msr	BASEPRI, r3
 800ecae:	f3bf 8f6f 	isb	sy
 800ecb2:	f3bf 8f4f 	dsb	sy
 800ecb6:	617b      	str	r3, [r7, #20]
}
 800ecb8:	bf00      	nop
 800ecba:	bf00      	nop
 800ecbc:	e7fd      	b.n	800ecba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ecbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc0:	699a      	ldr	r2, [r3, #24]
 800ecc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecc4:	18d1      	adds	r1, r2, r3
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eccc:	f7ff ff04 	bl	800ead8 <prvInsertTimerInActiveList>
					break;
 800ecd0:	e017      	b.n	800ed02 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ecd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ecd8:	f003 0302 	and.w	r3, r3, #2
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d103      	bne.n	800ece8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ece0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ece2:	f000 fbe9 	bl	800f4b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ece6:	e00c      	b.n	800ed02 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ece8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ecee:	f023 0301 	bic.w	r3, r3, #1
 800ecf2:	b2da      	uxtb	r2, r3
 800ecf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ecfa:	e002      	b.n	800ed02 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ecfc:	bf00      	nop
 800ecfe:	e000      	b.n	800ed02 <prvProcessReceivedCommands+0x1a6>
					break;
 800ed00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed02:	4b08      	ldr	r3, [pc, #32]	@ (800ed24 <prvProcessReceivedCommands+0x1c8>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	1d39      	adds	r1, r7, #4
 800ed08:	2200      	movs	r2, #0
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fe fbfc 	bl	800d508 <xQueueReceive>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	f47f af26 	bne.w	800eb64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ed18:	bf00      	nop
 800ed1a:	bf00      	nop
 800ed1c:	3730      	adds	r7, #48	@ 0x30
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	20001438 	.word	0x20001438

0800ed28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b088      	sub	sp, #32
 800ed2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed2e:	e049      	b.n	800edc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ed30:	4b2e      	ldr	r3, [pc, #184]	@ (800edec <prvSwitchTimerLists+0xc4>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	68db      	ldr	r3, [r3, #12]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed3a:	4b2c      	ldr	r3, [pc, #176]	@ (800edec <prvSwitchTimerLists+0xc4>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	3304      	adds	r3, #4
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7fe f909 	bl	800cf60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	6a1b      	ldr	r3, [r3, #32]
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed5c:	f003 0304 	and.w	r3, r3, #4
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d02f      	beq.n	800edc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	699b      	ldr	r3, [r3, #24]
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ed6e:	68ba      	ldr	r2, [r7, #8]
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d90e      	bls.n	800ed94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	68ba      	ldr	r2, [r7, #8]
 800ed7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed82:	4b1a      	ldr	r3, [pc, #104]	@ (800edec <prvSwitchTimerLists+0xc4>)
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	3304      	adds	r3, #4
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	4610      	mov	r0, r2
 800ed8e:	f7fe f8ae 	bl	800ceee <vListInsert>
 800ed92:	e017      	b.n	800edc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ed94:	2300      	movs	r3, #0
 800ed96:	9300      	str	r3, [sp, #0]
 800ed98:	2300      	movs	r3, #0
 800ed9a:	693a      	ldr	r2, [r7, #16]
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	68f8      	ldr	r0, [r7, #12]
 800eda0:	f7ff fd58 	bl	800e854 <xTimerGenericCommand>
 800eda4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d10b      	bne.n	800edc4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800edac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edb0:	f383 8811 	msr	BASEPRI, r3
 800edb4:	f3bf 8f6f 	isb	sy
 800edb8:	f3bf 8f4f 	dsb	sy
 800edbc:	603b      	str	r3, [r7, #0]
}
 800edbe:	bf00      	nop
 800edc0:	bf00      	nop
 800edc2:	e7fd      	b.n	800edc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800edc4:	4b09      	ldr	r3, [pc, #36]	@ (800edec <prvSwitchTimerLists+0xc4>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d1b0      	bne.n	800ed30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800edce:	4b07      	ldr	r3, [pc, #28]	@ (800edec <prvSwitchTimerLists+0xc4>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800edd4:	4b06      	ldr	r3, [pc, #24]	@ (800edf0 <prvSwitchTimerLists+0xc8>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a04      	ldr	r2, [pc, #16]	@ (800edec <prvSwitchTimerLists+0xc4>)
 800edda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eddc:	4a04      	ldr	r2, [pc, #16]	@ (800edf0 <prvSwitchTimerLists+0xc8>)
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	6013      	str	r3, [r2, #0]
}
 800ede2:	bf00      	nop
 800ede4:	3718      	adds	r7, #24
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	20001430 	.word	0x20001430
 800edf0:	20001434 	.word	0x20001434

0800edf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800edfa:	f000 f96d 	bl	800f0d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800edfe:	4b15      	ldr	r3, [pc, #84]	@ (800ee54 <prvCheckForValidListAndQueue+0x60>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d120      	bne.n	800ee48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ee06:	4814      	ldr	r0, [pc, #80]	@ (800ee58 <prvCheckForValidListAndQueue+0x64>)
 800ee08:	f7fe f820 	bl	800ce4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ee0c:	4813      	ldr	r0, [pc, #76]	@ (800ee5c <prvCheckForValidListAndQueue+0x68>)
 800ee0e:	f7fe f81d 	bl	800ce4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ee12:	4b13      	ldr	r3, [pc, #76]	@ (800ee60 <prvCheckForValidListAndQueue+0x6c>)
 800ee14:	4a10      	ldr	r2, [pc, #64]	@ (800ee58 <prvCheckForValidListAndQueue+0x64>)
 800ee16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ee18:	4b12      	ldr	r3, [pc, #72]	@ (800ee64 <prvCheckForValidListAndQueue+0x70>)
 800ee1a:	4a10      	ldr	r2, [pc, #64]	@ (800ee5c <prvCheckForValidListAndQueue+0x68>)
 800ee1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ee1e:	2300      	movs	r3, #0
 800ee20:	9300      	str	r3, [sp, #0]
 800ee22:	4b11      	ldr	r3, [pc, #68]	@ (800ee68 <prvCheckForValidListAndQueue+0x74>)
 800ee24:	4a11      	ldr	r2, [pc, #68]	@ (800ee6c <prvCheckForValidListAndQueue+0x78>)
 800ee26:	2110      	movs	r1, #16
 800ee28:	200a      	movs	r0, #10
 800ee2a:	f7fe f92d 	bl	800d088 <xQueueGenericCreateStatic>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	4a08      	ldr	r2, [pc, #32]	@ (800ee54 <prvCheckForValidListAndQueue+0x60>)
 800ee32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ee34:	4b07      	ldr	r3, [pc, #28]	@ (800ee54 <prvCheckForValidListAndQueue+0x60>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d005      	beq.n	800ee48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ee3c:	4b05      	ldr	r3, [pc, #20]	@ (800ee54 <prvCheckForValidListAndQueue+0x60>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	490b      	ldr	r1, [pc, #44]	@ (800ee70 <prvCheckForValidListAndQueue+0x7c>)
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7fe fd52 	bl	800d8ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee48:	f000 f978 	bl	800f13c <vPortExitCritical>
}
 800ee4c:	bf00      	nop
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	20001438 	.word	0x20001438
 800ee58:	20001408 	.word	0x20001408
 800ee5c:	2000141c 	.word	0x2000141c
 800ee60:	20001430 	.word	0x20001430
 800ee64:	20001434 	.word	0x20001434
 800ee68:	200014e4 	.word	0x200014e4
 800ee6c:	20001444 	.word	0x20001444
 800ee70:	080139fc 	.word	0x080139fc

0800ee74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	60b9      	str	r1, [r7, #8]
 800ee7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	3b04      	subs	r3, #4
 800ee84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ee8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	3b04      	subs	r3, #4
 800ee92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	f023 0201 	bic.w	r2, r3, #1
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	3b04      	subs	r3, #4
 800eea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eea4:	4a0c      	ldr	r2, [pc, #48]	@ (800eed8 <pxPortInitialiseStack+0x64>)
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	3b14      	subs	r3, #20
 800eeae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	3b04      	subs	r3, #4
 800eeba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f06f 0202 	mvn.w	r2, #2
 800eec2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	3b20      	subs	r3, #32
 800eec8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eeca:	68fb      	ldr	r3, [r7, #12]
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3714      	adds	r7, #20
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr
 800eed8:	0800eedd 	.word	0x0800eedd

0800eedc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eee2:	2300      	movs	r3, #0
 800eee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eee6:	4b13      	ldr	r3, [pc, #76]	@ (800ef34 <prvTaskExitError+0x58>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeee:	d00b      	beq.n	800ef08 <prvTaskExitError+0x2c>
	__asm volatile
 800eef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eef4:	f383 8811 	msr	BASEPRI, r3
 800eef8:	f3bf 8f6f 	isb	sy
 800eefc:	f3bf 8f4f 	dsb	sy
 800ef00:	60fb      	str	r3, [r7, #12]
}
 800ef02:	bf00      	nop
 800ef04:	bf00      	nop
 800ef06:	e7fd      	b.n	800ef04 <prvTaskExitError+0x28>
	__asm volatile
 800ef08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef0c:	f383 8811 	msr	BASEPRI, r3
 800ef10:	f3bf 8f6f 	isb	sy
 800ef14:	f3bf 8f4f 	dsb	sy
 800ef18:	60bb      	str	r3, [r7, #8]
}
 800ef1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ef1c:	bf00      	nop
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d0fc      	beq.n	800ef1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ef24:	bf00      	nop
 800ef26:	bf00      	nop
 800ef28:	3714      	adds	r7, #20
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	2000016c 	.word	0x2000016c
	...

0800ef40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ef40:	4b07      	ldr	r3, [pc, #28]	@ (800ef60 <pxCurrentTCBConst2>)
 800ef42:	6819      	ldr	r1, [r3, #0]
 800ef44:	6808      	ldr	r0, [r1, #0]
 800ef46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4a:	f380 8809 	msr	PSP, r0
 800ef4e:	f3bf 8f6f 	isb	sy
 800ef52:	f04f 0000 	mov.w	r0, #0
 800ef56:	f380 8811 	msr	BASEPRI, r0
 800ef5a:	4770      	bx	lr
 800ef5c:	f3af 8000 	nop.w

0800ef60 <pxCurrentTCBConst2>:
 800ef60:	20000f08 	.word	0x20000f08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ef64:	bf00      	nop
 800ef66:	bf00      	nop

0800ef68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ef68:	4808      	ldr	r0, [pc, #32]	@ (800ef8c <prvPortStartFirstTask+0x24>)
 800ef6a:	6800      	ldr	r0, [r0, #0]
 800ef6c:	6800      	ldr	r0, [r0, #0]
 800ef6e:	f380 8808 	msr	MSP, r0
 800ef72:	f04f 0000 	mov.w	r0, #0
 800ef76:	f380 8814 	msr	CONTROL, r0
 800ef7a:	b662      	cpsie	i
 800ef7c:	b661      	cpsie	f
 800ef7e:	f3bf 8f4f 	dsb	sy
 800ef82:	f3bf 8f6f 	isb	sy
 800ef86:	df00      	svc	0
 800ef88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ef8a:	bf00      	nop
 800ef8c:	e000ed08 	.word	0xe000ed08

0800ef90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ef96:	4b47      	ldr	r3, [pc, #284]	@ (800f0b4 <xPortStartScheduler+0x124>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4a47      	ldr	r2, [pc, #284]	@ (800f0b8 <xPortStartScheduler+0x128>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d10b      	bne.n	800efb8 <xPortStartScheduler+0x28>
	__asm volatile
 800efa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa4:	f383 8811 	msr	BASEPRI, r3
 800efa8:	f3bf 8f6f 	isb	sy
 800efac:	f3bf 8f4f 	dsb	sy
 800efb0:	613b      	str	r3, [r7, #16]
}
 800efb2:	bf00      	nop
 800efb4:	bf00      	nop
 800efb6:	e7fd      	b.n	800efb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800efb8:	4b3e      	ldr	r3, [pc, #248]	@ (800f0b4 <xPortStartScheduler+0x124>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	4a3f      	ldr	r2, [pc, #252]	@ (800f0bc <xPortStartScheduler+0x12c>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d10b      	bne.n	800efda <xPortStartScheduler+0x4a>
	__asm volatile
 800efc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc6:	f383 8811 	msr	BASEPRI, r3
 800efca:	f3bf 8f6f 	isb	sy
 800efce:	f3bf 8f4f 	dsb	sy
 800efd2:	60fb      	str	r3, [r7, #12]
}
 800efd4:	bf00      	nop
 800efd6:	bf00      	nop
 800efd8:	e7fd      	b.n	800efd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800efda:	4b39      	ldr	r3, [pc, #228]	@ (800f0c0 <xPortStartScheduler+0x130>)
 800efdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	22ff      	movs	r2, #255	@ 0xff
 800efea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	b2db      	uxtb	r3, r3
 800eff2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eff4:	78fb      	ldrb	r3, [r7, #3]
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800effc:	b2da      	uxtb	r2, r3
 800effe:	4b31      	ldr	r3, [pc, #196]	@ (800f0c4 <xPortStartScheduler+0x134>)
 800f000:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f002:	4b31      	ldr	r3, [pc, #196]	@ (800f0c8 <xPortStartScheduler+0x138>)
 800f004:	2207      	movs	r2, #7
 800f006:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f008:	e009      	b.n	800f01e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f00a:	4b2f      	ldr	r3, [pc, #188]	@ (800f0c8 <xPortStartScheduler+0x138>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	3b01      	subs	r3, #1
 800f010:	4a2d      	ldr	r2, [pc, #180]	@ (800f0c8 <xPortStartScheduler+0x138>)
 800f012:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f014:	78fb      	ldrb	r3, [r7, #3]
 800f016:	b2db      	uxtb	r3, r3
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f01e:	78fb      	ldrb	r3, [r7, #3]
 800f020:	b2db      	uxtb	r3, r3
 800f022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f026:	2b80      	cmp	r3, #128	@ 0x80
 800f028:	d0ef      	beq.n	800f00a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f02a:	4b27      	ldr	r3, [pc, #156]	@ (800f0c8 <xPortStartScheduler+0x138>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f1c3 0307 	rsb	r3, r3, #7
 800f032:	2b04      	cmp	r3, #4
 800f034:	d00b      	beq.n	800f04e <xPortStartScheduler+0xbe>
	__asm volatile
 800f036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f03a:	f383 8811 	msr	BASEPRI, r3
 800f03e:	f3bf 8f6f 	isb	sy
 800f042:	f3bf 8f4f 	dsb	sy
 800f046:	60bb      	str	r3, [r7, #8]
}
 800f048:	bf00      	nop
 800f04a:	bf00      	nop
 800f04c:	e7fd      	b.n	800f04a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f04e:	4b1e      	ldr	r3, [pc, #120]	@ (800f0c8 <xPortStartScheduler+0x138>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	021b      	lsls	r3, r3, #8
 800f054:	4a1c      	ldr	r2, [pc, #112]	@ (800f0c8 <xPortStartScheduler+0x138>)
 800f056:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f058:	4b1b      	ldr	r3, [pc, #108]	@ (800f0c8 <xPortStartScheduler+0x138>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f060:	4a19      	ldr	r2, [pc, #100]	@ (800f0c8 <xPortStartScheduler+0x138>)
 800f062:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	b2da      	uxtb	r2, r3
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f06c:	4b17      	ldr	r3, [pc, #92]	@ (800f0cc <xPortStartScheduler+0x13c>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4a16      	ldr	r2, [pc, #88]	@ (800f0cc <xPortStartScheduler+0x13c>)
 800f072:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f076:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f078:	4b14      	ldr	r3, [pc, #80]	@ (800f0cc <xPortStartScheduler+0x13c>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a13      	ldr	r2, [pc, #76]	@ (800f0cc <xPortStartScheduler+0x13c>)
 800f07e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f082:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f084:	f000 f8da 	bl	800f23c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f088:	4b11      	ldr	r3, [pc, #68]	@ (800f0d0 <xPortStartScheduler+0x140>)
 800f08a:	2200      	movs	r2, #0
 800f08c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f08e:	f000 f8f9 	bl	800f284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f092:	4b10      	ldr	r3, [pc, #64]	@ (800f0d4 <xPortStartScheduler+0x144>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4a0f      	ldr	r2, [pc, #60]	@ (800f0d4 <xPortStartScheduler+0x144>)
 800f098:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f09c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f09e:	f7ff ff63 	bl	800ef68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f0a2:	f7ff f83b 	bl	800e11c <vTaskSwitchContext>
	prvTaskExitError();
 800f0a6:	f7ff ff19 	bl	800eedc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3718      	adds	r7, #24
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	e000ed00 	.word	0xe000ed00
 800f0b8:	410fc271 	.word	0x410fc271
 800f0bc:	410fc270 	.word	0x410fc270
 800f0c0:	e000e400 	.word	0xe000e400
 800f0c4:	20001534 	.word	0x20001534
 800f0c8:	20001538 	.word	0x20001538
 800f0cc:	e000ed20 	.word	0xe000ed20
 800f0d0:	2000016c 	.word	0x2000016c
 800f0d4:	e000ef34 	.word	0xe000ef34

0800f0d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b083      	sub	sp, #12
 800f0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0e2:	f383 8811 	msr	BASEPRI, r3
 800f0e6:	f3bf 8f6f 	isb	sy
 800f0ea:	f3bf 8f4f 	dsb	sy
 800f0ee:	607b      	str	r3, [r7, #4]
}
 800f0f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f0f2:	4b10      	ldr	r3, [pc, #64]	@ (800f134 <vPortEnterCritical+0x5c>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	4a0e      	ldr	r2, [pc, #56]	@ (800f134 <vPortEnterCritical+0x5c>)
 800f0fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f0fc:	4b0d      	ldr	r3, [pc, #52]	@ (800f134 <vPortEnterCritical+0x5c>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2b01      	cmp	r3, #1
 800f102:	d110      	bne.n	800f126 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f104:	4b0c      	ldr	r3, [pc, #48]	@ (800f138 <vPortEnterCritical+0x60>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00b      	beq.n	800f126 <vPortEnterCritical+0x4e>
	__asm volatile
 800f10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f112:	f383 8811 	msr	BASEPRI, r3
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	603b      	str	r3, [r7, #0]
}
 800f120:	bf00      	nop
 800f122:	bf00      	nop
 800f124:	e7fd      	b.n	800f122 <vPortEnterCritical+0x4a>
	}
}
 800f126:	bf00      	nop
 800f128:	370c      	adds	r7, #12
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	2000016c 	.word	0x2000016c
 800f138:	e000ed04 	.word	0xe000ed04

0800f13c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f13c:	b480      	push	{r7}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f142:	4b12      	ldr	r3, [pc, #72]	@ (800f18c <vPortExitCritical+0x50>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d10b      	bne.n	800f162 <vPortExitCritical+0x26>
	__asm volatile
 800f14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f14e:	f383 8811 	msr	BASEPRI, r3
 800f152:	f3bf 8f6f 	isb	sy
 800f156:	f3bf 8f4f 	dsb	sy
 800f15a:	607b      	str	r3, [r7, #4]
}
 800f15c:	bf00      	nop
 800f15e:	bf00      	nop
 800f160:	e7fd      	b.n	800f15e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f162:	4b0a      	ldr	r3, [pc, #40]	@ (800f18c <vPortExitCritical+0x50>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	3b01      	subs	r3, #1
 800f168:	4a08      	ldr	r2, [pc, #32]	@ (800f18c <vPortExitCritical+0x50>)
 800f16a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f16c:	4b07      	ldr	r3, [pc, #28]	@ (800f18c <vPortExitCritical+0x50>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d105      	bne.n	800f180 <vPortExitCritical+0x44>
 800f174:	2300      	movs	r3, #0
 800f176:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	f383 8811 	msr	BASEPRI, r3
}
 800f17e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f180:	bf00      	nop
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr
 800f18c:	2000016c 	.word	0x2000016c

0800f190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f190:	f3ef 8009 	mrs	r0, PSP
 800f194:	f3bf 8f6f 	isb	sy
 800f198:	4b15      	ldr	r3, [pc, #84]	@ (800f1f0 <pxCurrentTCBConst>)
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	f01e 0f10 	tst.w	lr, #16
 800f1a0:	bf08      	it	eq
 800f1a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f1a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1aa:	6010      	str	r0, [r2, #0]
 800f1ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f1b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f1b4:	f380 8811 	msr	BASEPRI, r0
 800f1b8:	f3bf 8f4f 	dsb	sy
 800f1bc:	f3bf 8f6f 	isb	sy
 800f1c0:	f7fe ffac 	bl	800e11c <vTaskSwitchContext>
 800f1c4:	f04f 0000 	mov.w	r0, #0
 800f1c8:	f380 8811 	msr	BASEPRI, r0
 800f1cc:	bc09      	pop	{r0, r3}
 800f1ce:	6819      	ldr	r1, [r3, #0]
 800f1d0:	6808      	ldr	r0, [r1, #0]
 800f1d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d6:	f01e 0f10 	tst.w	lr, #16
 800f1da:	bf08      	it	eq
 800f1dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f1e0:	f380 8809 	msr	PSP, r0
 800f1e4:	f3bf 8f6f 	isb	sy
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	f3af 8000 	nop.w

0800f1f0 <pxCurrentTCBConst>:
 800f1f0:	20000f08 	.word	0x20000f08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f1f4:	bf00      	nop
 800f1f6:	bf00      	nop

0800f1f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f202:	f383 8811 	msr	BASEPRI, r3
 800f206:	f3bf 8f6f 	isb	sy
 800f20a:	f3bf 8f4f 	dsb	sy
 800f20e:	607b      	str	r3, [r7, #4]
}
 800f210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f212:	f7fe fec9 	bl	800dfa8 <xTaskIncrementTick>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d003      	beq.n	800f224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f21c:	4b06      	ldr	r3, [pc, #24]	@ (800f238 <xPortSysTickHandler+0x40>)
 800f21e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f222:	601a      	str	r2, [r3, #0]
 800f224:	2300      	movs	r3, #0
 800f226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	f383 8811 	msr	BASEPRI, r3
}
 800f22e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f230:	bf00      	nop
 800f232:	3708      	adds	r7, #8
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	e000ed04 	.word	0xe000ed04

0800f23c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f23c:	b480      	push	{r7}
 800f23e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f240:	4b0b      	ldr	r3, [pc, #44]	@ (800f270 <vPortSetupTimerInterrupt+0x34>)
 800f242:	2200      	movs	r2, #0
 800f244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f246:	4b0b      	ldr	r3, [pc, #44]	@ (800f274 <vPortSetupTimerInterrupt+0x38>)
 800f248:	2200      	movs	r2, #0
 800f24a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f24c:	4b0a      	ldr	r3, [pc, #40]	@ (800f278 <vPortSetupTimerInterrupt+0x3c>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4a0a      	ldr	r2, [pc, #40]	@ (800f27c <vPortSetupTimerInterrupt+0x40>)
 800f252:	fba2 2303 	umull	r2, r3, r2, r3
 800f256:	099b      	lsrs	r3, r3, #6
 800f258:	4a09      	ldr	r2, [pc, #36]	@ (800f280 <vPortSetupTimerInterrupt+0x44>)
 800f25a:	3b01      	subs	r3, #1
 800f25c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f25e:	4b04      	ldr	r3, [pc, #16]	@ (800f270 <vPortSetupTimerInterrupt+0x34>)
 800f260:	2207      	movs	r2, #7
 800f262:	601a      	str	r2, [r3, #0]
}
 800f264:	bf00      	nop
 800f266:	46bd      	mov	sp, r7
 800f268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop
 800f270:	e000e010 	.word	0xe000e010
 800f274:	e000e018 	.word	0xe000e018
 800f278:	20000160 	.word	0x20000160
 800f27c:	10624dd3 	.word	0x10624dd3
 800f280:	e000e014 	.word	0xe000e014

0800f284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f284:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f294 <vPortEnableVFP+0x10>
 800f288:	6801      	ldr	r1, [r0, #0]
 800f28a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f28e:	6001      	str	r1, [r0, #0]
 800f290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f292:	bf00      	nop
 800f294:	e000ed88 	.word	0xe000ed88

0800f298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f298:	b480      	push	{r7}
 800f29a:	b085      	sub	sp, #20
 800f29c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f29e:	f3ef 8305 	mrs	r3, IPSR
 800f2a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2b0f      	cmp	r3, #15
 800f2a8:	d915      	bls.n	800f2d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f2aa:	4a18      	ldr	r2, [pc, #96]	@ (800f30c <vPortValidateInterruptPriority+0x74>)
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f2b4:	4b16      	ldr	r3, [pc, #88]	@ (800f310 <vPortValidateInterruptPriority+0x78>)
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	7afa      	ldrb	r2, [r7, #11]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d20b      	bcs.n	800f2d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2c2:	f383 8811 	msr	BASEPRI, r3
 800f2c6:	f3bf 8f6f 	isb	sy
 800f2ca:	f3bf 8f4f 	dsb	sy
 800f2ce:	607b      	str	r3, [r7, #4]
}
 800f2d0:	bf00      	nop
 800f2d2:	bf00      	nop
 800f2d4:	e7fd      	b.n	800f2d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f2d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f314 <vPortValidateInterruptPriority+0x7c>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f2de:	4b0e      	ldr	r3, [pc, #56]	@ (800f318 <vPortValidateInterruptPriority+0x80>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d90b      	bls.n	800f2fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ea:	f383 8811 	msr	BASEPRI, r3
 800f2ee:	f3bf 8f6f 	isb	sy
 800f2f2:	f3bf 8f4f 	dsb	sy
 800f2f6:	603b      	str	r3, [r7, #0]
}
 800f2f8:	bf00      	nop
 800f2fa:	bf00      	nop
 800f2fc:	e7fd      	b.n	800f2fa <vPortValidateInterruptPriority+0x62>
	}
 800f2fe:	bf00      	nop
 800f300:	3714      	adds	r7, #20
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr
 800f30a:	bf00      	nop
 800f30c:	e000e3f0 	.word	0xe000e3f0
 800f310:	20001534 	.word	0x20001534
 800f314:	e000ed0c 	.word	0xe000ed0c
 800f318:	20001538 	.word	0x20001538

0800f31c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b08a      	sub	sp, #40	@ 0x28
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f324:	2300      	movs	r3, #0
 800f326:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f328:	f7fe fd82 	bl	800de30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f32c:	4b5c      	ldr	r3, [pc, #368]	@ (800f4a0 <pvPortMalloc+0x184>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d101      	bne.n	800f338 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f334:	f000 f924 	bl	800f580 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f338:	4b5a      	ldr	r3, [pc, #360]	@ (800f4a4 <pvPortMalloc+0x188>)
 800f33a:	681a      	ldr	r2, [r3, #0]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	4013      	ands	r3, r2
 800f340:	2b00      	cmp	r3, #0
 800f342:	f040 8095 	bne.w	800f470 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d01e      	beq.n	800f38a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f34c:	2208      	movs	r2, #8
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4413      	add	r3, r2
 800f352:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f003 0307 	and.w	r3, r3, #7
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d015      	beq.n	800f38a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f023 0307 	bic.w	r3, r3, #7
 800f364:	3308      	adds	r3, #8
 800f366:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f003 0307 	and.w	r3, r3, #7
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00b      	beq.n	800f38a <pvPortMalloc+0x6e>
	__asm volatile
 800f372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f376:	f383 8811 	msr	BASEPRI, r3
 800f37a:	f3bf 8f6f 	isb	sy
 800f37e:	f3bf 8f4f 	dsb	sy
 800f382:	617b      	str	r3, [r7, #20]
}
 800f384:	bf00      	nop
 800f386:	bf00      	nop
 800f388:	e7fd      	b.n	800f386 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d06f      	beq.n	800f470 <pvPortMalloc+0x154>
 800f390:	4b45      	ldr	r3, [pc, #276]	@ (800f4a8 <pvPortMalloc+0x18c>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	429a      	cmp	r2, r3
 800f398:	d86a      	bhi.n	800f470 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f39a:	4b44      	ldr	r3, [pc, #272]	@ (800f4ac <pvPortMalloc+0x190>)
 800f39c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f39e:	4b43      	ldr	r3, [pc, #268]	@ (800f4ac <pvPortMalloc+0x190>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3a4:	e004      	b.n	800f3b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d903      	bls.n	800f3c2 <pvPortMalloc+0xa6>
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d1f1      	bne.n	800f3a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f3c2:	4b37      	ldr	r3, [pc, #220]	@ (800f4a0 <pvPortMalloc+0x184>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d051      	beq.n	800f470 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f3cc:	6a3b      	ldr	r3, [r7, #32]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2208      	movs	r2, #8
 800f3d2:	4413      	add	r3, r2
 800f3d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	6a3b      	ldr	r3, [r7, #32]
 800f3dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e0:	685a      	ldr	r2, [r3, #4]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	1ad2      	subs	r2, r2, r3
 800f3e6:	2308      	movs	r3, #8
 800f3e8:	005b      	lsls	r3, r3, #1
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d920      	bls.n	800f430 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f3ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3f6:	69bb      	ldr	r3, [r7, #24]
 800f3f8:	f003 0307 	and.w	r3, r3, #7
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00b      	beq.n	800f418 <pvPortMalloc+0xfc>
	__asm volatile
 800f400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f404:	f383 8811 	msr	BASEPRI, r3
 800f408:	f3bf 8f6f 	isb	sy
 800f40c:	f3bf 8f4f 	dsb	sy
 800f410:	613b      	str	r3, [r7, #16]
}
 800f412:	bf00      	nop
 800f414:	bf00      	nop
 800f416:	e7fd      	b.n	800f414 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41a:	685a      	ldr	r2, [r3, #4]
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	1ad2      	subs	r2, r2, r3
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f42a:	69b8      	ldr	r0, [r7, #24]
 800f42c:	f000 f90a 	bl	800f644 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f430:	4b1d      	ldr	r3, [pc, #116]	@ (800f4a8 <pvPortMalloc+0x18c>)
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	4a1b      	ldr	r2, [pc, #108]	@ (800f4a8 <pvPortMalloc+0x18c>)
 800f43c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f43e:	4b1a      	ldr	r3, [pc, #104]	@ (800f4a8 <pvPortMalloc+0x18c>)
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	4b1b      	ldr	r3, [pc, #108]	@ (800f4b0 <pvPortMalloc+0x194>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	429a      	cmp	r2, r3
 800f448:	d203      	bcs.n	800f452 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f44a:	4b17      	ldr	r3, [pc, #92]	@ (800f4a8 <pvPortMalloc+0x18c>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4a18      	ldr	r2, [pc, #96]	@ (800f4b0 <pvPortMalloc+0x194>)
 800f450:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f454:	685a      	ldr	r2, [r3, #4]
 800f456:	4b13      	ldr	r3, [pc, #76]	@ (800f4a4 <pvPortMalloc+0x188>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	431a      	orrs	r2, r3
 800f45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f45e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f462:	2200      	movs	r2, #0
 800f464:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f466:	4b13      	ldr	r3, [pc, #76]	@ (800f4b4 <pvPortMalloc+0x198>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	3301      	adds	r3, #1
 800f46c:	4a11      	ldr	r2, [pc, #68]	@ (800f4b4 <pvPortMalloc+0x198>)
 800f46e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f470:	f7fe fcec 	bl	800de4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f474:	69fb      	ldr	r3, [r7, #28]
 800f476:	f003 0307 	and.w	r3, r3, #7
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d00b      	beq.n	800f496 <pvPortMalloc+0x17a>
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f482:	f383 8811 	msr	BASEPRI, r3
 800f486:	f3bf 8f6f 	isb	sy
 800f48a:	f3bf 8f4f 	dsb	sy
 800f48e:	60fb      	str	r3, [r7, #12]
}
 800f490:	bf00      	nop
 800f492:	bf00      	nop
 800f494:	e7fd      	b.n	800f492 <pvPortMalloc+0x176>
	return pvReturn;
 800f496:	69fb      	ldr	r3, [r7, #28]
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3728      	adds	r7, #40	@ 0x28
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	20005144 	.word	0x20005144
 800f4a4:	20005158 	.word	0x20005158
 800f4a8:	20005148 	.word	0x20005148
 800f4ac:	2000513c 	.word	0x2000513c
 800f4b0:	2000514c 	.word	0x2000514c
 800f4b4:	20005150 	.word	0x20005150

0800f4b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b086      	sub	sp, #24
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d04f      	beq.n	800f56a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f4ca:	2308      	movs	r3, #8
 800f4cc:	425b      	negs	r3, r3
 800f4ce:	697a      	ldr	r2, [r7, #20]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	685a      	ldr	r2, [r3, #4]
 800f4dc:	4b25      	ldr	r3, [pc, #148]	@ (800f574 <vPortFree+0xbc>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	4013      	ands	r3, r2
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d10b      	bne.n	800f4fe <vPortFree+0x46>
	__asm volatile
 800f4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ea:	f383 8811 	msr	BASEPRI, r3
 800f4ee:	f3bf 8f6f 	isb	sy
 800f4f2:	f3bf 8f4f 	dsb	sy
 800f4f6:	60fb      	str	r3, [r7, #12]
}
 800f4f8:	bf00      	nop
 800f4fa:	bf00      	nop
 800f4fc:	e7fd      	b.n	800f4fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d00b      	beq.n	800f51e <vPortFree+0x66>
	__asm volatile
 800f506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f50a:	f383 8811 	msr	BASEPRI, r3
 800f50e:	f3bf 8f6f 	isb	sy
 800f512:	f3bf 8f4f 	dsb	sy
 800f516:	60bb      	str	r3, [r7, #8]
}
 800f518:	bf00      	nop
 800f51a:	bf00      	nop
 800f51c:	e7fd      	b.n	800f51a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	685a      	ldr	r2, [r3, #4]
 800f522:	4b14      	ldr	r3, [pc, #80]	@ (800f574 <vPortFree+0xbc>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	4013      	ands	r3, r2
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d01e      	beq.n	800f56a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d11a      	bne.n	800f56a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	685a      	ldr	r2, [r3, #4]
 800f538:	4b0e      	ldr	r3, [pc, #56]	@ (800f574 <vPortFree+0xbc>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	43db      	mvns	r3, r3
 800f53e:	401a      	ands	r2, r3
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f544:	f7fe fc74 	bl	800de30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	685a      	ldr	r2, [r3, #4]
 800f54c:	4b0a      	ldr	r3, [pc, #40]	@ (800f578 <vPortFree+0xc0>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4413      	add	r3, r2
 800f552:	4a09      	ldr	r2, [pc, #36]	@ (800f578 <vPortFree+0xc0>)
 800f554:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f556:	6938      	ldr	r0, [r7, #16]
 800f558:	f000 f874 	bl	800f644 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f55c:	4b07      	ldr	r3, [pc, #28]	@ (800f57c <vPortFree+0xc4>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	3301      	adds	r3, #1
 800f562:	4a06      	ldr	r2, [pc, #24]	@ (800f57c <vPortFree+0xc4>)
 800f564:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f566:	f7fe fc71 	bl	800de4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f56a:	bf00      	nop
 800f56c:	3718      	adds	r7, #24
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	20005158 	.word	0x20005158
 800f578:	20005148 	.word	0x20005148
 800f57c:	20005154 	.word	0x20005154

0800f580 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f580:	b480      	push	{r7}
 800f582:	b085      	sub	sp, #20
 800f584:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f586:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f58a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f58c:	4b27      	ldr	r3, [pc, #156]	@ (800f62c <prvHeapInit+0xac>)
 800f58e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f003 0307 	and.w	r3, r3, #7
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00c      	beq.n	800f5b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	3307      	adds	r3, #7
 800f59e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f023 0307 	bic.w	r3, r3, #7
 800f5a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f5a8:	68ba      	ldr	r2, [r7, #8]
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	1ad3      	subs	r3, r2, r3
 800f5ae:	4a1f      	ldr	r2, [pc, #124]	@ (800f62c <prvHeapInit+0xac>)
 800f5b0:	4413      	add	r3, r2
 800f5b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f5b8:	4a1d      	ldr	r2, [pc, #116]	@ (800f630 <prvHeapInit+0xb0>)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f5be:	4b1c      	ldr	r3, [pc, #112]	@ (800f630 <prvHeapInit+0xb0>)
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	68ba      	ldr	r2, [r7, #8]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f5cc:	2208      	movs	r2, #8
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	1a9b      	subs	r3, r3, r2
 800f5d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f023 0307 	bic.w	r3, r3, #7
 800f5da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	4a15      	ldr	r2, [pc, #84]	@ (800f634 <prvHeapInit+0xb4>)
 800f5e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f5e2:	4b14      	ldr	r3, [pc, #80]	@ (800f634 <prvHeapInit+0xb4>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f5ea:	4b12      	ldr	r3, [pc, #72]	@ (800f634 <prvHeapInit+0xb4>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	1ad2      	subs	r2, r2, r3
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f600:	4b0c      	ldr	r3, [pc, #48]	@ (800f634 <prvHeapInit+0xb4>)
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	4a0a      	ldr	r2, [pc, #40]	@ (800f638 <prvHeapInit+0xb8>)
 800f60e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	4a09      	ldr	r2, [pc, #36]	@ (800f63c <prvHeapInit+0xbc>)
 800f616:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f618:	4b09      	ldr	r3, [pc, #36]	@ (800f640 <prvHeapInit+0xc0>)
 800f61a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f61e:	601a      	str	r2, [r3, #0]
}
 800f620:	bf00      	nop
 800f622:	3714      	adds	r7, #20
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr
 800f62c:	2000153c 	.word	0x2000153c
 800f630:	2000513c 	.word	0x2000513c
 800f634:	20005144 	.word	0x20005144
 800f638:	2000514c 	.word	0x2000514c
 800f63c:	20005148 	.word	0x20005148
 800f640:	20005158 	.word	0x20005158

0800f644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f64c:	4b28      	ldr	r3, [pc, #160]	@ (800f6f0 <prvInsertBlockIntoFreeList+0xac>)
 800f64e:	60fb      	str	r3, [r7, #12]
 800f650:	e002      	b.n	800f658 <prvInsertBlockIntoFreeList+0x14>
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	60fb      	str	r3, [r7, #12]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	687a      	ldr	r2, [r7, #4]
 800f65e:	429a      	cmp	r2, r3
 800f660:	d8f7      	bhi.n	800f652 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	68ba      	ldr	r2, [r7, #8]
 800f66c:	4413      	add	r3, r2
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	429a      	cmp	r2, r3
 800f672:	d108      	bne.n	800f686 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	685a      	ldr	r2, [r3, #4]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	441a      	add	r2, r3
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	68ba      	ldr	r2, [r7, #8]
 800f690:	441a      	add	r2, r3
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	429a      	cmp	r2, r3
 800f698:	d118      	bne.n	800f6cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	4b15      	ldr	r3, [pc, #84]	@ (800f6f4 <prvInsertBlockIntoFreeList+0xb0>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d00d      	beq.n	800f6c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	685a      	ldr	r2, [r3, #4]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	441a      	add	r2, r3
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	681a      	ldr	r2, [r3, #0]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	601a      	str	r2, [r3, #0]
 800f6c0:	e008      	b.n	800f6d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f6c2:	4b0c      	ldr	r3, [pc, #48]	@ (800f6f4 <prvInsertBlockIntoFreeList+0xb0>)
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	601a      	str	r2, [r3, #0]
 800f6ca:	e003      	b.n	800f6d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681a      	ldr	r2, [r3, #0]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d002      	beq.n	800f6e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	687a      	ldr	r2, [r7, #4]
 800f6e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6e2:	bf00      	nop
 800f6e4:	3714      	adds	r7, #20
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop
 800f6f0:	2000513c 	.word	0x2000513c
 800f6f4:	20005144 	.word	0x20005144

0800f6f8 <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b08a      	sub	sp, #40	@ 0x28
 800f6fc:	af04      	add	r7, sp, #16
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	460b      	mov	r3, r1
 800f702:	607a      	str	r2, [r7, #4]
 800f704:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800f706:	2300      	movs	r3, #0
 800f708:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	011b      	lsls	r3, r3, #4
 800f710:	b2db      	uxtb	r3, r3
 800f712:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800f714:	7afb      	ldrb	r3, [r7, #11]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d101      	bne.n	800f71e <_ICM20948_SelectUserBank+0x26>
 800f71a:	2368      	movs	r3, #104	@ 0x68
 800f71c:	e000      	b.n	800f720 <_ICM20948_SelectUserBank+0x28>
 800f71e:	2369      	movs	r3, #105	@ 0x69
 800f720:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800f722:	7dbb      	ldrb	r3, [r7, #22]
 800f724:	b29b      	uxth	r3, r3
 800f726:	005b      	lsls	r3, r3, #1
 800f728:	b299      	uxth	r1, r3
 800f72a:	230a      	movs	r3, #10
 800f72c:	9302      	str	r3, [sp, #8]
 800f72e:	2301      	movs	r3, #1
 800f730:	9301      	str	r3, [sp, #4]
 800f732:	f107 0315 	add.w	r3, r7, #21
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	2301      	movs	r3, #1
 800f73a:	227f      	movs	r2, #127	@ 0x7f
 800f73c:	68f8      	ldr	r0, [r7, #12]
 800f73e:	f7f9 f935 	bl	80089ac <HAL_I2C_Mem_Write>
 800f742:	4603      	mov	r3, r0
 800f744:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800f746:	7dfb      	ldrb	r3, [r7, #23]
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3718      	adds	r7, #24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 800f750:	b580      	push	{r7, lr}
 800f752:	b088      	sub	sp, #32
 800f754:	af04      	add	r7, sp, #16
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	4608      	mov	r0, r1
 800f75a:	4611      	mov	r1, r2
 800f75c:	461a      	mov	r2, r3
 800f75e:	4603      	mov	r3, r0
 800f760:	70fb      	strb	r3, [r7, #3]
 800f762:	460b      	mov	r3, r1
 800f764:	70bb      	strb	r3, [r7, #2]
 800f766:	4613      	mov	r3, r2
 800f768:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800f76a:	2300      	movs	r3, #0
 800f76c:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800f76e:	78fb      	ldrb	r3, [r7, #3]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d101      	bne.n	800f778 <_ICM20948_WriteByte+0x28>
 800f774:	2368      	movs	r3, #104	@ 0x68
 800f776:	e000      	b.n	800f77a <_ICM20948_WriteByte+0x2a>
 800f778:	2369      	movs	r3, #105	@ 0x69
 800f77a:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800f77c:	7bbb      	ldrb	r3, [r7, #14]
 800f77e:	b29b      	uxth	r3, r3
 800f780:	005b      	lsls	r3, r3, #1
 800f782:	b299      	uxth	r1, r3
 800f784:	78bb      	ldrb	r3, [r7, #2]
 800f786:	b29a      	uxth	r2, r3
 800f788:	230a      	movs	r3, #10
 800f78a:	9302      	str	r3, [sp, #8]
 800f78c:	2301      	movs	r3, #1
 800f78e:	9301      	str	r3, [sp, #4]
 800f790:	1c7b      	adds	r3, r7, #1
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	2301      	movs	r3, #1
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f7f9 f908 	bl	80089ac <HAL_I2C_Mem_Write>
 800f79c:	4603      	mov	r3, r0
 800f79e:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800f7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3710      	adds	r7, #16
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}

0800f7aa <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 800f7aa:	b580      	push	{r7, lr}
 800f7ac:	b084      	sub	sp, #16
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	70fb      	strb	r3, [r7, #3]
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800f7be:	78fb      	ldrb	r3, [r7, #3]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f7ff ff97 	bl	800f6f8 <_ICM20948_SelectUserBank>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800f7ce:	78f9      	ldrb	r1, [r7, #3]
 800f7d0:	2380      	movs	r3, #128	@ 0x80
 800f7d2:	2206      	movs	r2, #6
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7ff ffbb 	bl	800f750 <_ICM20948_WriteByte>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 800f7de:	20c8      	movs	r0, #200	@ 0xc8
 800f7e0:	f7f7 fc9c 	bl	800711c <HAL_Delay>

	status = _ICM20948_WriteByte(
 800f7e4:	78f9      	ldrb	r1, [r7, #3]
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	2206      	movs	r2, #6
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f7ff ffb0 	bl	800f750 <_ICM20948_WriteByte>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 800f7f4:	78f9      	ldrb	r1, [r7, #3]
 800f7f6:	2338      	movs	r3, #56	@ 0x38
 800f7f8:	2207      	movs	r2, #7
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7ff ffa8 	bl	800f750 <_ICM20948_WriteByte>
 800f800:	4603      	mov	r3, r0
 800f802:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800f804:	78fb      	ldrb	r3, [r7, #3]
 800f806:	2202      	movs	r2, #2
 800f808:	4619      	mov	r1, r3
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f7ff ff74 	bl	800f6f8 <_ICM20948_SelectUserBank>
 800f810:	4603      	mov	r3, r0
 800f812:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800f814:	78bb      	ldrb	r3, [r7, #2]
 800f816:	005b      	lsls	r3, r3, #1
 800f818:	b25b      	sxtb	r3, r3
 800f81a:	f043 0319 	orr.w	r3, r3, #25
 800f81e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800f820:	b2db      	uxtb	r3, r3
 800f822:	78f9      	ldrb	r1, [r7, #3]
 800f824:	2201      	movs	r2, #1
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f7ff ff92 	bl	800f750 <_ICM20948_WriteByte>
 800f82c:	4603      	mov	r3, r0
 800f82e:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800f830:	78f9      	ldrb	r1, [r7, #3]
 800f832:	2304      	movs	r3, #4
 800f834:	2200      	movs	r2, #0
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f7ff ff8a 	bl	800f750 <_ICM20948_WriteByte>
 800f83c:	4603      	mov	r3, r0
 800f83e:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800f840:	78fb      	ldrb	r3, [r7, #3]
 800f842:	2200      	movs	r2, #0
 800f844:	4619      	mov	r1, r3
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7ff ff56 	bl	800f6f8 <_ICM20948_SelectUserBank>
 800f84c:	4603      	mov	r3, r0
 800f84e:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 800f850:	78f9      	ldrb	r1, [r7, #3]
 800f852:	2302      	movs	r3, #2
 800f854:	220f      	movs	r2, #15
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7ff ff7a 	bl	800f750 <_ICM20948_WriteByte>
 800f85c:	4603      	mov	r3, r0
 800f85e:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 800f860:	bf00      	nop
 800f862:	3710      	adds	r7, #16
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800f86e:	2300      	movs	r3, #0
 800f870:	71fb      	strb	r3, [r7, #7]
 800f872:	e026      	b.n	800f8c2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800f874:	79fb      	ldrb	r3, [r7, #7]
 800f876:	3b50      	subs	r3, #80	@ 0x50
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	2100      	movs	r1, #0
 800f87c:	4618      	mov	r0, r3
 800f87e:	f000 f82b 	bl	800f8d8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800f882:	2100      	movs	r1, #0
 800f884:	2000      	movs	r0, #0
 800f886:	f000 f827 	bl	800f8d8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800f88a:	2100      	movs	r1, #0
 800f88c:	2010      	movs	r0, #16
 800f88e:	f000 f823 	bl	800f8d8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800f892:	2300      	movs	r3, #0
 800f894:	71bb      	strb	r3, [r7, #6]
 800f896:	e00d      	b.n	800f8b4 <OLED_Refresh_Gram+0x4c>
 800f898:	79ba      	ldrb	r2, [r7, #6]
 800f89a:	79fb      	ldrb	r3, [r7, #7]
 800f89c:	490d      	ldr	r1, [pc, #52]	@ (800f8d4 <OLED_Refresh_Gram+0x6c>)
 800f89e:	00d2      	lsls	r2, r2, #3
 800f8a0:	440a      	add	r2, r1
 800f8a2:	4413      	add	r3, r2
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	2101      	movs	r1, #1
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f000 f815 	bl	800f8d8 <OLED_WR_Byte>
 800f8ae:	79bb      	ldrb	r3, [r7, #6]
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	71bb      	strb	r3, [r7, #6]
 800f8b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	daed      	bge.n	800f898 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800f8bc:	79fb      	ldrb	r3, [r7, #7]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	71fb      	strb	r3, [r7, #7]
 800f8c2:	79fb      	ldrb	r3, [r7, #7]
 800f8c4:	2b07      	cmp	r3, #7
 800f8c6:	d9d5      	bls.n	800f874 <OLED_Refresh_Gram+0xc>
	}   
}
 800f8c8:	bf00      	nop
 800f8ca:	bf00      	nop
 800f8cc:	3708      	adds	r7, #8
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	2000515c 	.word	0x2000515c

0800f8d8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	4603      	mov	r3, r0
 800f8e0:	460a      	mov	r2, r1
 800f8e2:	71fb      	strb	r3, [r7, #7]
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800f8e8:	79bb      	ldrb	r3, [r7, #6]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d006      	beq.n	800f8fc <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f8f4:	481c      	ldr	r0, [pc, #112]	@ (800f968 <OLED_WR_Byte+0x90>)
 800f8f6:	f7f8 fee3 	bl	80086c0 <HAL_GPIO_WritePin>
 800f8fa:	e005      	b.n	800f908 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f902:	4819      	ldr	r0, [pc, #100]	@ (800f968 <OLED_WR_Byte+0x90>)
 800f904:	f7f8 fedc 	bl	80086c0 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800f908:	2300      	movs	r3, #0
 800f90a:	73fb      	strb	r3, [r7, #15]
 800f90c:	e01e      	b.n	800f94c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800f90e:	2200      	movs	r2, #0
 800f910:	2120      	movs	r1, #32
 800f912:	4815      	ldr	r0, [pc, #84]	@ (800f968 <OLED_WR_Byte+0x90>)
 800f914:	f7f8 fed4 	bl	80086c0 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800f918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	da05      	bge.n	800f92c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800f920:	2201      	movs	r2, #1
 800f922:	2140      	movs	r1, #64	@ 0x40
 800f924:	4810      	ldr	r0, [pc, #64]	@ (800f968 <OLED_WR_Byte+0x90>)
 800f926:	f7f8 fecb 	bl	80086c0 <HAL_GPIO_WritePin>
 800f92a:	e004      	b.n	800f936 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800f92c:	2200      	movs	r2, #0
 800f92e:	2140      	movs	r1, #64	@ 0x40
 800f930:	480d      	ldr	r0, [pc, #52]	@ (800f968 <OLED_WR_Byte+0x90>)
 800f932:	f7f8 fec5 	bl	80086c0 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800f936:	2201      	movs	r2, #1
 800f938:	2120      	movs	r1, #32
 800f93a:	480b      	ldr	r0, [pc, #44]	@ (800f968 <OLED_WR_Byte+0x90>)
 800f93c:	f7f8 fec0 	bl	80086c0 <HAL_GPIO_WritePin>
		dat<<=1;   
 800f940:	79fb      	ldrb	r3, [r7, #7]
 800f942:	005b      	lsls	r3, r3, #1
 800f944:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800f946:	7bfb      	ldrb	r3, [r7, #15]
 800f948:	3301      	adds	r3, #1
 800f94a:	73fb      	strb	r3, [r7, #15]
 800f94c:	7bfb      	ldrb	r3, [r7, #15]
 800f94e:	2b07      	cmp	r3, #7
 800f950:	d9dd      	bls.n	800f90e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800f952:	2201      	movs	r2, #1
 800f954:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f958:	4803      	ldr	r0, [pc, #12]	@ (800f968 <OLED_WR_Byte+0x90>)
 800f95a:	f7f8 feb1 	bl	80086c0 <HAL_GPIO_WritePin>
} 
 800f95e:	bf00      	nop
 800f960:	3710      	adds	r7, #16
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	40021000 	.word	0x40021000

0800f96c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b082      	sub	sp, #8
 800f970:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800f972:	2300      	movs	r3, #0
 800f974:	71fb      	strb	r3, [r7, #7]
 800f976:	e014      	b.n	800f9a2 <OLED_Clear+0x36>
 800f978:	2300      	movs	r3, #0
 800f97a:	71bb      	strb	r3, [r7, #6]
 800f97c:	e00a      	b.n	800f994 <OLED_Clear+0x28>
 800f97e:	79ba      	ldrb	r2, [r7, #6]
 800f980:	79fb      	ldrb	r3, [r7, #7]
 800f982:	490c      	ldr	r1, [pc, #48]	@ (800f9b4 <OLED_Clear+0x48>)
 800f984:	00d2      	lsls	r2, r2, #3
 800f986:	440a      	add	r2, r1
 800f988:	4413      	add	r3, r2
 800f98a:	2200      	movs	r2, #0
 800f98c:	701a      	strb	r2, [r3, #0]
 800f98e:	79bb      	ldrb	r3, [r7, #6]
 800f990:	3301      	adds	r3, #1
 800f992:	71bb      	strb	r3, [r7, #6]
 800f994:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	daf0      	bge.n	800f97e <OLED_Clear+0x12>
 800f99c:	79fb      	ldrb	r3, [r7, #7]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	71fb      	strb	r3, [r7, #7]
 800f9a2:	79fb      	ldrb	r3, [r7, #7]
 800f9a4:	2b07      	cmp	r3, #7
 800f9a6:	d9e7      	bls.n	800f978 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800f9a8:	f7ff ff5e 	bl	800f868 <OLED_Refresh_Gram>
}
 800f9ac:	bf00      	nop
 800f9ae:	3708      	adds	r7, #8
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	2000515c 	.word	0x2000515c

0800f9b8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b085      	sub	sp, #20
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	4603      	mov	r3, r0
 800f9c0:	71fb      	strb	r3, [r7, #7]
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	71bb      	strb	r3, [r7, #6]
 800f9c6:	4613      	mov	r3, r2
 800f9c8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800f9ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	db41      	blt.n	800fa5a <OLED_DrawPoint+0xa2>
 800f9d6:	79bb      	ldrb	r3, [r7, #6]
 800f9d8:	2b3f      	cmp	r3, #63	@ 0x3f
 800f9da:	d83e      	bhi.n	800fa5a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800f9dc:	79bb      	ldrb	r3, [r7, #6]
 800f9de:	08db      	lsrs	r3, r3, #3
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	f1c3 0307 	rsb	r3, r3, #7
 800f9e6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800f9e8:	79bb      	ldrb	r3, [r7, #6]
 800f9ea:	f003 0307 	and.w	r3, r3, #7
 800f9ee:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800f9f0:	7b7b      	ldrb	r3, [r7, #13]
 800f9f2:	f1c3 0307 	rsb	r3, r3, #7
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800f9fc:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800f9fe:	797b      	ldrb	r3, [r7, #5]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d012      	beq.n	800fa2a <OLED_DrawPoint+0x72>
 800fa04:	79fa      	ldrb	r2, [r7, #7]
 800fa06:	7bbb      	ldrb	r3, [r7, #14]
 800fa08:	4917      	ldr	r1, [pc, #92]	@ (800fa68 <OLED_DrawPoint+0xb0>)
 800fa0a:	00d2      	lsls	r2, r2, #3
 800fa0c:	440a      	add	r2, r1
 800fa0e:	4413      	add	r3, r2
 800fa10:	7818      	ldrb	r0, [r3, #0]
 800fa12:	79fa      	ldrb	r2, [r7, #7]
 800fa14:	7bbb      	ldrb	r3, [r7, #14]
 800fa16:	7bf9      	ldrb	r1, [r7, #15]
 800fa18:	4301      	orrs	r1, r0
 800fa1a:	b2c8      	uxtb	r0, r1
 800fa1c:	4912      	ldr	r1, [pc, #72]	@ (800fa68 <OLED_DrawPoint+0xb0>)
 800fa1e:	00d2      	lsls	r2, r2, #3
 800fa20:	440a      	add	r2, r1
 800fa22:	4413      	add	r3, r2
 800fa24:	4602      	mov	r2, r0
 800fa26:	701a      	strb	r2, [r3, #0]
 800fa28:	e018      	b.n	800fa5c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800fa2a:	79fa      	ldrb	r2, [r7, #7]
 800fa2c:	7bbb      	ldrb	r3, [r7, #14]
 800fa2e:	490e      	ldr	r1, [pc, #56]	@ (800fa68 <OLED_DrawPoint+0xb0>)
 800fa30:	00d2      	lsls	r2, r2, #3
 800fa32:	440a      	add	r2, r1
 800fa34:	4413      	add	r3, r2
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	b25a      	sxtb	r2, r3
 800fa3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa3e:	43db      	mvns	r3, r3
 800fa40:	b25b      	sxtb	r3, r3
 800fa42:	4013      	ands	r3, r2
 800fa44:	b259      	sxtb	r1, r3
 800fa46:	79fa      	ldrb	r2, [r7, #7]
 800fa48:	7bbb      	ldrb	r3, [r7, #14]
 800fa4a:	b2c8      	uxtb	r0, r1
 800fa4c:	4906      	ldr	r1, [pc, #24]	@ (800fa68 <OLED_DrawPoint+0xb0>)
 800fa4e:	00d2      	lsls	r2, r2, #3
 800fa50:	440a      	add	r2, r1
 800fa52:	4413      	add	r3, r2
 800fa54:	4602      	mov	r2, r0
 800fa56:	701a      	strb	r2, [r3, #0]
 800fa58:	e000      	b.n	800fa5c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800fa5a:	bf00      	nop
}
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr
 800fa66:	bf00      	nop
 800fa68:	2000515c 	.word	0x2000515c

0800fa6c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800fa6c:	b590      	push	{r4, r7, lr}
 800fa6e:	b085      	sub	sp, #20
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	4604      	mov	r4, r0
 800fa74:	4608      	mov	r0, r1
 800fa76:	4611      	mov	r1, r2
 800fa78:	461a      	mov	r2, r3
 800fa7a:	4623      	mov	r3, r4
 800fa7c:	71fb      	strb	r3, [r7, #7]
 800fa7e:	4603      	mov	r3, r0
 800fa80:	71bb      	strb	r3, [r7, #6]
 800fa82:	460b      	mov	r3, r1
 800fa84:	717b      	strb	r3, [r7, #5]
 800fa86:	4613      	mov	r3, r2
 800fa88:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800fa8a:	79bb      	ldrb	r3, [r7, #6]
 800fa8c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800fa8e:	797b      	ldrb	r3, [r7, #5]
 800fa90:	3b20      	subs	r3, #32
 800fa92:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800fa94:	2300      	movs	r3, #0
 800fa96:	73bb      	strb	r3, [r7, #14]
 800fa98:	e04d      	b.n	800fb36 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800fa9a:	793b      	ldrb	r3, [r7, #4]
 800fa9c:	2b0c      	cmp	r3, #12
 800fa9e:	d10b      	bne.n	800fab8 <OLED_ShowChar+0x4c>
 800faa0:	797a      	ldrb	r2, [r7, #5]
 800faa2:	7bb9      	ldrb	r1, [r7, #14]
 800faa4:	4828      	ldr	r0, [pc, #160]	@ (800fb48 <OLED_ShowChar+0xdc>)
 800faa6:	4613      	mov	r3, r2
 800faa8:	005b      	lsls	r3, r3, #1
 800faaa:	4413      	add	r3, r2
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4403      	add	r3, r0
 800fab0:	440b      	add	r3, r1
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	73fb      	strb	r3, [r7, #15]
 800fab6:	e007      	b.n	800fac8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800fab8:	797a      	ldrb	r2, [r7, #5]
 800faba:	7bbb      	ldrb	r3, [r7, #14]
 800fabc:	4923      	ldr	r1, [pc, #140]	@ (800fb4c <OLED_ShowChar+0xe0>)
 800fabe:	0112      	lsls	r2, r2, #4
 800fac0:	440a      	add	r2, r1
 800fac2:	4413      	add	r3, r2
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800fac8:	2300      	movs	r3, #0
 800faca:	737b      	strb	r3, [r7, #13]
 800facc:	e02d      	b.n	800fb2a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800face:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	da07      	bge.n	800fae6 <OLED_ShowChar+0x7a>
 800fad6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800fada:	79b9      	ldrb	r1, [r7, #6]
 800fadc:	79fb      	ldrb	r3, [r7, #7]
 800fade:	4618      	mov	r0, r3
 800fae0:	f7ff ff6a 	bl	800f9b8 <OLED_DrawPoint>
 800fae4:	e00c      	b.n	800fb00 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800fae6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800faea:	2b00      	cmp	r3, #0
 800faec:	bf0c      	ite	eq
 800faee:	2301      	moveq	r3, #1
 800faf0:	2300      	movne	r3, #0
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	461a      	mov	r2, r3
 800faf6:	79b9      	ldrb	r1, [r7, #6]
 800faf8:	79fb      	ldrb	r3, [r7, #7]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7ff ff5c 	bl	800f9b8 <OLED_DrawPoint>
			temp<<=1;
 800fb00:	7bfb      	ldrb	r3, [r7, #15]
 800fb02:	005b      	lsls	r3, r3, #1
 800fb04:	73fb      	strb	r3, [r7, #15]
			y++;
 800fb06:	79bb      	ldrb	r3, [r7, #6]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800fb0c:	79ba      	ldrb	r2, [r7, #6]
 800fb0e:	7b3b      	ldrb	r3, [r7, #12]
 800fb10:	1ad2      	subs	r2, r2, r3
 800fb12:	793b      	ldrb	r3, [r7, #4]
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d105      	bne.n	800fb24 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800fb18:	7b3b      	ldrb	r3, [r7, #12]
 800fb1a:	71bb      	strb	r3, [r7, #6]
				x++;
 800fb1c:	79fb      	ldrb	r3, [r7, #7]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	71fb      	strb	r3, [r7, #7]
				break;
 800fb22:	e005      	b.n	800fb30 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800fb24:	7b7b      	ldrb	r3, [r7, #13]
 800fb26:	3301      	adds	r3, #1
 800fb28:	737b      	strb	r3, [r7, #13]
 800fb2a:	7b7b      	ldrb	r3, [r7, #13]
 800fb2c:	2b07      	cmp	r3, #7
 800fb2e:	d9ce      	bls.n	800face <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800fb30:	7bbb      	ldrb	r3, [r7, #14]
 800fb32:	3301      	adds	r3, #1
 800fb34:	73bb      	strb	r3, [r7, #14]
 800fb36:	7bba      	ldrb	r2, [r7, #14]
 800fb38:	793b      	ldrb	r3, [r7, #4]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d3ad      	bcc.n	800fa9a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800fb3e:	bf00      	nop
 800fb40:	bf00      	nop
 800fb42:	3714      	adds	r7, #20
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd90      	pop	{r4, r7, pc}
 800fb48:	08013c64 	.word	0x08013c64
 800fb4c:	080140d8 	.word	0x080140d8

0800fb50 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af02      	add	r7, sp, #8
 800fb56:	4603      	mov	r3, r0
 800fb58:	603a      	str	r2, [r7, #0]
 800fb5a:	71fb      	strb	r3, [r7, #7]
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800fb60:	e01f      	b.n	800fba2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800fb62:	79fb      	ldrb	r3, [r7, #7]
 800fb64:	2b7a      	cmp	r3, #122	@ 0x7a
 800fb66:	d904      	bls.n	800fb72 <OLED_ShowString+0x22>
 800fb68:	2300      	movs	r3, #0
 800fb6a:	71fb      	strb	r3, [r7, #7]
 800fb6c:	79bb      	ldrb	r3, [r7, #6]
 800fb6e:	3310      	adds	r3, #16
 800fb70:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800fb72:	79bb      	ldrb	r3, [r7, #6]
 800fb74:	2b3a      	cmp	r3, #58	@ 0x3a
 800fb76:	d905      	bls.n	800fb84 <OLED_ShowString+0x34>
 800fb78:	2300      	movs	r3, #0
 800fb7a:	71fb      	strb	r3, [r7, #7]
 800fb7c:	79fb      	ldrb	r3, [r7, #7]
 800fb7e:	71bb      	strb	r3, [r7, #6]
 800fb80:	f7ff fef4 	bl	800f96c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	781a      	ldrb	r2, [r3, #0]
 800fb88:	79b9      	ldrb	r1, [r7, #6]
 800fb8a:	79f8      	ldrb	r0, [r7, #7]
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	9300      	str	r3, [sp, #0]
 800fb90:	230c      	movs	r3, #12
 800fb92:	f7ff ff6b 	bl	800fa6c <OLED_ShowChar>
        x+=8;
 800fb96:	79fb      	ldrb	r3, [r7, #7]
 800fb98:	3308      	adds	r3, #8
 800fb9a:	71fb      	strb	r3, [r7, #7]
        p++;
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d1db      	bne.n	800fb62 <OLED_ShowString+0x12>
    }  
}	 
 800fbaa:	bf00      	nop
 800fbac:	bf00      	nop
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <OLED_Init>:

void OLED_Init(void)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800fbb8:	f7f9 fdd8 	bl	800976c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800fbbc:	4b41      	ldr	r3, [pc, #260]	@ (800fcc4 <OLED_Init+0x110>)
 800fbbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbc0:	4a40      	ldr	r2, [pc, #256]	@ (800fcc4 <OLED_Init+0x110>)
 800fbc2:	f023 0301 	bic.w	r3, r3, #1
 800fbc6:	6713      	str	r3, [r2, #112]	@ 0x70
 800fbc8:	4b3e      	ldr	r3, [pc, #248]	@ (800fcc4 <OLED_Init+0x110>)
 800fbca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbcc:	4a3d      	ldr	r2, [pc, #244]	@ (800fcc4 <OLED_Init+0x110>)
 800fbce:	f023 0304 	bic.w	r3, r3, #4
 800fbd2:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800fbd4:	f7f9 fdde 	bl	8009794 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800fbd8:	2200      	movs	r2, #0
 800fbda:	2180      	movs	r1, #128	@ 0x80
 800fbdc:	483a      	ldr	r0, [pc, #232]	@ (800fcc8 <OLED_Init+0x114>)
 800fbde:	f7f8 fd6f 	bl	80086c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800fbe2:	2064      	movs	r0, #100	@ 0x64
 800fbe4:	f7f7 fa9a 	bl	800711c <HAL_Delay>
	OLED_RST_Set();
 800fbe8:	2201      	movs	r2, #1
 800fbea:	2180      	movs	r1, #128	@ 0x80
 800fbec:	4836      	ldr	r0, [pc, #216]	@ (800fcc8 <OLED_Init+0x114>)
 800fbee:	f7f8 fd67 	bl	80086c0 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800fbf2:	2100      	movs	r1, #0
 800fbf4:	20ae      	movs	r0, #174	@ 0xae
 800fbf6:	f7ff fe6f 	bl	800f8d8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800fbfa:	2100      	movs	r1, #0
 800fbfc:	20d5      	movs	r0, #213	@ 0xd5
 800fbfe:	f7ff fe6b 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800fc02:	2100      	movs	r1, #0
 800fc04:	2050      	movs	r0, #80	@ 0x50
 800fc06:	f7ff fe67 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800fc0a:	2100      	movs	r1, #0
 800fc0c:	20a8      	movs	r0, #168	@ 0xa8
 800fc0e:	f7ff fe63 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800fc12:	2100      	movs	r1, #0
 800fc14:	203f      	movs	r0, #63	@ 0x3f
 800fc16:	f7ff fe5f 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	20d3      	movs	r0, #211	@ 0xd3
 800fc1e:	f7ff fe5b 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800fc22:	2100      	movs	r1, #0
 800fc24:	2000      	movs	r0, #0
 800fc26:	f7ff fe57 	bl	800f8d8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	2040      	movs	r0, #64	@ 0x40
 800fc2e:	f7ff fe53 	bl	800f8d8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800fc32:	2100      	movs	r1, #0
 800fc34:	208d      	movs	r0, #141	@ 0x8d
 800fc36:	f7ff fe4f 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800fc3a:	2100      	movs	r1, #0
 800fc3c:	2014      	movs	r0, #20
 800fc3e:	f7ff fe4b 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800fc42:	2100      	movs	r1, #0
 800fc44:	2020      	movs	r0, #32
 800fc46:	f7ff fe47 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	2002      	movs	r0, #2
 800fc4e:	f7ff fe43 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800fc52:	2100      	movs	r1, #0
 800fc54:	20a1      	movs	r0, #161	@ 0xa1
 800fc56:	f7ff fe3f 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800fc5a:	2100      	movs	r1, #0
 800fc5c:	20c0      	movs	r0, #192	@ 0xc0
 800fc5e:	f7ff fe3b 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800fc62:	2100      	movs	r1, #0
 800fc64:	20da      	movs	r0, #218	@ 0xda
 800fc66:	f7ff fe37 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800fc6a:	2100      	movs	r1, #0
 800fc6c:	2012      	movs	r0, #18
 800fc6e:	f7ff fe33 	bl	800f8d8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800fc72:	2100      	movs	r1, #0
 800fc74:	2081      	movs	r0, #129	@ 0x81
 800fc76:	f7ff fe2f 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800fc7a:	2100      	movs	r1, #0
 800fc7c:	20ef      	movs	r0, #239	@ 0xef
 800fc7e:	f7ff fe2b 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800fc82:	2100      	movs	r1, #0
 800fc84:	20d9      	movs	r0, #217	@ 0xd9
 800fc86:	f7ff fe27 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800fc8a:	2100      	movs	r1, #0
 800fc8c:	20f1      	movs	r0, #241	@ 0xf1
 800fc8e:	f7ff fe23 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800fc92:	2100      	movs	r1, #0
 800fc94:	20db      	movs	r0, #219	@ 0xdb
 800fc96:	f7ff fe1f 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800fc9a:	2100      	movs	r1, #0
 800fc9c:	2030      	movs	r0, #48	@ 0x30
 800fc9e:	f7ff fe1b 	bl	800f8d8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800fca2:	2100      	movs	r1, #0
 800fca4:	20a4      	movs	r0, #164	@ 0xa4
 800fca6:	f7ff fe17 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800fcaa:	2100      	movs	r1, #0
 800fcac:	20a6      	movs	r0, #166	@ 0xa6
 800fcae:	f7ff fe13 	bl	800f8d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800fcb2:	2100      	movs	r1, #0
 800fcb4:	20af      	movs	r0, #175	@ 0xaf
 800fcb6:	f7ff fe0f 	bl	800f8d8 <OLED_WR_Byte>
	OLED_Clear(); 
 800fcba:	f7ff fe57 	bl	800f96c <OLED_Clear>
 800fcbe:	bf00      	nop
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	40023800 	.word	0x40023800
 800fcc8:	40021000 	.word	0x40021000

0800fccc <__cvt>:
 800fccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd0:	ec57 6b10 	vmov	r6, r7, d0
 800fcd4:	2f00      	cmp	r7, #0
 800fcd6:	460c      	mov	r4, r1
 800fcd8:	4619      	mov	r1, r3
 800fcda:	463b      	mov	r3, r7
 800fcdc:	bfbb      	ittet	lt
 800fcde:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fce2:	461f      	movlt	r7, r3
 800fce4:	2300      	movge	r3, #0
 800fce6:	232d      	movlt	r3, #45	@ 0x2d
 800fce8:	700b      	strb	r3, [r1, #0]
 800fcea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fcec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fcf0:	4691      	mov	r9, r2
 800fcf2:	f023 0820 	bic.w	r8, r3, #32
 800fcf6:	bfbc      	itt	lt
 800fcf8:	4632      	movlt	r2, r6
 800fcfa:	4616      	movlt	r6, r2
 800fcfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fd00:	d005      	beq.n	800fd0e <__cvt+0x42>
 800fd02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fd06:	d100      	bne.n	800fd0a <__cvt+0x3e>
 800fd08:	3401      	adds	r4, #1
 800fd0a:	2102      	movs	r1, #2
 800fd0c:	e000      	b.n	800fd10 <__cvt+0x44>
 800fd0e:	2103      	movs	r1, #3
 800fd10:	ab03      	add	r3, sp, #12
 800fd12:	9301      	str	r3, [sp, #4]
 800fd14:	ab02      	add	r3, sp, #8
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	ec47 6b10 	vmov	d0, r6, r7
 800fd1c:	4653      	mov	r3, sl
 800fd1e:	4622      	mov	r2, r4
 800fd20:	f000 fe9e 	bl	8010a60 <_dtoa_r>
 800fd24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fd28:	4605      	mov	r5, r0
 800fd2a:	d119      	bne.n	800fd60 <__cvt+0x94>
 800fd2c:	f019 0f01 	tst.w	r9, #1
 800fd30:	d00e      	beq.n	800fd50 <__cvt+0x84>
 800fd32:	eb00 0904 	add.w	r9, r0, r4
 800fd36:	2200      	movs	r2, #0
 800fd38:	2300      	movs	r3, #0
 800fd3a:	4630      	mov	r0, r6
 800fd3c:	4639      	mov	r1, r7
 800fd3e:	f7f0 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd42:	b108      	cbz	r0, 800fd48 <__cvt+0x7c>
 800fd44:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd48:	2230      	movs	r2, #48	@ 0x30
 800fd4a:	9b03      	ldr	r3, [sp, #12]
 800fd4c:	454b      	cmp	r3, r9
 800fd4e:	d31e      	bcc.n	800fd8e <__cvt+0xc2>
 800fd50:	9b03      	ldr	r3, [sp, #12]
 800fd52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd54:	1b5b      	subs	r3, r3, r5
 800fd56:	4628      	mov	r0, r5
 800fd58:	6013      	str	r3, [r2, #0]
 800fd5a:	b004      	add	sp, #16
 800fd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fd64:	eb00 0904 	add.w	r9, r0, r4
 800fd68:	d1e5      	bne.n	800fd36 <__cvt+0x6a>
 800fd6a:	7803      	ldrb	r3, [r0, #0]
 800fd6c:	2b30      	cmp	r3, #48	@ 0x30
 800fd6e:	d10a      	bne.n	800fd86 <__cvt+0xba>
 800fd70:	2200      	movs	r2, #0
 800fd72:	2300      	movs	r3, #0
 800fd74:	4630      	mov	r0, r6
 800fd76:	4639      	mov	r1, r7
 800fd78:	f7f0 fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd7c:	b918      	cbnz	r0, 800fd86 <__cvt+0xba>
 800fd7e:	f1c4 0401 	rsb	r4, r4, #1
 800fd82:	f8ca 4000 	str.w	r4, [sl]
 800fd86:	f8da 3000 	ldr.w	r3, [sl]
 800fd8a:	4499      	add	r9, r3
 800fd8c:	e7d3      	b.n	800fd36 <__cvt+0x6a>
 800fd8e:	1c59      	adds	r1, r3, #1
 800fd90:	9103      	str	r1, [sp, #12]
 800fd92:	701a      	strb	r2, [r3, #0]
 800fd94:	e7d9      	b.n	800fd4a <__cvt+0x7e>

0800fd96 <__exponent>:
 800fd96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd98:	2900      	cmp	r1, #0
 800fd9a:	bfba      	itte	lt
 800fd9c:	4249      	neglt	r1, r1
 800fd9e:	232d      	movlt	r3, #45	@ 0x2d
 800fda0:	232b      	movge	r3, #43	@ 0x2b
 800fda2:	2909      	cmp	r1, #9
 800fda4:	7002      	strb	r2, [r0, #0]
 800fda6:	7043      	strb	r3, [r0, #1]
 800fda8:	dd29      	ble.n	800fdfe <__exponent+0x68>
 800fdaa:	f10d 0307 	add.w	r3, sp, #7
 800fdae:	461d      	mov	r5, r3
 800fdb0:	270a      	movs	r7, #10
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	fbb1 f6f7 	udiv	r6, r1, r7
 800fdb8:	fb07 1416 	mls	r4, r7, r6, r1
 800fdbc:	3430      	adds	r4, #48	@ 0x30
 800fdbe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fdc2:	460c      	mov	r4, r1
 800fdc4:	2c63      	cmp	r4, #99	@ 0x63
 800fdc6:	f103 33ff 	add.w	r3, r3, #4294967295
 800fdca:	4631      	mov	r1, r6
 800fdcc:	dcf1      	bgt.n	800fdb2 <__exponent+0x1c>
 800fdce:	3130      	adds	r1, #48	@ 0x30
 800fdd0:	1e94      	subs	r4, r2, #2
 800fdd2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fdd6:	1c41      	adds	r1, r0, #1
 800fdd8:	4623      	mov	r3, r4
 800fdda:	42ab      	cmp	r3, r5
 800fddc:	d30a      	bcc.n	800fdf4 <__exponent+0x5e>
 800fdde:	f10d 0309 	add.w	r3, sp, #9
 800fde2:	1a9b      	subs	r3, r3, r2
 800fde4:	42ac      	cmp	r4, r5
 800fde6:	bf88      	it	hi
 800fde8:	2300      	movhi	r3, #0
 800fdea:	3302      	adds	r3, #2
 800fdec:	4403      	add	r3, r0
 800fdee:	1a18      	subs	r0, r3, r0
 800fdf0:	b003      	add	sp, #12
 800fdf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdf4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fdf8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fdfc:	e7ed      	b.n	800fdda <__exponent+0x44>
 800fdfe:	2330      	movs	r3, #48	@ 0x30
 800fe00:	3130      	adds	r1, #48	@ 0x30
 800fe02:	7083      	strb	r3, [r0, #2]
 800fe04:	70c1      	strb	r1, [r0, #3]
 800fe06:	1d03      	adds	r3, r0, #4
 800fe08:	e7f1      	b.n	800fdee <__exponent+0x58>
	...

0800fe0c <_printf_float>:
 800fe0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe10:	b08d      	sub	sp, #52	@ 0x34
 800fe12:	460c      	mov	r4, r1
 800fe14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fe18:	4616      	mov	r6, r2
 800fe1a:	461f      	mov	r7, r3
 800fe1c:	4605      	mov	r5, r0
 800fe1e:	f000 fd0f 	bl	8010840 <_localeconv_r>
 800fe22:	6803      	ldr	r3, [r0, #0]
 800fe24:	9304      	str	r3, [sp, #16]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7f0 fa22 	bl	8000270 <strlen>
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe30:	f8d8 3000 	ldr.w	r3, [r8]
 800fe34:	9005      	str	r0, [sp, #20]
 800fe36:	3307      	adds	r3, #7
 800fe38:	f023 0307 	bic.w	r3, r3, #7
 800fe3c:	f103 0208 	add.w	r2, r3, #8
 800fe40:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fe44:	f8d4 b000 	ldr.w	fp, [r4]
 800fe48:	f8c8 2000 	str.w	r2, [r8]
 800fe4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fe50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fe54:	9307      	str	r3, [sp, #28]
 800fe56:	f8cd 8018 	str.w	r8, [sp, #24]
 800fe5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fe5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe62:	4b9c      	ldr	r3, [pc, #624]	@ (80100d4 <_printf_float+0x2c8>)
 800fe64:	f04f 32ff 	mov.w	r2, #4294967295
 800fe68:	f7f0 fe60 	bl	8000b2c <__aeabi_dcmpun>
 800fe6c:	bb70      	cbnz	r0, 800fecc <_printf_float+0xc0>
 800fe6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe72:	4b98      	ldr	r3, [pc, #608]	@ (80100d4 <_printf_float+0x2c8>)
 800fe74:	f04f 32ff 	mov.w	r2, #4294967295
 800fe78:	f7f0 fe3a 	bl	8000af0 <__aeabi_dcmple>
 800fe7c:	bb30      	cbnz	r0, 800fecc <_printf_float+0xc0>
 800fe7e:	2200      	movs	r2, #0
 800fe80:	2300      	movs	r3, #0
 800fe82:	4640      	mov	r0, r8
 800fe84:	4649      	mov	r1, r9
 800fe86:	f7f0 fe29 	bl	8000adc <__aeabi_dcmplt>
 800fe8a:	b110      	cbz	r0, 800fe92 <_printf_float+0x86>
 800fe8c:	232d      	movs	r3, #45	@ 0x2d
 800fe8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe92:	4a91      	ldr	r2, [pc, #580]	@ (80100d8 <_printf_float+0x2cc>)
 800fe94:	4b91      	ldr	r3, [pc, #580]	@ (80100dc <_printf_float+0x2d0>)
 800fe96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fe9a:	bf94      	ite	ls
 800fe9c:	4690      	movls	r8, r2
 800fe9e:	4698      	movhi	r8, r3
 800fea0:	2303      	movs	r3, #3
 800fea2:	6123      	str	r3, [r4, #16]
 800fea4:	f02b 0304 	bic.w	r3, fp, #4
 800fea8:	6023      	str	r3, [r4, #0]
 800feaa:	f04f 0900 	mov.w	r9, #0
 800feae:	9700      	str	r7, [sp, #0]
 800feb0:	4633      	mov	r3, r6
 800feb2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800feb4:	4621      	mov	r1, r4
 800feb6:	4628      	mov	r0, r5
 800feb8:	f000 f9d2 	bl	8010260 <_printf_common>
 800febc:	3001      	adds	r0, #1
 800febe:	f040 808d 	bne.w	800ffdc <_printf_float+0x1d0>
 800fec2:	f04f 30ff 	mov.w	r0, #4294967295
 800fec6:	b00d      	add	sp, #52	@ 0x34
 800fec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fecc:	4642      	mov	r2, r8
 800fece:	464b      	mov	r3, r9
 800fed0:	4640      	mov	r0, r8
 800fed2:	4649      	mov	r1, r9
 800fed4:	f7f0 fe2a 	bl	8000b2c <__aeabi_dcmpun>
 800fed8:	b140      	cbz	r0, 800feec <_printf_float+0xe0>
 800feda:	464b      	mov	r3, r9
 800fedc:	2b00      	cmp	r3, #0
 800fede:	bfbc      	itt	lt
 800fee0:	232d      	movlt	r3, #45	@ 0x2d
 800fee2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fee6:	4a7e      	ldr	r2, [pc, #504]	@ (80100e0 <_printf_float+0x2d4>)
 800fee8:	4b7e      	ldr	r3, [pc, #504]	@ (80100e4 <_printf_float+0x2d8>)
 800feea:	e7d4      	b.n	800fe96 <_printf_float+0x8a>
 800feec:	6863      	ldr	r3, [r4, #4]
 800feee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fef2:	9206      	str	r2, [sp, #24]
 800fef4:	1c5a      	adds	r2, r3, #1
 800fef6:	d13b      	bne.n	800ff70 <_printf_float+0x164>
 800fef8:	2306      	movs	r3, #6
 800fefa:	6063      	str	r3, [r4, #4]
 800fefc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ff00:	2300      	movs	r3, #0
 800ff02:	6022      	str	r2, [r4, #0]
 800ff04:	9303      	str	r3, [sp, #12]
 800ff06:	ab0a      	add	r3, sp, #40	@ 0x28
 800ff08:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ff0c:	ab09      	add	r3, sp, #36	@ 0x24
 800ff0e:	9300      	str	r3, [sp, #0]
 800ff10:	6861      	ldr	r1, [r4, #4]
 800ff12:	ec49 8b10 	vmov	d0, r8, r9
 800ff16:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	f7ff fed6 	bl	800fccc <__cvt>
 800ff20:	9b06      	ldr	r3, [sp, #24]
 800ff22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ff24:	2b47      	cmp	r3, #71	@ 0x47
 800ff26:	4680      	mov	r8, r0
 800ff28:	d129      	bne.n	800ff7e <_printf_float+0x172>
 800ff2a:	1cc8      	adds	r0, r1, #3
 800ff2c:	db02      	blt.n	800ff34 <_printf_float+0x128>
 800ff2e:	6863      	ldr	r3, [r4, #4]
 800ff30:	4299      	cmp	r1, r3
 800ff32:	dd41      	ble.n	800ffb8 <_printf_float+0x1ac>
 800ff34:	f1aa 0a02 	sub.w	sl, sl, #2
 800ff38:	fa5f fa8a 	uxtb.w	sl, sl
 800ff3c:	3901      	subs	r1, #1
 800ff3e:	4652      	mov	r2, sl
 800ff40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ff44:	9109      	str	r1, [sp, #36]	@ 0x24
 800ff46:	f7ff ff26 	bl	800fd96 <__exponent>
 800ff4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff4c:	1813      	adds	r3, r2, r0
 800ff4e:	2a01      	cmp	r2, #1
 800ff50:	4681      	mov	r9, r0
 800ff52:	6123      	str	r3, [r4, #16]
 800ff54:	dc02      	bgt.n	800ff5c <_printf_float+0x150>
 800ff56:	6822      	ldr	r2, [r4, #0]
 800ff58:	07d2      	lsls	r2, r2, #31
 800ff5a:	d501      	bpl.n	800ff60 <_printf_float+0x154>
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	6123      	str	r3, [r4, #16]
 800ff60:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d0a2      	beq.n	800feae <_printf_float+0xa2>
 800ff68:	232d      	movs	r3, #45	@ 0x2d
 800ff6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff6e:	e79e      	b.n	800feae <_printf_float+0xa2>
 800ff70:	9a06      	ldr	r2, [sp, #24]
 800ff72:	2a47      	cmp	r2, #71	@ 0x47
 800ff74:	d1c2      	bne.n	800fefc <_printf_float+0xf0>
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1c0      	bne.n	800fefc <_printf_float+0xf0>
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e7bd      	b.n	800fefa <_printf_float+0xee>
 800ff7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ff82:	d9db      	bls.n	800ff3c <_printf_float+0x130>
 800ff84:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ff88:	d118      	bne.n	800ffbc <_printf_float+0x1b0>
 800ff8a:	2900      	cmp	r1, #0
 800ff8c:	6863      	ldr	r3, [r4, #4]
 800ff8e:	dd0b      	ble.n	800ffa8 <_printf_float+0x19c>
 800ff90:	6121      	str	r1, [r4, #16]
 800ff92:	b913      	cbnz	r3, 800ff9a <_printf_float+0x18e>
 800ff94:	6822      	ldr	r2, [r4, #0]
 800ff96:	07d0      	lsls	r0, r2, #31
 800ff98:	d502      	bpl.n	800ffa0 <_printf_float+0x194>
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	440b      	add	r3, r1
 800ff9e:	6123      	str	r3, [r4, #16]
 800ffa0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ffa2:	f04f 0900 	mov.w	r9, #0
 800ffa6:	e7db      	b.n	800ff60 <_printf_float+0x154>
 800ffa8:	b913      	cbnz	r3, 800ffb0 <_printf_float+0x1a4>
 800ffaa:	6822      	ldr	r2, [r4, #0]
 800ffac:	07d2      	lsls	r2, r2, #31
 800ffae:	d501      	bpl.n	800ffb4 <_printf_float+0x1a8>
 800ffb0:	3302      	adds	r3, #2
 800ffb2:	e7f4      	b.n	800ff9e <_printf_float+0x192>
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	e7f2      	b.n	800ff9e <_printf_float+0x192>
 800ffb8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ffbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffbe:	4299      	cmp	r1, r3
 800ffc0:	db05      	blt.n	800ffce <_printf_float+0x1c2>
 800ffc2:	6823      	ldr	r3, [r4, #0]
 800ffc4:	6121      	str	r1, [r4, #16]
 800ffc6:	07d8      	lsls	r0, r3, #31
 800ffc8:	d5ea      	bpl.n	800ffa0 <_printf_float+0x194>
 800ffca:	1c4b      	adds	r3, r1, #1
 800ffcc:	e7e7      	b.n	800ff9e <_printf_float+0x192>
 800ffce:	2900      	cmp	r1, #0
 800ffd0:	bfd4      	ite	le
 800ffd2:	f1c1 0202 	rsble	r2, r1, #2
 800ffd6:	2201      	movgt	r2, #1
 800ffd8:	4413      	add	r3, r2
 800ffda:	e7e0      	b.n	800ff9e <_printf_float+0x192>
 800ffdc:	6823      	ldr	r3, [r4, #0]
 800ffde:	055a      	lsls	r2, r3, #21
 800ffe0:	d407      	bmi.n	800fff2 <_printf_float+0x1e6>
 800ffe2:	6923      	ldr	r3, [r4, #16]
 800ffe4:	4642      	mov	r2, r8
 800ffe6:	4631      	mov	r1, r6
 800ffe8:	4628      	mov	r0, r5
 800ffea:	47b8      	blx	r7
 800ffec:	3001      	adds	r0, #1
 800ffee:	d12b      	bne.n	8010048 <_printf_float+0x23c>
 800fff0:	e767      	b.n	800fec2 <_printf_float+0xb6>
 800fff2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fff6:	f240 80dd 	bls.w	80101b4 <_printf_float+0x3a8>
 800fffa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fffe:	2200      	movs	r2, #0
 8010000:	2300      	movs	r3, #0
 8010002:	f7f0 fd61 	bl	8000ac8 <__aeabi_dcmpeq>
 8010006:	2800      	cmp	r0, #0
 8010008:	d033      	beq.n	8010072 <_printf_float+0x266>
 801000a:	4a37      	ldr	r2, [pc, #220]	@ (80100e8 <_printf_float+0x2dc>)
 801000c:	2301      	movs	r3, #1
 801000e:	4631      	mov	r1, r6
 8010010:	4628      	mov	r0, r5
 8010012:	47b8      	blx	r7
 8010014:	3001      	adds	r0, #1
 8010016:	f43f af54 	beq.w	800fec2 <_printf_float+0xb6>
 801001a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801001e:	4543      	cmp	r3, r8
 8010020:	db02      	blt.n	8010028 <_printf_float+0x21c>
 8010022:	6823      	ldr	r3, [r4, #0]
 8010024:	07d8      	lsls	r0, r3, #31
 8010026:	d50f      	bpl.n	8010048 <_printf_float+0x23c>
 8010028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801002c:	4631      	mov	r1, r6
 801002e:	4628      	mov	r0, r5
 8010030:	47b8      	blx	r7
 8010032:	3001      	adds	r0, #1
 8010034:	f43f af45 	beq.w	800fec2 <_printf_float+0xb6>
 8010038:	f04f 0900 	mov.w	r9, #0
 801003c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010040:	f104 0a1a 	add.w	sl, r4, #26
 8010044:	45c8      	cmp	r8, r9
 8010046:	dc09      	bgt.n	801005c <_printf_float+0x250>
 8010048:	6823      	ldr	r3, [r4, #0]
 801004a:	079b      	lsls	r3, r3, #30
 801004c:	f100 8103 	bmi.w	8010256 <_printf_float+0x44a>
 8010050:	68e0      	ldr	r0, [r4, #12]
 8010052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010054:	4298      	cmp	r0, r3
 8010056:	bfb8      	it	lt
 8010058:	4618      	movlt	r0, r3
 801005a:	e734      	b.n	800fec6 <_printf_float+0xba>
 801005c:	2301      	movs	r3, #1
 801005e:	4652      	mov	r2, sl
 8010060:	4631      	mov	r1, r6
 8010062:	4628      	mov	r0, r5
 8010064:	47b8      	blx	r7
 8010066:	3001      	adds	r0, #1
 8010068:	f43f af2b 	beq.w	800fec2 <_printf_float+0xb6>
 801006c:	f109 0901 	add.w	r9, r9, #1
 8010070:	e7e8      	b.n	8010044 <_printf_float+0x238>
 8010072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010074:	2b00      	cmp	r3, #0
 8010076:	dc39      	bgt.n	80100ec <_printf_float+0x2e0>
 8010078:	4a1b      	ldr	r2, [pc, #108]	@ (80100e8 <_printf_float+0x2dc>)
 801007a:	2301      	movs	r3, #1
 801007c:	4631      	mov	r1, r6
 801007e:	4628      	mov	r0, r5
 8010080:	47b8      	blx	r7
 8010082:	3001      	adds	r0, #1
 8010084:	f43f af1d 	beq.w	800fec2 <_printf_float+0xb6>
 8010088:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801008c:	ea59 0303 	orrs.w	r3, r9, r3
 8010090:	d102      	bne.n	8010098 <_printf_float+0x28c>
 8010092:	6823      	ldr	r3, [r4, #0]
 8010094:	07d9      	lsls	r1, r3, #31
 8010096:	d5d7      	bpl.n	8010048 <_printf_float+0x23c>
 8010098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801009c:	4631      	mov	r1, r6
 801009e:	4628      	mov	r0, r5
 80100a0:	47b8      	blx	r7
 80100a2:	3001      	adds	r0, #1
 80100a4:	f43f af0d 	beq.w	800fec2 <_printf_float+0xb6>
 80100a8:	f04f 0a00 	mov.w	sl, #0
 80100ac:	f104 0b1a 	add.w	fp, r4, #26
 80100b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100b2:	425b      	negs	r3, r3
 80100b4:	4553      	cmp	r3, sl
 80100b6:	dc01      	bgt.n	80100bc <_printf_float+0x2b0>
 80100b8:	464b      	mov	r3, r9
 80100ba:	e793      	b.n	800ffe4 <_printf_float+0x1d8>
 80100bc:	2301      	movs	r3, #1
 80100be:	465a      	mov	r2, fp
 80100c0:	4631      	mov	r1, r6
 80100c2:	4628      	mov	r0, r5
 80100c4:	47b8      	blx	r7
 80100c6:	3001      	adds	r0, #1
 80100c8:	f43f aefb 	beq.w	800fec2 <_printf_float+0xb6>
 80100cc:	f10a 0a01 	add.w	sl, sl, #1
 80100d0:	e7ee      	b.n	80100b0 <_printf_float+0x2a4>
 80100d2:	bf00      	nop
 80100d4:	7fefffff 	.word	0x7fefffff
 80100d8:	080146c8 	.word	0x080146c8
 80100dc:	080146cc 	.word	0x080146cc
 80100e0:	080146d0 	.word	0x080146d0
 80100e4:	080146d4 	.word	0x080146d4
 80100e8:	080146d8 	.word	0x080146d8
 80100ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80100ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80100f2:	4553      	cmp	r3, sl
 80100f4:	bfa8      	it	ge
 80100f6:	4653      	movge	r3, sl
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	4699      	mov	r9, r3
 80100fc:	dc36      	bgt.n	801016c <_printf_float+0x360>
 80100fe:	f04f 0b00 	mov.w	fp, #0
 8010102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010106:	f104 021a 	add.w	r2, r4, #26
 801010a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801010c:	9306      	str	r3, [sp, #24]
 801010e:	eba3 0309 	sub.w	r3, r3, r9
 8010112:	455b      	cmp	r3, fp
 8010114:	dc31      	bgt.n	801017a <_printf_float+0x36e>
 8010116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010118:	459a      	cmp	sl, r3
 801011a:	dc3a      	bgt.n	8010192 <_printf_float+0x386>
 801011c:	6823      	ldr	r3, [r4, #0]
 801011e:	07da      	lsls	r2, r3, #31
 8010120:	d437      	bmi.n	8010192 <_printf_float+0x386>
 8010122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010124:	ebaa 0903 	sub.w	r9, sl, r3
 8010128:	9b06      	ldr	r3, [sp, #24]
 801012a:	ebaa 0303 	sub.w	r3, sl, r3
 801012e:	4599      	cmp	r9, r3
 8010130:	bfa8      	it	ge
 8010132:	4699      	movge	r9, r3
 8010134:	f1b9 0f00 	cmp.w	r9, #0
 8010138:	dc33      	bgt.n	80101a2 <_printf_float+0x396>
 801013a:	f04f 0800 	mov.w	r8, #0
 801013e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010142:	f104 0b1a 	add.w	fp, r4, #26
 8010146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010148:	ebaa 0303 	sub.w	r3, sl, r3
 801014c:	eba3 0309 	sub.w	r3, r3, r9
 8010150:	4543      	cmp	r3, r8
 8010152:	f77f af79 	ble.w	8010048 <_printf_float+0x23c>
 8010156:	2301      	movs	r3, #1
 8010158:	465a      	mov	r2, fp
 801015a:	4631      	mov	r1, r6
 801015c:	4628      	mov	r0, r5
 801015e:	47b8      	blx	r7
 8010160:	3001      	adds	r0, #1
 8010162:	f43f aeae 	beq.w	800fec2 <_printf_float+0xb6>
 8010166:	f108 0801 	add.w	r8, r8, #1
 801016a:	e7ec      	b.n	8010146 <_printf_float+0x33a>
 801016c:	4642      	mov	r2, r8
 801016e:	4631      	mov	r1, r6
 8010170:	4628      	mov	r0, r5
 8010172:	47b8      	blx	r7
 8010174:	3001      	adds	r0, #1
 8010176:	d1c2      	bne.n	80100fe <_printf_float+0x2f2>
 8010178:	e6a3      	b.n	800fec2 <_printf_float+0xb6>
 801017a:	2301      	movs	r3, #1
 801017c:	4631      	mov	r1, r6
 801017e:	4628      	mov	r0, r5
 8010180:	9206      	str	r2, [sp, #24]
 8010182:	47b8      	blx	r7
 8010184:	3001      	adds	r0, #1
 8010186:	f43f ae9c 	beq.w	800fec2 <_printf_float+0xb6>
 801018a:	9a06      	ldr	r2, [sp, #24]
 801018c:	f10b 0b01 	add.w	fp, fp, #1
 8010190:	e7bb      	b.n	801010a <_printf_float+0x2fe>
 8010192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010196:	4631      	mov	r1, r6
 8010198:	4628      	mov	r0, r5
 801019a:	47b8      	blx	r7
 801019c:	3001      	adds	r0, #1
 801019e:	d1c0      	bne.n	8010122 <_printf_float+0x316>
 80101a0:	e68f      	b.n	800fec2 <_printf_float+0xb6>
 80101a2:	9a06      	ldr	r2, [sp, #24]
 80101a4:	464b      	mov	r3, r9
 80101a6:	4442      	add	r2, r8
 80101a8:	4631      	mov	r1, r6
 80101aa:	4628      	mov	r0, r5
 80101ac:	47b8      	blx	r7
 80101ae:	3001      	adds	r0, #1
 80101b0:	d1c3      	bne.n	801013a <_printf_float+0x32e>
 80101b2:	e686      	b.n	800fec2 <_printf_float+0xb6>
 80101b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80101b8:	f1ba 0f01 	cmp.w	sl, #1
 80101bc:	dc01      	bgt.n	80101c2 <_printf_float+0x3b6>
 80101be:	07db      	lsls	r3, r3, #31
 80101c0:	d536      	bpl.n	8010230 <_printf_float+0x424>
 80101c2:	2301      	movs	r3, #1
 80101c4:	4642      	mov	r2, r8
 80101c6:	4631      	mov	r1, r6
 80101c8:	4628      	mov	r0, r5
 80101ca:	47b8      	blx	r7
 80101cc:	3001      	adds	r0, #1
 80101ce:	f43f ae78 	beq.w	800fec2 <_printf_float+0xb6>
 80101d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101d6:	4631      	mov	r1, r6
 80101d8:	4628      	mov	r0, r5
 80101da:	47b8      	blx	r7
 80101dc:	3001      	adds	r0, #1
 80101de:	f43f ae70 	beq.w	800fec2 <_printf_float+0xb6>
 80101e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80101e6:	2200      	movs	r2, #0
 80101e8:	2300      	movs	r3, #0
 80101ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80101ee:	f7f0 fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80101f2:	b9c0      	cbnz	r0, 8010226 <_printf_float+0x41a>
 80101f4:	4653      	mov	r3, sl
 80101f6:	f108 0201 	add.w	r2, r8, #1
 80101fa:	4631      	mov	r1, r6
 80101fc:	4628      	mov	r0, r5
 80101fe:	47b8      	blx	r7
 8010200:	3001      	adds	r0, #1
 8010202:	d10c      	bne.n	801021e <_printf_float+0x412>
 8010204:	e65d      	b.n	800fec2 <_printf_float+0xb6>
 8010206:	2301      	movs	r3, #1
 8010208:	465a      	mov	r2, fp
 801020a:	4631      	mov	r1, r6
 801020c:	4628      	mov	r0, r5
 801020e:	47b8      	blx	r7
 8010210:	3001      	adds	r0, #1
 8010212:	f43f ae56 	beq.w	800fec2 <_printf_float+0xb6>
 8010216:	f108 0801 	add.w	r8, r8, #1
 801021a:	45d0      	cmp	r8, sl
 801021c:	dbf3      	blt.n	8010206 <_printf_float+0x3fa>
 801021e:	464b      	mov	r3, r9
 8010220:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010224:	e6df      	b.n	800ffe6 <_printf_float+0x1da>
 8010226:	f04f 0800 	mov.w	r8, #0
 801022a:	f104 0b1a 	add.w	fp, r4, #26
 801022e:	e7f4      	b.n	801021a <_printf_float+0x40e>
 8010230:	2301      	movs	r3, #1
 8010232:	4642      	mov	r2, r8
 8010234:	e7e1      	b.n	80101fa <_printf_float+0x3ee>
 8010236:	2301      	movs	r3, #1
 8010238:	464a      	mov	r2, r9
 801023a:	4631      	mov	r1, r6
 801023c:	4628      	mov	r0, r5
 801023e:	47b8      	blx	r7
 8010240:	3001      	adds	r0, #1
 8010242:	f43f ae3e 	beq.w	800fec2 <_printf_float+0xb6>
 8010246:	f108 0801 	add.w	r8, r8, #1
 801024a:	68e3      	ldr	r3, [r4, #12]
 801024c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801024e:	1a5b      	subs	r3, r3, r1
 8010250:	4543      	cmp	r3, r8
 8010252:	dcf0      	bgt.n	8010236 <_printf_float+0x42a>
 8010254:	e6fc      	b.n	8010050 <_printf_float+0x244>
 8010256:	f04f 0800 	mov.w	r8, #0
 801025a:	f104 0919 	add.w	r9, r4, #25
 801025e:	e7f4      	b.n	801024a <_printf_float+0x43e>

08010260 <_printf_common>:
 8010260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010264:	4616      	mov	r6, r2
 8010266:	4698      	mov	r8, r3
 8010268:	688a      	ldr	r2, [r1, #8]
 801026a:	690b      	ldr	r3, [r1, #16]
 801026c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010270:	4293      	cmp	r3, r2
 8010272:	bfb8      	it	lt
 8010274:	4613      	movlt	r3, r2
 8010276:	6033      	str	r3, [r6, #0]
 8010278:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801027c:	4607      	mov	r7, r0
 801027e:	460c      	mov	r4, r1
 8010280:	b10a      	cbz	r2, 8010286 <_printf_common+0x26>
 8010282:	3301      	adds	r3, #1
 8010284:	6033      	str	r3, [r6, #0]
 8010286:	6823      	ldr	r3, [r4, #0]
 8010288:	0699      	lsls	r1, r3, #26
 801028a:	bf42      	ittt	mi
 801028c:	6833      	ldrmi	r3, [r6, #0]
 801028e:	3302      	addmi	r3, #2
 8010290:	6033      	strmi	r3, [r6, #0]
 8010292:	6825      	ldr	r5, [r4, #0]
 8010294:	f015 0506 	ands.w	r5, r5, #6
 8010298:	d106      	bne.n	80102a8 <_printf_common+0x48>
 801029a:	f104 0a19 	add.w	sl, r4, #25
 801029e:	68e3      	ldr	r3, [r4, #12]
 80102a0:	6832      	ldr	r2, [r6, #0]
 80102a2:	1a9b      	subs	r3, r3, r2
 80102a4:	42ab      	cmp	r3, r5
 80102a6:	dc26      	bgt.n	80102f6 <_printf_common+0x96>
 80102a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80102ac:	6822      	ldr	r2, [r4, #0]
 80102ae:	3b00      	subs	r3, #0
 80102b0:	bf18      	it	ne
 80102b2:	2301      	movne	r3, #1
 80102b4:	0692      	lsls	r2, r2, #26
 80102b6:	d42b      	bmi.n	8010310 <_printf_common+0xb0>
 80102b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80102bc:	4641      	mov	r1, r8
 80102be:	4638      	mov	r0, r7
 80102c0:	47c8      	blx	r9
 80102c2:	3001      	adds	r0, #1
 80102c4:	d01e      	beq.n	8010304 <_printf_common+0xa4>
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	6922      	ldr	r2, [r4, #16]
 80102ca:	f003 0306 	and.w	r3, r3, #6
 80102ce:	2b04      	cmp	r3, #4
 80102d0:	bf02      	ittt	eq
 80102d2:	68e5      	ldreq	r5, [r4, #12]
 80102d4:	6833      	ldreq	r3, [r6, #0]
 80102d6:	1aed      	subeq	r5, r5, r3
 80102d8:	68a3      	ldr	r3, [r4, #8]
 80102da:	bf0c      	ite	eq
 80102dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102e0:	2500      	movne	r5, #0
 80102e2:	4293      	cmp	r3, r2
 80102e4:	bfc4      	itt	gt
 80102e6:	1a9b      	subgt	r3, r3, r2
 80102e8:	18ed      	addgt	r5, r5, r3
 80102ea:	2600      	movs	r6, #0
 80102ec:	341a      	adds	r4, #26
 80102ee:	42b5      	cmp	r5, r6
 80102f0:	d11a      	bne.n	8010328 <_printf_common+0xc8>
 80102f2:	2000      	movs	r0, #0
 80102f4:	e008      	b.n	8010308 <_printf_common+0xa8>
 80102f6:	2301      	movs	r3, #1
 80102f8:	4652      	mov	r2, sl
 80102fa:	4641      	mov	r1, r8
 80102fc:	4638      	mov	r0, r7
 80102fe:	47c8      	blx	r9
 8010300:	3001      	adds	r0, #1
 8010302:	d103      	bne.n	801030c <_printf_common+0xac>
 8010304:	f04f 30ff 	mov.w	r0, #4294967295
 8010308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801030c:	3501      	adds	r5, #1
 801030e:	e7c6      	b.n	801029e <_printf_common+0x3e>
 8010310:	18e1      	adds	r1, r4, r3
 8010312:	1c5a      	adds	r2, r3, #1
 8010314:	2030      	movs	r0, #48	@ 0x30
 8010316:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801031a:	4422      	add	r2, r4
 801031c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010320:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010324:	3302      	adds	r3, #2
 8010326:	e7c7      	b.n	80102b8 <_printf_common+0x58>
 8010328:	2301      	movs	r3, #1
 801032a:	4622      	mov	r2, r4
 801032c:	4641      	mov	r1, r8
 801032e:	4638      	mov	r0, r7
 8010330:	47c8      	blx	r9
 8010332:	3001      	adds	r0, #1
 8010334:	d0e6      	beq.n	8010304 <_printf_common+0xa4>
 8010336:	3601      	adds	r6, #1
 8010338:	e7d9      	b.n	80102ee <_printf_common+0x8e>
	...

0801033c <_printf_i>:
 801033c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010340:	7e0f      	ldrb	r7, [r1, #24]
 8010342:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010344:	2f78      	cmp	r7, #120	@ 0x78
 8010346:	4691      	mov	r9, r2
 8010348:	4680      	mov	r8, r0
 801034a:	460c      	mov	r4, r1
 801034c:	469a      	mov	sl, r3
 801034e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010352:	d807      	bhi.n	8010364 <_printf_i+0x28>
 8010354:	2f62      	cmp	r7, #98	@ 0x62
 8010356:	d80a      	bhi.n	801036e <_printf_i+0x32>
 8010358:	2f00      	cmp	r7, #0
 801035a:	f000 80d2 	beq.w	8010502 <_printf_i+0x1c6>
 801035e:	2f58      	cmp	r7, #88	@ 0x58
 8010360:	f000 80b9 	beq.w	80104d6 <_printf_i+0x19a>
 8010364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010368:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801036c:	e03a      	b.n	80103e4 <_printf_i+0xa8>
 801036e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010372:	2b15      	cmp	r3, #21
 8010374:	d8f6      	bhi.n	8010364 <_printf_i+0x28>
 8010376:	a101      	add	r1, pc, #4	@ (adr r1, 801037c <_printf_i+0x40>)
 8010378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801037c:	080103d5 	.word	0x080103d5
 8010380:	080103e9 	.word	0x080103e9
 8010384:	08010365 	.word	0x08010365
 8010388:	08010365 	.word	0x08010365
 801038c:	08010365 	.word	0x08010365
 8010390:	08010365 	.word	0x08010365
 8010394:	080103e9 	.word	0x080103e9
 8010398:	08010365 	.word	0x08010365
 801039c:	08010365 	.word	0x08010365
 80103a0:	08010365 	.word	0x08010365
 80103a4:	08010365 	.word	0x08010365
 80103a8:	080104e9 	.word	0x080104e9
 80103ac:	08010413 	.word	0x08010413
 80103b0:	080104a3 	.word	0x080104a3
 80103b4:	08010365 	.word	0x08010365
 80103b8:	08010365 	.word	0x08010365
 80103bc:	0801050b 	.word	0x0801050b
 80103c0:	08010365 	.word	0x08010365
 80103c4:	08010413 	.word	0x08010413
 80103c8:	08010365 	.word	0x08010365
 80103cc:	08010365 	.word	0x08010365
 80103d0:	080104ab 	.word	0x080104ab
 80103d4:	6833      	ldr	r3, [r6, #0]
 80103d6:	1d1a      	adds	r2, r3, #4
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	6032      	str	r2, [r6, #0]
 80103dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80103e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80103e4:	2301      	movs	r3, #1
 80103e6:	e09d      	b.n	8010524 <_printf_i+0x1e8>
 80103e8:	6833      	ldr	r3, [r6, #0]
 80103ea:	6820      	ldr	r0, [r4, #0]
 80103ec:	1d19      	adds	r1, r3, #4
 80103ee:	6031      	str	r1, [r6, #0]
 80103f0:	0606      	lsls	r6, r0, #24
 80103f2:	d501      	bpl.n	80103f8 <_printf_i+0xbc>
 80103f4:	681d      	ldr	r5, [r3, #0]
 80103f6:	e003      	b.n	8010400 <_printf_i+0xc4>
 80103f8:	0645      	lsls	r5, r0, #25
 80103fa:	d5fb      	bpl.n	80103f4 <_printf_i+0xb8>
 80103fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010400:	2d00      	cmp	r5, #0
 8010402:	da03      	bge.n	801040c <_printf_i+0xd0>
 8010404:	232d      	movs	r3, #45	@ 0x2d
 8010406:	426d      	negs	r5, r5
 8010408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801040c:	4859      	ldr	r0, [pc, #356]	@ (8010574 <_printf_i+0x238>)
 801040e:	230a      	movs	r3, #10
 8010410:	e011      	b.n	8010436 <_printf_i+0xfa>
 8010412:	6821      	ldr	r1, [r4, #0]
 8010414:	6833      	ldr	r3, [r6, #0]
 8010416:	0608      	lsls	r0, r1, #24
 8010418:	f853 5b04 	ldr.w	r5, [r3], #4
 801041c:	d402      	bmi.n	8010424 <_printf_i+0xe8>
 801041e:	0649      	lsls	r1, r1, #25
 8010420:	bf48      	it	mi
 8010422:	b2ad      	uxthmi	r5, r5
 8010424:	2f6f      	cmp	r7, #111	@ 0x6f
 8010426:	4853      	ldr	r0, [pc, #332]	@ (8010574 <_printf_i+0x238>)
 8010428:	6033      	str	r3, [r6, #0]
 801042a:	bf14      	ite	ne
 801042c:	230a      	movne	r3, #10
 801042e:	2308      	moveq	r3, #8
 8010430:	2100      	movs	r1, #0
 8010432:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010436:	6866      	ldr	r6, [r4, #4]
 8010438:	60a6      	str	r6, [r4, #8]
 801043a:	2e00      	cmp	r6, #0
 801043c:	bfa2      	ittt	ge
 801043e:	6821      	ldrge	r1, [r4, #0]
 8010440:	f021 0104 	bicge.w	r1, r1, #4
 8010444:	6021      	strge	r1, [r4, #0]
 8010446:	b90d      	cbnz	r5, 801044c <_printf_i+0x110>
 8010448:	2e00      	cmp	r6, #0
 801044a:	d04b      	beq.n	80104e4 <_printf_i+0x1a8>
 801044c:	4616      	mov	r6, r2
 801044e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010452:	fb03 5711 	mls	r7, r3, r1, r5
 8010456:	5dc7      	ldrb	r7, [r0, r7]
 8010458:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801045c:	462f      	mov	r7, r5
 801045e:	42bb      	cmp	r3, r7
 8010460:	460d      	mov	r5, r1
 8010462:	d9f4      	bls.n	801044e <_printf_i+0x112>
 8010464:	2b08      	cmp	r3, #8
 8010466:	d10b      	bne.n	8010480 <_printf_i+0x144>
 8010468:	6823      	ldr	r3, [r4, #0]
 801046a:	07df      	lsls	r7, r3, #31
 801046c:	d508      	bpl.n	8010480 <_printf_i+0x144>
 801046e:	6923      	ldr	r3, [r4, #16]
 8010470:	6861      	ldr	r1, [r4, #4]
 8010472:	4299      	cmp	r1, r3
 8010474:	bfde      	ittt	le
 8010476:	2330      	movle	r3, #48	@ 0x30
 8010478:	f806 3c01 	strble.w	r3, [r6, #-1]
 801047c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010480:	1b92      	subs	r2, r2, r6
 8010482:	6122      	str	r2, [r4, #16]
 8010484:	f8cd a000 	str.w	sl, [sp]
 8010488:	464b      	mov	r3, r9
 801048a:	aa03      	add	r2, sp, #12
 801048c:	4621      	mov	r1, r4
 801048e:	4640      	mov	r0, r8
 8010490:	f7ff fee6 	bl	8010260 <_printf_common>
 8010494:	3001      	adds	r0, #1
 8010496:	d14a      	bne.n	801052e <_printf_i+0x1f2>
 8010498:	f04f 30ff 	mov.w	r0, #4294967295
 801049c:	b004      	add	sp, #16
 801049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104a2:	6823      	ldr	r3, [r4, #0]
 80104a4:	f043 0320 	orr.w	r3, r3, #32
 80104a8:	6023      	str	r3, [r4, #0]
 80104aa:	4833      	ldr	r0, [pc, #204]	@ (8010578 <_printf_i+0x23c>)
 80104ac:	2778      	movs	r7, #120	@ 0x78
 80104ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80104b2:	6823      	ldr	r3, [r4, #0]
 80104b4:	6831      	ldr	r1, [r6, #0]
 80104b6:	061f      	lsls	r7, r3, #24
 80104b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80104bc:	d402      	bmi.n	80104c4 <_printf_i+0x188>
 80104be:	065f      	lsls	r7, r3, #25
 80104c0:	bf48      	it	mi
 80104c2:	b2ad      	uxthmi	r5, r5
 80104c4:	6031      	str	r1, [r6, #0]
 80104c6:	07d9      	lsls	r1, r3, #31
 80104c8:	bf44      	itt	mi
 80104ca:	f043 0320 	orrmi.w	r3, r3, #32
 80104ce:	6023      	strmi	r3, [r4, #0]
 80104d0:	b11d      	cbz	r5, 80104da <_printf_i+0x19e>
 80104d2:	2310      	movs	r3, #16
 80104d4:	e7ac      	b.n	8010430 <_printf_i+0xf4>
 80104d6:	4827      	ldr	r0, [pc, #156]	@ (8010574 <_printf_i+0x238>)
 80104d8:	e7e9      	b.n	80104ae <_printf_i+0x172>
 80104da:	6823      	ldr	r3, [r4, #0]
 80104dc:	f023 0320 	bic.w	r3, r3, #32
 80104e0:	6023      	str	r3, [r4, #0]
 80104e2:	e7f6      	b.n	80104d2 <_printf_i+0x196>
 80104e4:	4616      	mov	r6, r2
 80104e6:	e7bd      	b.n	8010464 <_printf_i+0x128>
 80104e8:	6833      	ldr	r3, [r6, #0]
 80104ea:	6825      	ldr	r5, [r4, #0]
 80104ec:	6961      	ldr	r1, [r4, #20]
 80104ee:	1d18      	adds	r0, r3, #4
 80104f0:	6030      	str	r0, [r6, #0]
 80104f2:	062e      	lsls	r6, r5, #24
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	d501      	bpl.n	80104fc <_printf_i+0x1c0>
 80104f8:	6019      	str	r1, [r3, #0]
 80104fa:	e002      	b.n	8010502 <_printf_i+0x1c6>
 80104fc:	0668      	lsls	r0, r5, #25
 80104fe:	d5fb      	bpl.n	80104f8 <_printf_i+0x1bc>
 8010500:	8019      	strh	r1, [r3, #0]
 8010502:	2300      	movs	r3, #0
 8010504:	6123      	str	r3, [r4, #16]
 8010506:	4616      	mov	r6, r2
 8010508:	e7bc      	b.n	8010484 <_printf_i+0x148>
 801050a:	6833      	ldr	r3, [r6, #0]
 801050c:	1d1a      	adds	r2, r3, #4
 801050e:	6032      	str	r2, [r6, #0]
 8010510:	681e      	ldr	r6, [r3, #0]
 8010512:	6862      	ldr	r2, [r4, #4]
 8010514:	2100      	movs	r1, #0
 8010516:	4630      	mov	r0, r6
 8010518:	f7ef fe5a 	bl	80001d0 <memchr>
 801051c:	b108      	cbz	r0, 8010522 <_printf_i+0x1e6>
 801051e:	1b80      	subs	r0, r0, r6
 8010520:	6060      	str	r0, [r4, #4]
 8010522:	6863      	ldr	r3, [r4, #4]
 8010524:	6123      	str	r3, [r4, #16]
 8010526:	2300      	movs	r3, #0
 8010528:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801052c:	e7aa      	b.n	8010484 <_printf_i+0x148>
 801052e:	6923      	ldr	r3, [r4, #16]
 8010530:	4632      	mov	r2, r6
 8010532:	4649      	mov	r1, r9
 8010534:	4640      	mov	r0, r8
 8010536:	47d0      	blx	sl
 8010538:	3001      	adds	r0, #1
 801053a:	d0ad      	beq.n	8010498 <_printf_i+0x15c>
 801053c:	6823      	ldr	r3, [r4, #0]
 801053e:	079b      	lsls	r3, r3, #30
 8010540:	d413      	bmi.n	801056a <_printf_i+0x22e>
 8010542:	68e0      	ldr	r0, [r4, #12]
 8010544:	9b03      	ldr	r3, [sp, #12]
 8010546:	4298      	cmp	r0, r3
 8010548:	bfb8      	it	lt
 801054a:	4618      	movlt	r0, r3
 801054c:	e7a6      	b.n	801049c <_printf_i+0x160>
 801054e:	2301      	movs	r3, #1
 8010550:	4632      	mov	r2, r6
 8010552:	4649      	mov	r1, r9
 8010554:	4640      	mov	r0, r8
 8010556:	47d0      	blx	sl
 8010558:	3001      	adds	r0, #1
 801055a:	d09d      	beq.n	8010498 <_printf_i+0x15c>
 801055c:	3501      	adds	r5, #1
 801055e:	68e3      	ldr	r3, [r4, #12]
 8010560:	9903      	ldr	r1, [sp, #12]
 8010562:	1a5b      	subs	r3, r3, r1
 8010564:	42ab      	cmp	r3, r5
 8010566:	dcf2      	bgt.n	801054e <_printf_i+0x212>
 8010568:	e7eb      	b.n	8010542 <_printf_i+0x206>
 801056a:	2500      	movs	r5, #0
 801056c:	f104 0619 	add.w	r6, r4, #25
 8010570:	e7f5      	b.n	801055e <_printf_i+0x222>
 8010572:	bf00      	nop
 8010574:	080146da 	.word	0x080146da
 8010578:	080146eb 	.word	0x080146eb

0801057c <std>:
 801057c:	2300      	movs	r3, #0
 801057e:	b510      	push	{r4, lr}
 8010580:	4604      	mov	r4, r0
 8010582:	e9c0 3300 	strd	r3, r3, [r0]
 8010586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801058a:	6083      	str	r3, [r0, #8]
 801058c:	8181      	strh	r1, [r0, #12]
 801058e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010590:	81c2      	strh	r2, [r0, #14]
 8010592:	6183      	str	r3, [r0, #24]
 8010594:	4619      	mov	r1, r3
 8010596:	2208      	movs	r2, #8
 8010598:	305c      	adds	r0, #92	@ 0x5c
 801059a:	f000 f948 	bl	801082e <memset>
 801059e:	4b0d      	ldr	r3, [pc, #52]	@ (80105d4 <std+0x58>)
 80105a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80105a2:	4b0d      	ldr	r3, [pc, #52]	@ (80105d8 <std+0x5c>)
 80105a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80105a6:	4b0d      	ldr	r3, [pc, #52]	@ (80105dc <std+0x60>)
 80105a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80105aa:	4b0d      	ldr	r3, [pc, #52]	@ (80105e0 <std+0x64>)
 80105ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80105ae:	4b0d      	ldr	r3, [pc, #52]	@ (80105e4 <std+0x68>)
 80105b0:	6224      	str	r4, [r4, #32]
 80105b2:	429c      	cmp	r4, r3
 80105b4:	d006      	beq.n	80105c4 <std+0x48>
 80105b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80105ba:	4294      	cmp	r4, r2
 80105bc:	d002      	beq.n	80105c4 <std+0x48>
 80105be:	33d0      	adds	r3, #208	@ 0xd0
 80105c0:	429c      	cmp	r4, r3
 80105c2:	d105      	bne.n	80105d0 <std+0x54>
 80105c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80105c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105cc:	f000 b9ac 	b.w	8010928 <__retarget_lock_init_recursive>
 80105d0:	bd10      	pop	{r4, pc}
 80105d2:	bf00      	nop
 80105d4:	080107a9 	.word	0x080107a9
 80105d8:	080107cb 	.word	0x080107cb
 80105dc:	08010803 	.word	0x08010803
 80105e0:	08010827 	.word	0x08010827
 80105e4:	2000555c 	.word	0x2000555c

080105e8 <stdio_exit_handler>:
 80105e8:	4a02      	ldr	r2, [pc, #8]	@ (80105f4 <stdio_exit_handler+0xc>)
 80105ea:	4903      	ldr	r1, [pc, #12]	@ (80105f8 <stdio_exit_handler+0x10>)
 80105ec:	4803      	ldr	r0, [pc, #12]	@ (80105fc <stdio_exit_handler+0x14>)
 80105ee:	f000 b869 	b.w	80106c4 <_fwalk_sglue>
 80105f2:	bf00      	nop
 80105f4:	20000170 	.word	0x20000170
 80105f8:	080122a5 	.word	0x080122a5
 80105fc:	20000180 	.word	0x20000180

08010600 <cleanup_stdio>:
 8010600:	6841      	ldr	r1, [r0, #4]
 8010602:	4b0c      	ldr	r3, [pc, #48]	@ (8010634 <cleanup_stdio+0x34>)
 8010604:	4299      	cmp	r1, r3
 8010606:	b510      	push	{r4, lr}
 8010608:	4604      	mov	r4, r0
 801060a:	d001      	beq.n	8010610 <cleanup_stdio+0x10>
 801060c:	f001 fe4a 	bl	80122a4 <_fflush_r>
 8010610:	68a1      	ldr	r1, [r4, #8]
 8010612:	4b09      	ldr	r3, [pc, #36]	@ (8010638 <cleanup_stdio+0x38>)
 8010614:	4299      	cmp	r1, r3
 8010616:	d002      	beq.n	801061e <cleanup_stdio+0x1e>
 8010618:	4620      	mov	r0, r4
 801061a:	f001 fe43 	bl	80122a4 <_fflush_r>
 801061e:	68e1      	ldr	r1, [r4, #12]
 8010620:	4b06      	ldr	r3, [pc, #24]	@ (801063c <cleanup_stdio+0x3c>)
 8010622:	4299      	cmp	r1, r3
 8010624:	d004      	beq.n	8010630 <cleanup_stdio+0x30>
 8010626:	4620      	mov	r0, r4
 8010628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801062c:	f001 be3a 	b.w	80122a4 <_fflush_r>
 8010630:	bd10      	pop	{r4, pc}
 8010632:	bf00      	nop
 8010634:	2000555c 	.word	0x2000555c
 8010638:	200055c4 	.word	0x200055c4
 801063c:	2000562c 	.word	0x2000562c

08010640 <global_stdio_init.part.0>:
 8010640:	b510      	push	{r4, lr}
 8010642:	4b0b      	ldr	r3, [pc, #44]	@ (8010670 <global_stdio_init.part.0+0x30>)
 8010644:	4c0b      	ldr	r4, [pc, #44]	@ (8010674 <global_stdio_init.part.0+0x34>)
 8010646:	4a0c      	ldr	r2, [pc, #48]	@ (8010678 <global_stdio_init.part.0+0x38>)
 8010648:	601a      	str	r2, [r3, #0]
 801064a:	4620      	mov	r0, r4
 801064c:	2200      	movs	r2, #0
 801064e:	2104      	movs	r1, #4
 8010650:	f7ff ff94 	bl	801057c <std>
 8010654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010658:	2201      	movs	r2, #1
 801065a:	2109      	movs	r1, #9
 801065c:	f7ff ff8e 	bl	801057c <std>
 8010660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010664:	2202      	movs	r2, #2
 8010666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801066a:	2112      	movs	r1, #18
 801066c:	f7ff bf86 	b.w	801057c <std>
 8010670:	20005694 	.word	0x20005694
 8010674:	2000555c 	.word	0x2000555c
 8010678:	080105e9 	.word	0x080105e9

0801067c <__sfp_lock_acquire>:
 801067c:	4801      	ldr	r0, [pc, #4]	@ (8010684 <__sfp_lock_acquire+0x8>)
 801067e:	f000 b954 	b.w	801092a <__retarget_lock_acquire_recursive>
 8010682:	bf00      	nop
 8010684:	2000569d 	.word	0x2000569d

08010688 <__sfp_lock_release>:
 8010688:	4801      	ldr	r0, [pc, #4]	@ (8010690 <__sfp_lock_release+0x8>)
 801068a:	f000 b94f 	b.w	801092c <__retarget_lock_release_recursive>
 801068e:	bf00      	nop
 8010690:	2000569d 	.word	0x2000569d

08010694 <__sinit>:
 8010694:	b510      	push	{r4, lr}
 8010696:	4604      	mov	r4, r0
 8010698:	f7ff fff0 	bl	801067c <__sfp_lock_acquire>
 801069c:	6a23      	ldr	r3, [r4, #32]
 801069e:	b11b      	cbz	r3, 80106a8 <__sinit+0x14>
 80106a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106a4:	f7ff bff0 	b.w	8010688 <__sfp_lock_release>
 80106a8:	4b04      	ldr	r3, [pc, #16]	@ (80106bc <__sinit+0x28>)
 80106aa:	6223      	str	r3, [r4, #32]
 80106ac:	4b04      	ldr	r3, [pc, #16]	@ (80106c0 <__sinit+0x2c>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d1f5      	bne.n	80106a0 <__sinit+0xc>
 80106b4:	f7ff ffc4 	bl	8010640 <global_stdio_init.part.0>
 80106b8:	e7f2      	b.n	80106a0 <__sinit+0xc>
 80106ba:	bf00      	nop
 80106bc:	08010601 	.word	0x08010601
 80106c0:	20005694 	.word	0x20005694

080106c4 <_fwalk_sglue>:
 80106c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106c8:	4607      	mov	r7, r0
 80106ca:	4688      	mov	r8, r1
 80106cc:	4614      	mov	r4, r2
 80106ce:	2600      	movs	r6, #0
 80106d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80106d4:	f1b9 0901 	subs.w	r9, r9, #1
 80106d8:	d505      	bpl.n	80106e6 <_fwalk_sglue+0x22>
 80106da:	6824      	ldr	r4, [r4, #0]
 80106dc:	2c00      	cmp	r4, #0
 80106de:	d1f7      	bne.n	80106d0 <_fwalk_sglue+0xc>
 80106e0:	4630      	mov	r0, r6
 80106e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106e6:	89ab      	ldrh	r3, [r5, #12]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d907      	bls.n	80106fc <_fwalk_sglue+0x38>
 80106ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80106f0:	3301      	adds	r3, #1
 80106f2:	d003      	beq.n	80106fc <_fwalk_sglue+0x38>
 80106f4:	4629      	mov	r1, r5
 80106f6:	4638      	mov	r0, r7
 80106f8:	47c0      	blx	r8
 80106fa:	4306      	orrs	r6, r0
 80106fc:	3568      	adds	r5, #104	@ 0x68
 80106fe:	e7e9      	b.n	80106d4 <_fwalk_sglue+0x10>

08010700 <sniprintf>:
 8010700:	b40c      	push	{r2, r3}
 8010702:	b530      	push	{r4, r5, lr}
 8010704:	4b17      	ldr	r3, [pc, #92]	@ (8010764 <sniprintf+0x64>)
 8010706:	1e0c      	subs	r4, r1, #0
 8010708:	681d      	ldr	r5, [r3, #0]
 801070a:	b09d      	sub	sp, #116	@ 0x74
 801070c:	da08      	bge.n	8010720 <sniprintf+0x20>
 801070e:	238b      	movs	r3, #139	@ 0x8b
 8010710:	602b      	str	r3, [r5, #0]
 8010712:	f04f 30ff 	mov.w	r0, #4294967295
 8010716:	b01d      	add	sp, #116	@ 0x74
 8010718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801071c:	b002      	add	sp, #8
 801071e:	4770      	bx	lr
 8010720:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010724:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010728:	bf14      	ite	ne
 801072a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801072e:	4623      	moveq	r3, r4
 8010730:	9304      	str	r3, [sp, #16]
 8010732:	9307      	str	r3, [sp, #28]
 8010734:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010738:	9002      	str	r0, [sp, #8]
 801073a:	9006      	str	r0, [sp, #24]
 801073c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010740:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010742:	ab21      	add	r3, sp, #132	@ 0x84
 8010744:	a902      	add	r1, sp, #8
 8010746:	4628      	mov	r0, r5
 8010748:	9301      	str	r3, [sp, #4]
 801074a:	f001 fc2b 	bl	8011fa4 <_svfiprintf_r>
 801074e:	1c43      	adds	r3, r0, #1
 8010750:	bfbc      	itt	lt
 8010752:	238b      	movlt	r3, #139	@ 0x8b
 8010754:	602b      	strlt	r3, [r5, #0]
 8010756:	2c00      	cmp	r4, #0
 8010758:	d0dd      	beq.n	8010716 <sniprintf+0x16>
 801075a:	9b02      	ldr	r3, [sp, #8]
 801075c:	2200      	movs	r2, #0
 801075e:	701a      	strb	r2, [r3, #0]
 8010760:	e7d9      	b.n	8010716 <sniprintf+0x16>
 8010762:	bf00      	nop
 8010764:	2000017c 	.word	0x2000017c

08010768 <siprintf>:
 8010768:	b40e      	push	{r1, r2, r3}
 801076a:	b500      	push	{lr}
 801076c:	b09c      	sub	sp, #112	@ 0x70
 801076e:	ab1d      	add	r3, sp, #116	@ 0x74
 8010770:	9002      	str	r0, [sp, #8]
 8010772:	9006      	str	r0, [sp, #24]
 8010774:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010778:	4809      	ldr	r0, [pc, #36]	@ (80107a0 <siprintf+0x38>)
 801077a:	9107      	str	r1, [sp, #28]
 801077c:	9104      	str	r1, [sp, #16]
 801077e:	4909      	ldr	r1, [pc, #36]	@ (80107a4 <siprintf+0x3c>)
 8010780:	f853 2b04 	ldr.w	r2, [r3], #4
 8010784:	9105      	str	r1, [sp, #20]
 8010786:	6800      	ldr	r0, [r0, #0]
 8010788:	9301      	str	r3, [sp, #4]
 801078a:	a902      	add	r1, sp, #8
 801078c:	f001 fc0a 	bl	8011fa4 <_svfiprintf_r>
 8010790:	9b02      	ldr	r3, [sp, #8]
 8010792:	2200      	movs	r2, #0
 8010794:	701a      	strb	r2, [r3, #0]
 8010796:	b01c      	add	sp, #112	@ 0x70
 8010798:	f85d eb04 	ldr.w	lr, [sp], #4
 801079c:	b003      	add	sp, #12
 801079e:	4770      	bx	lr
 80107a0:	2000017c 	.word	0x2000017c
 80107a4:	ffff0208 	.word	0xffff0208

080107a8 <__sread>:
 80107a8:	b510      	push	{r4, lr}
 80107aa:	460c      	mov	r4, r1
 80107ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107b0:	f000 f86c 	bl	801088c <_read_r>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	bfab      	itete	ge
 80107b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80107ba:	89a3      	ldrhlt	r3, [r4, #12]
 80107bc:	181b      	addge	r3, r3, r0
 80107be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80107c2:	bfac      	ite	ge
 80107c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80107c6:	81a3      	strhlt	r3, [r4, #12]
 80107c8:	bd10      	pop	{r4, pc}

080107ca <__swrite>:
 80107ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107ce:	461f      	mov	r7, r3
 80107d0:	898b      	ldrh	r3, [r1, #12]
 80107d2:	05db      	lsls	r3, r3, #23
 80107d4:	4605      	mov	r5, r0
 80107d6:	460c      	mov	r4, r1
 80107d8:	4616      	mov	r6, r2
 80107da:	d505      	bpl.n	80107e8 <__swrite+0x1e>
 80107dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107e0:	2302      	movs	r3, #2
 80107e2:	2200      	movs	r2, #0
 80107e4:	f000 f840 	bl	8010868 <_lseek_r>
 80107e8:	89a3      	ldrh	r3, [r4, #12]
 80107ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80107f2:	81a3      	strh	r3, [r4, #12]
 80107f4:	4632      	mov	r2, r6
 80107f6:	463b      	mov	r3, r7
 80107f8:	4628      	mov	r0, r5
 80107fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107fe:	f000 b857 	b.w	80108b0 <_write_r>

08010802 <__sseek>:
 8010802:	b510      	push	{r4, lr}
 8010804:	460c      	mov	r4, r1
 8010806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801080a:	f000 f82d 	bl	8010868 <_lseek_r>
 801080e:	1c43      	adds	r3, r0, #1
 8010810:	89a3      	ldrh	r3, [r4, #12]
 8010812:	bf15      	itete	ne
 8010814:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010816:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801081a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801081e:	81a3      	strheq	r3, [r4, #12]
 8010820:	bf18      	it	ne
 8010822:	81a3      	strhne	r3, [r4, #12]
 8010824:	bd10      	pop	{r4, pc}

08010826 <__sclose>:
 8010826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801082a:	f000 b80d 	b.w	8010848 <_close_r>

0801082e <memset>:
 801082e:	4402      	add	r2, r0
 8010830:	4603      	mov	r3, r0
 8010832:	4293      	cmp	r3, r2
 8010834:	d100      	bne.n	8010838 <memset+0xa>
 8010836:	4770      	bx	lr
 8010838:	f803 1b01 	strb.w	r1, [r3], #1
 801083c:	e7f9      	b.n	8010832 <memset+0x4>
	...

08010840 <_localeconv_r>:
 8010840:	4800      	ldr	r0, [pc, #0]	@ (8010844 <_localeconv_r+0x4>)
 8010842:	4770      	bx	lr
 8010844:	200002bc 	.word	0x200002bc

08010848 <_close_r>:
 8010848:	b538      	push	{r3, r4, r5, lr}
 801084a:	4d06      	ldr	r5, [pc, #24]	@ (8010864 <_close_r+0x1c>)
 801084c:	2300      	movs	r3, #0
 801084e:	4604      	mov	r4, r0
 8010850:	4608      	mov	r0, r1
 8010852:	602b      	str	r3, [r5, #0]
 8010854:	f7f6 fb4a 	bl	8006eec <_close>
 8010858:	1c43      	adds	r3, r0, #1
 801085a:	d102      	bne.n	8010862 <_close_r+0x1a>
 801085c:	682b      	ldr	r3, [r5, #0]
 801085e:	b103      	cbz	r3, 8010862 <_close_r+0x1a>
 8010860:	6023      	str	r3, [r4, #0]
 8010862:	bd38      	pop	{r3, r4, r5, pc}
 8010864:	20005698 	.word	0x20005698

08010868 <_lseek_r>:
 8010868:	b538      	push	{r3, r4, r5, lr}
 801086a:	4d07      	ldr	r5, [pc, #28]	@ (8010888 <_lseek_r+0x20>)
 801086c:	4604      	mov	r4, r0
 801086e:	4608      	mov	r0, r1
 8010870:	4611      	mov	r1, r2
 8010872:	2200      	movs	r2, #0
 8010874:	602a      	str	r2, [r5, #0]
 8010876:	461a      	mov	r2, r3
 8010878:	f7f6 fb5f 	bl	8006f3a <_lseek>
 801087c:	1c43      	adds	r3, r0, #1
 801087e:	d102      	bne.n	8010886 <_lseek_r+0x1e>
 8010880:	682b      	ldr	r3, [r5, #0]
 8010882:	b103      	cbz	r3, 8010886 <_lseek_r+0x1e>
 8010884:	6023      	str	r3, [r4, #0]
 8010886:	bd38      	pop	{r3, r4, r5, pc}
 8010888:	20005698 	.word	0x20005698

0801088c <_read_r>:
 801088c:	b538      	push	{r3, r4, r5, lr}
 801088e:	4d07      	ldr	r5, [pc, #28]	@ (80108ac <_read_r+0x20>)
 8010890:	4604      	mov	r4, r0
 8010892:	4608      	mov	r0, r1
 8010894:	4611      	mov	r1, r2
 8010896:	2200      	movs	r2, #0
 8010898:	602a      	str	r2, [r5, #0]
 801089a:	461a      	mov	r2, r3
 801089c:	f7f6 faed 	bl	8006e7a <_read>
 80108a0:	1c43      	adds	r3, r0, #1
 80108a2:	d102      	bne.n	80108aa <_read_r+0x1e>
 80108a4:	682b      	ldr	r3, [r5, #0]
 80108a6:	b103      	cbz	r3, 80108aa <_read_r+0x1e>
 80108a8:	6023      	str	r3, [r4, #0]
 80108aa:	bd38      	pop	{r3, r4, r5, pc}
 80108ac:	20005698 	.word	0x20005698

080108b0 <_write_r>:
 80108b0:	b538      	push	{r3, r4, r5, lr}
 80108b2:	4d07      	ldr	r5, [pc, #28]	@ (80108d0 <_write_r+0x20>)
 80108b4:	4604      	mov	r4, r0
 80108b6:	4608      	mov	r0, r1
 80108b8:	4611      	mov	r1, r2
 80108ba:	2200      	movs	r2, #0
 80108bc:	602a      	str	r2, [r5, #0]
 80108be:	461a      	mov	r2, r3
 80108c0:	f7f6 faf8 	bl	8006eb4 <_write>
 80108c4:	1c43      	adds	r3, r0, #1
 80108c6:	d102      	bne.n	80108ce <_write_r+0x1e>
 80108c8:	682b      	ldr	r3, [r5, #0]
 80108ca:	b103      	cbz	r3, 80108ce <_write_r+0x1e>
 80108cc:	6023      	str	r3, [r4, #0]
 80108ce:	bd38      	pop	{r3, r4, r5, pc}
 80108d0:	20005698 	.word	0x20005698

080108d4 <__errno>:
 80108d4:	4b01      	ldr	r3, [pc, #4]	@ (80108dc <__errno+0x8>)
 80108d6:	6818      	ldr	r0, [r3, #0]
 80108d8:	4770      	bx	lr
 80108da:	bf00      	nop
 80108dc:	2000017c 	.word	0x2000017c

080108e0 <__libc_init_array>:
 80108e0:	b570      	push	{r4, r5, r6, lr}
 80108e2:	4d0d      	ldr	r5, [pc, #52]	@ (8010918 <__libc_init_array+0x38>)
 80108e4:	4c0d      	ldr	r4, [pc, #52]	@ (801091c <__libc_init_array+0x3c>)
 80108e6:	1b64      	subs	r4, r4, r5
 80108e8:	10a4      	asrs	r4, r4, #2
 80108ea:	2600      	movs	r6, #0
 80108ec:	42a6      	cmp	r6, r4
 80108ee:	d109      	bne.n	8010904 <__libc_init_array+0x24>
 80108f0:	4d0b      	ldr	r5, [pc, #44]	@ (8010920 <__libc_init_array+0x40>)
 80108f2:	4c0c      	ldr	r4, [pc, #48]	@ (8010924 <__libc_init_array+0x44>)
 80108f4:	f002 ffc4 	bl	8013880 <_init>
 80108f8:	1b64      	subs	r4, r4, r5
 80108fa:	10a4      	asrs	r4, r4, #2
 80108fc:	2600      	movs	r6, #0
 80108fe:	42a6      	cmp	r6, r4
 8010900:	d105      	bne.n	801090e <__libc_init_array+0x2e>
 8010902:	bd70      	pop	{r4, r5, r6, pc}
 8010904:	f855 3b04 	ldr.w	r3, [r5], #4
 8010908:	4798      	blx	r3
 801090a:	3601      	adds	r6, #1
 801090c:	e7ee      	b.n	80108ec <__libc_init_array+0xc>
 801090e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010912:	4798      	blx	r3
 8010914:	3601      	adds	r6, #1
 8010916:	e7f2      	b.n	80108fe <__libc_init_array+0x1e>
 8010918:	08014a70 	.word	0x08014a70
 801091c:	08014a70 	.word	0x08014a70
 8010920:	08014a70 	.word	0x08014a70
 8010924:	08014a74 	.word	0x08014a74

08010928 <__retarget_lock_init_recursive>:
 8010928:	4770      	bx	lr

0801092a <__retarget_lock_acquire_recursive>:
 801092a:	4770      	bx	lr

0801092c <__retarget_lock_release_recursive>:
 801092c:	4770      	bx	lr

0801092e <memcpy>:
 801092e:	440a      	add	r2, r1
 8010930:	4291      	cmp	r1, r2
 8010932:	f100 33ff 	add.w	r3, r0, #4294967295
 8010936:	d100      	bne.n	801093a <memcpy+0xc>
 8010938:	4770      	bx	lr
 801093a:	b510      	push	{r4, lr}
 801093c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010940:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010944:	4291      	cmp	r1, r2
 8010946:	d1f9      	bne.n	801093c <memcpy+0xe>
 8010948:	bd10      	pop	{r4, pc}

0801094a <quorem>:
 801094a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801094e:	6903      	ldr	r3, [r0, #16]
 8010950:	690c      	ldr	r4, [r1, #16]
 8010952:	42a3      	cmp	r3, r4
 8010954:	4607      	mov	r7, r0
 8010956:	db7e      	blt.n	8010a56 <quorem+0x10c>
 8010958:	3c01      	subs	r4, #1
 801095a:	f101 0814 	add.w	r8, r1, #20
 801095e:	00a3      	lsls	r3, r4, #2
 8010960:	f100 0514 	add.w	r5, r0, #20
 8010964:	9300      	str	r3, [sp, #0]
 8010966:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801096a:	9301      	str	r3, [sp, #4]
 801096c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010970:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010974:	3301      	adds	r3, #1
 8010976:	429a      	cmp	r2, r3
 8010978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801097c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010980:	d32e      	bcc.n	80109e0 <quorem+0x96>
 8010982:	f04f 0a00 	mov.w	sl, #0
 8010986:	46c4      	mov	ip, r8
 8010988:	46ae      	mov	lr, r5
 801098a:	46d3      	mov	fp, sl
 801098c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010990:	b298      	uxth	r0, r3
 8010992:	fb06 a000 	mla	r0, r6, r0, sl
 8010996:	0c02      	lsrs	r2, r0, #16
 8010998:	0c1b      	lsrs	r3, r3, #16
 801099a:	fb06 2303 	mla	r3, r6, r3, r2
 801099e:	f8de 2000 	ldr.w	r2, [lr]
 80109a2:	b280      	uxth	r0, r0
 80109a4:	b292      	uxth	r2, r2
 80109a6:	1a12      	subs	r2, r2, r0
 80109a8:	445a      	add	r2, fp
 80109aa:	f8de 0000 	ldr.w	r0, [lr]
 80109ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80109b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80109bc:	b292      	uxth	r2, r2
 80109be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80109c2:	45e1      	cmp	r9, ip
 80109c4:	f84e 2b04 	str.w	r2, [lr], #4
 80109c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80109cc:	d2de      	bcs.n	801098c <quorem+0x42>
 80109ce:	9b00      	ldr	r3, [sp, #0]
 80109d0:	58eb      	ldr	r3, [r5, r3]
 80109d2:	b92b      	cbnz	r3, 80109e0 <quorem+0x96>
 80109d4:	9b01      	ldr	r3, [sp, #4]
 80109d6:	3b04      	subs	r3, #4
 80109d8:	429d      	cmp	r5, r3
 80109da:	461a      	mov	r2, r3
 80109dc:	d32f      	bcc.n	8010a3e <quorem+0xf4>
 80109de:	613c      	str	r4, [r7, #16]
 80109e0:	4638      	mov	r0, r7
 80109e2:	f001 f97b 	bl	8011cdc <__mcmp>
 80109e6:	2800      	cmp	r0, #0
 80109e8:	db25      	blt.n	8010a36 <quorem+0xec>
 80109ea:	4629      	mov	r1, r5
 80109ec:	2000      	movs	r0, #0
 80109ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80109f2:	f8d1 c000 	ldr.w	ip, [r1]
 80109f6:	fa1f fe82 	uxth.w	lr, r2
 80109fa:	fa1f f38c 	uxth.w	r3, ip
 80109fe:	eba3 030e 	sub.w	r3, r3, lr
 8010a02:	4403      	add	r3, r0
 8010a04:	0c12      	lsrs	r2, r2, #16
 8010a06:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010a0a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a14:	45c1      	cmp	r9, r8
 8010a16:	f841 3b04 	str.w	r3, [r1], #4
 8010a1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010a1e:	d2e6      	bcs.n	80109ee <quorem+0xa4>
 8010a20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a28:	b922      	cbnz	r2, 8010a34 <quorem+0xea>
 8010a2a:	3b04      	subs	r3, #4
 8010a2c:	429d      	cmp	r5, r3
 8010a2e:	461a      	mov	r2, r3
 8010a30:	d30b      	bcc.n	8010a4a <quorem+0x100>
 8010a32:	613c      	str	r4, [r7, #16]
 8010a34:	3601      	adds	r6, #1
 8010a36:	4630      	mov	r0, r6
 8010a38:	b003      	add	sp, #12
 8010a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a3e:	6812      	ldr	r2, [r2, #0]
 8010a40:	3b04      	subs	r3, #4
 8010a42:	2a00      	cmp	r2, #0
 8010a44:	d1cb      	bne.n	80109de <quorem+0x94>
 8010a46:	3c01      	subs	r4, #1
 8010a48:	e7c6      	b.n	80109d8 <quorem+0x8e>
 8010a4a:	6812      	ldr	r2, [r2, #0]
 8010a4c:	3b04      	subs	r3, #4
 8010a4e:	2a00      	cmp	r2, #0
 8010a50:	d1ef      	bne.n	8010a32 <quorem+0xe8>
 8010a52:	3c01      	subs	r4, #1
 8010a54:	e7ea      	b.n	8010a2c <quorem+0xe2>
 8010a56:	2000      	movs	r0, #0
 8010a58:	e7ee      	b.n	8010a38 <quorem+0xee>
 8010a5a:	0000      	movs	r0, r0
 8010a5c:	0000      	movs	r0, r0
	...

08010a60 <_dtoa_r>:
 8010a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a64:	69c7      	ldr	r7, [r0, #28]
 8010a66:	b099      	sub	sp, #100	@ 0x64
 8010a68:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010a6c:	ec55 4b10 	vmov	r4, r5, d0
 8010a70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010a72:	9109      	str	r1, [sp, #36]	@ 0x24
 8010a74:	4683      	mov	fp, r0
 8010a76:	920e      	str	r2, [sp, #56]	@ 0x38
 8010a78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010a7a:	b97f      	cbnz	r7, 8010a9c <_dtoa_r+0x3c>
 8010a7c:	2010      	movs	r0, #16
 8010a7e:	f000 fdfd 	bl	801167c <malloc>
 8010a82:	4602      	mov	r2, r0
 8010a84:	f8cb 001c 	str.w	r0, [fp, #28]
 8010a88:	b920      	cbnz	r0, 8010a94 <_dtoa_r+0x34>
 8010a8a:	4ba7      	ldr	r3, [pc, #668]	@ (8010d28 <_dtoa_r+0x2c8>)
 8010a8c:	21ef      	movs	r1, #239	@ 0xef
 8010a8e:	48a7      	ldr	r0, [pc, #668]	@ (8010d2c <_dtoa_r+0x2cc>)
 8010a90:	f001 fc5a 	bl	8012348 <__assert_func>
 8010a94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010a98:	6007      	str	r7, [r0, #0]
 8010a9a:	60c7      	str	r7, [r0, #12]
 8010a9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010aa0:	6819      	ldr	r1, [r3, #0]
 8010aa2:	b159      	cbz	r1, 8010abc <_dtoa_r+0x5c>
 8010aa4:	685a      	ldr	r2, [r3, #4]
 8010aa6:	604a      	str	r2, [r1, #4]
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	4093      	lsls	r3, r2
 8010aac:	608b      	str	r3, [r1, #8]
 8010aae:	4658      	mov	r0, fp
 8010ab0:	f000 feda 	bl	8011868 <_Bfree>
 8010ab4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	601a      	str	r2, [r3, #0]
 8010abc:	1e2b      	subs	r3, r5, #0
 8010abe:	bfb9      	ittee	lt
 8010ac0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010ac4:	9303      	strlt	r3, [sp, #12]
 8010ac6:	2300      	movge	r3, #0
 8010ac8:	6033      	strge	r3, [r6, #0]
 8010aca:	9f03      	ldr	r7, [sp, #12]
 8010acc:	4b98      	ldr	r3, [pc, #608]	@ (8010d30 <_dtoa_r+0x2d0>)
 8010ace:	bfbc      	itt	lt
 8010ad0:	2201      	movlt	r2, #1
 8010ad2:	6032      	strlt	r2, [r6, #0]
 8010ad4:	43bb      	bics	r3, r7
 8010ad6:	d112      	bne.n	8010afe <_dtoa_r+0x9e>
 8010ad8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010ada:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010ade:	6013      	str	r3, [r2, #0]
 8010ae0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010ae4:	4323      	orrs	r3, r4
 8010ae6:	f000 854d 	beq.w	8011584 <_dtoa_r+0xb24>
 8010aea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010aec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010d44 <_dtoa_r+0x2e4>
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	f000 854f 	beq.w	8011594 <_dtoa_r+0xb34>
 8010af6:	f10a 0303 	add.w	r3, sl, #3
 8010afa:	f000 bd49 	b.w	8011590 <_dtoa_r+0xb30>
 8010afe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b02:	2200      	movs	r2, #0
 8010b04:	ec51 0b17 	vmov	r0, r1, d7
 8010b08:	2300      	movs	r3, #0
 8010b0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010b0e:	f7ef ffdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b12:	4680      	mov	r8, r0
 8010b14:	b158      	cbz	r0, 8010b2e <_dtoa_r+0xce>
 8010b16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010b18:	2301      	movs	r3, #1
 8010b1a:	6013      	str	r3, [r2, #0]
 8010b1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010b1e:	b113      	cbz	r3, 8010b26 <_dtoa_r+0xc6>
 8010b20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010b22:	4b84      	ldr	r3, [pc, #528]	@ (8010d34 <_dtoa_r+0x2d4>)
 8010b24:	6013      	str	r3, [r2, #0]
 8010b26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010d48 <_dtoa_r+0x2e8>
 8010b2a:	f000 bd33 	b.w	8011594 <_dtoa_r+0xb34>
 8010b2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010b32:	aa16      	add	r2, sp, #88	@ 0x58
 8010b34:	a917      	add	r1, sp, #92	@ 0x5c
 8010b36:	4658      	mov	r0, fp
 8010b38:	f001 f980 	bl	8011e3c <__d2b>
 8010b3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010b40:	4681      	mov	r9, r0
 8010b42:	2e00      	cmp	r6, #0
 8010b44:	d077      	beq.n	8010c36 <_dtoa_r+0x1d6>
 8010b46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010b54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010b58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010b5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010b60:	4619      	mov	r1, r3
 8010b62:	2200      	movs	r2, #0
 8010b64:	4b74      	ldr	r3, [pc, #464]	@ (8010d38 <_dtoa_r+0x2d8>)
 8010b66:	f7ef fb8f 	bl	8000288 <__aeabi_dsub>
 8010b6a:	a369      	add	r3, pc, #420	@ (adr r3, 8010d10 <_dtoa_r+0x2b0>)
 8010b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b70:	f7ef fd42 	bl	80005f8 <__aeabi_dmul>
 8010b74:	a368      	add	r3, pc, #416	@ (adr r3, 8010d18 <_dtoa_r+0x2b8>)
 8010b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7a:	f7ef fb87 	bl	800028c <__adddf3>
 8010b7e:	4604      	mov	r4, r0
 8010b80:	4630      	mov	r0, r6
 8010b82:	460d      	mov	r5, r1
 8010b84:	f7ef fcce 	bl	8000524 <__aeabi_i2d>
 8010b88:	a365      	add	r3, pc, #404	@ (adr r3, 8010d20 <_dtoa_r+0x2c0>)
 8010b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8e:	f7ef fd33 	bl	80005f8 <__aeabi_dmul>
 8010b92:	4602      	mov	r2, r0
 8010b94:	460b      	mov	r3, r1
 8010b96:	4620      	mov	r0, r4
 8010b98:	4629      	mov	r1, r5
 8010b9a:	f7ef fb77 	bl	800028c <__adddf3>
 8010b9e:	4604      	mov	r4, r0
 8010ba0:	460d      	mov	r5, r1
 8010ba2:	f7ef ffd9 	bl	8000b58 <__aeabi_d2iz>
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	4607      	mov	r7, r0
 8010baa:	2300      	movs	r3, #0
 8010bac:	4620      	mov	r0, r4
 8010bae:	4629      	mov	r1, r5
 8010bb0:	f7ef ff94 	bl	8000adc <__aeabi_dcmplt>
 8010bb4:	b140      	cbz	r0, 8010bc8 <_dtoa_r+0x168>
 8010bb6:	4638      	mov	r0, r7
 8010bb8:	f7ef fcb4 	bl	8000524 <__aeabi_i2d>
 8010bbc:	4622      	mov	r2, r4
 8010bbe:	462b      	mov	r3, r5
 8010bc0:	f7ef ff82 	bl	8000ac8 <__aeabi_dcmpeq>
 8010bc4:	b900      	cbnz	r0, 8010bc8 <_dtoa_r+0x168>
 8010bc6:	3f01      	subs	r7, #1
 8010bc8:	2f16      	cmp	r7, #22
 8010bca:	d851      	bhi.n	8010c70 <_dtoa_r+0x210>
 8010bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8010d3c <_dtoa_r+0x2dc>)
 8010bce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010bda:	f7ef ff7f 	bl	8000adc <__aeabi_dcmplt>
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d048      	beq.n	8010c74 <_dtoa_r+0x214>
 8010be2:	3f01      	subs	r7, #1
 8010be4:	2300      	movs	r3, #0
 8010be6:	9312      	str	r3, [sp, #72]	@ 0x48
 8010be8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010bea:	1b9b      	subs	r3, r3, r6
 8010bec:	1e5a      	subs	r2, r3, #1
 8010bee:	bf44      	itt	mi
 8010bf0:	f1c3 0801 	rsbmi	r8, r3, #1
 8010bf4:	2300      	movmi	r3, #0
 8010bf6:	9208      	str	r2, [sp, #32]
 8010bf8:	bf54      	ite	pl
 8010bfa:	f04f 0800 	movpl.w	r8, #0
 8010bfe:	9308      	strmi	r3, [sp, #32]
 8010c00:	2f00      	cmp	r7, #0
 8010c02:	db39      	blt.n	8010c78 <_dtoa_r+0x218>
 8010c04:	9b08      	ldr	r3, [sp, #32]
 8010c06:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010c08:	443b      	add	r3, r7
 8010c0a:	9308      	str	r3, [sp, #32]
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c12:	2b09      	cmp	r3, #9
 8010c14:	d864      	bhi.n	8010ce0 <_dtoa_r+0x280>
 8010c16:	2b05      	cmp	r3, #5
 8010c18:	bfc4      	itt	gt
 8010c1a:	3b04      	subgt	r3, #4
 8010c1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c20:	f1a3 0302 	sub.w	r3, r3, #2
 8010c24:	bfcc      	ite	gt
 8010c26:	2400      	movgt	r4, #0
 8010c28:	2401      	movle	r4, #1
 8010c2a:	2b03      	cmp	r3, #3
 8010c2c:	d863      	bhi.n	8010cf6 <_dtoa_r+0x296>
 8010c2e:	e8df f003 	tbb	[pc, r3]
 8010c32:	372a      	.short	0x372a
 8010c34:	5535      	.short	0x5535
 8010c36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010c3a:	441e      	add	r6, r3
 8010c3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010c40:	2b20      	cmp	r3, #32
 8010c42:	bfc1      	itttt	gt
 8010c44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010c48:	409f      	lslgt	r7, r3
 8010c4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010c4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010c52:	bfd6      	itet	le
 8010c54:	f1c3 0320 	rsble	r3, r3, #32
 8010c58:	ea47 0003 	orrgt.w	r0, r7, r3
 8010c5c:	fa04 f003 	lslle.w	r0, r4, r3
 8010c60:	f7ef fc50 	bl	8000504 <__aeabi_ui2d>
 8010c64:	2201      	movs	r2, #1
 8010c66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010c6a:	3e01      	subs	r6, #1
 8010c6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8010c6e:	e777      	b.n	8010b60 <_dtoa_r+0x100>
 8010c70:	2301      	movs	r3, #1
 8010c72:	e7b8      	b.n	8010be6 <_dtoa_r+0x186>
 8010c74:	9012      	str	r0, [sp, #72]	@ 0x48
 8010c76:	e7b7      	b.n	8010be8 <_dtoa_r+0x188>
 8010c78:	427b      	negs	r3, r7
 8010c7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	eba8 0807 	sub.w	r8, r8, r7
 8010c82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010c84:	e7c4      	b.n	8010c10 <_dtoa_r+0x1b0>
 8010c86:	2300      	movs	r3, #0
 8010c88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	dc35      	bgt.n	8010cfc <_dtoa_r+0x29c>
 8010c90:	2301      	movs	r3, #1
 8010c92:	9300      	str	r3, [sp, #0]
 8010c94:	9307      	str	r3, [sp, #28]
 8010c96:	461a      	mov	r2, r3
 8010c98:	920e      	str	r2, [sp, #56]	@ 0x38
 8010c9a:	e00b      	b.n	8010cb4 <_dtoa_r+0x254>
 8010c9c:	2301      	movs	r3, #1
 8010c9e:	e7f3      	b.n	8010c88 <_dtoa_r+0x228>
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ca6:	18fb      	adds	r3, r7, r3
 8010ca8:	9300      	str	r3, [sp, #0]
 8010caa:	3301      	adds	r3, #1
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	9307      	str	r3, [sp, #28]
 8010cb0:	bfb8      	it	lt
 8010cb2:	2301      	movlt	r3, #1
 8010cb4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010cb8:	2100      	movs	r1, #0
 8010cba:	2204      	movs	r2, #4
 8010cbc:	f102 0514 	add.w	r5, r2, #20
 8010cc0:	429d      	cmp	r5, r3
 8010cc2:	d91f      	bls.n	8010d04 <_dtoa_r+0x2a4>
 8010cc4:	6041      	str	r1, [r0, #4]
 8010cc6:	4658      	mov	r0, fp
 8010cc8:	f000 fd8e 	bl	80117e8 <_Balloc>
 8010ccc:	4682      	mov	sl, r0
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	d13c      	bne.n	8010d4c <_dtoa_r+0x2ec>
 8010cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8010d40 <_dtoa_r+0x2e0>)
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8010cda:	e6d8      	b.n	8010a8e <_dtoa_r+0x2e>
 8010cdc:	2301      	movs	r3, #1
 8010cde:	e7e0      	b.n	8010ca2 <_dtoa_r+0x242>
 8010ce0:	2401      	movs	r4, #1
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ce6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8010cec:	9300      	str	r3, [sp, #0]
 8010cee:	9307      	str	r3, [sp, #28]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	2312      	movs	r3, #18
 8010cf4:	e7d0      	b.n	8010c98 <_dtoa_r+0x238>
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010cfa:	e7f5      	b.n	8010ce8 <_dtoa_r+0x288>
 8010cfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cfe:	9300      	str	r3, [sp, #0]
 8010d00:	9307      	str	r3, [sp, #28]
 8010d02:	e7d7      	b.n	8010cb4 <_dtoa_r+0x254>
 8010d04:	3101      	adds	r1, #1
 8010d06:	0052      	lsls	r2, r2, #1
 8010d08:	e7d8      	b.n	8010cbc <_dtoa_r+0x25c>
 8010d0a:	bf00      	nop
 8010d0c:	f3af 8000 	nop.w
 8010d10:	636f4361 	.word	0x636f4361
 8010d14:	3fd287a7 	.word	0x3fd287a7
 8010d18:	8b60c8b3 	.word	0x8b60c8b3
 8010d1c:	3fc68a28 	.word	0x3fc68a28
 8010d20:	509f79fb 	.word	0x509f79fb
 8010d24:	3fd34413 	.word	0x3fd34413
 8010d28:	08014709 	.word	0x08014709
 8010d2c:	08014720 	.word	0x08014720
 8010d30:	7ff00000 	.word	0x7ff00000
 8010d34:	080146d9 	.word	0x080146d9
 8010d38:	3ff80000 	.word	0x3ff80000
 8010d3c:	08014818 	.word	0x08014818
 8010d40:	08014778 	.word	0x08014778
 8010d44:	08014705 	.word	0x08014705
 8010d48:	080146d8 	.word	0x080146d8
 8010d4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010d50:	6018      	str	r0, [r3, #0]
 8010d52:	9b07      	ldr	r3, [sp, #28]
 8010d54:	2b0e      	cmp	r3, #14
 8010d56:	f200 80a4 	bhi.w	8010ea2 <_dtoa_r+0x442>
 8010d5a:	2c00      	cmp	r4, #0
 8010d5c:	f000 80a1 	beq.w	8010ea2 <_dtoa_r+0x442>
 8010d60:	2f00      	cmp	r7, #0
 8010d62:	dd33      	ble.n	8010dcc <_dtoa_r+0x36c>
 8010d64:	4bad      	ldr	r3, [pc, #692]	@ (801101c <_dtoa_r+0x5bc>)
 8010d66:	f007 020f 	and.w	r2, r7, #15
 8010d6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d6e:	ed93 7b00 	vldr	d7, [r3]
 8010d72:	05f8      	lsls	r0, r7, #23
 8010d74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010d78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010d7c:	d516      	bpl.n	8010dac <_dtoa_r+0x34c>
 8010d7e:	4ba8      	ldr	r3, [pc, #672]	@ (8011020 <_dtoa_r+0x5c0>)
 8010d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010d84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010d88:	f7ef fd60 	bl	800084c <__aeabi_ddiv>
 8010d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d90:	f004 040f 	and.w	r4, r4, #15
 8010d94:	2603      	movs	r6, #3
 8010d96:	4da2      	ldr	r5, [pc, #648]	@ (8011020 <_dtoa_r+0x5c0>)
 8010d98:	b954      	cbnz	r4, 8010db0 <_dtoa_r+0x350>
 8010d9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010da2:	f7ef fd53 	bl	800084c <__aeabi_ddiv>
 8010da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010daa:	e028      	b.n	8010dfe <_dtoa_r+0x39e>
 8010dac:	2602      	movs	r6, #2
 8010dae:	e7f2      	b.n	8010d96 <_dtoa_r+0x336>
 8010db0:	07e1      	lsls	r1, r4, #31
 8010db2:	d508      	bpl.n	8010dc6 <_dtoa_r+0x366>
 8010db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010db8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010dbc:	f7ef fc1c 	bl	80005f8 <__aeabi_dmul>
 8010dc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010dc4:	3601      	adds	r6, #1
 8010dc6:	1064      	asrs	r4, r4, #1
 8010dc8:	3508      	adds	r5, #8
 8010dca:	e7e5      	b.n	8010d98 <_dtoa_r+0x338>
 8010dcc:	f000 80d2 	beq.w	8010f74 <_dtoa_r+0x514>
 8010dd0:	427c      	negs	r4, r7
 8010dd2:	4b92      	ldr	r3, [pc, #584]	@ (801101c <_dtoa_r+0x5bc>)
 8010dd4:	4d92      	ldr	r5, [pc, #584]	@ (8011020 <_dtoa_r+0x5c0>)
 8010dd6:	f004 020f 	and.w	r2, r4, #15
 8010dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010de6:	f7ef fc07 	bl	80005f8 <__aeabi_dmul>
 8010dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010dee:	1124      	asrs	r4, r4, #4
 8010df0:	2300      	movs	r3, #0
 8010df2:	2602      	movs	r6, #2
 8010df4:	2c00      	cmp	r4, #0
 8010df6:	f040 80b2 	bne.w	8010f5e <_dtoa_r+0x4fe>
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d1d3      	bne.n	8010da6 <_dtoa_r+0x346>
 8010dfe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010e00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f000 80b7 	beq.w	8010f78 <_dtoa_r+0x518>
 8010e0a:	4b86      	ldr	r3, [pc, #536]	@ (8011024 <_dtoa_r+0x5c4>)
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	4620      	mov	r0, r4
 8010e10:	4629      	mov	r1, r5
 8010e12:	f7ef fe63 	bl	8000adc <__aeabi_dcmplt>
 8010e16:	2800      	cmp	r0, #0
 8010e18:	f000 80ae 	beq.w	8010f78 <_dtoa_r+0x518>
 8010e1c:	9b07      	ldr	r3, [sp, #28]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f000 80aa 	beq.w	8010f78 <_dtoa_r+0x518>
 8010e24:	9b00      	ldr	r3, [sp, #0]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	dd37      	ble.n	8010e9a <_dtoa_r+0x43a>
 8010e2a:	1e7b      	subs	r3, r7, #1
 8010e2c:	9304      	str	r3, [sp, #16]
 8010e2e:	4620      	mov	r0, r4
 8010e30:	4b7d      	ldr	r3, [pc, #500]	@ (8011028 <_dtoa_r+0x5c8>)
 8010e32:	2200      	movs	r2, #0
 8010e34:	4629      	mov	r1, r5
 8010e36:	f7ef fbdf 	bl	80005f8 <__aeabi_dmul>
 8010e3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e3e:	9c00      	ldr	r4, [sp, #0]
 8010e40:	3601      	adds	r6, #1
 8010e42:	4630      	mov	r0, r6
 8010e44:	f7ef fb6e 	bl	8000524 <__aeabi_i2d>
 8010e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e4c:	f7ef fbd4 	bl	80005f8 <__aeabi_dmul>
 8010e50:	4b76      	ldr	r3, [pc, #472]	@ (801102c <_dtoa_r+0x5cc>)
 8010e52:	2200      	movs	r2, #0
 8010e54:	f7ef fa1a 	bl	800028c <__adddf3>
 8010e58:	4605      	mov	r5, r0
 8010e5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010e5e:	2c00      	cmp	r4, #0
 8010e60:	f040 808d 	bne.w	8010f7e <_dtoa_r+0x51e>
 8010e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e68:	4b71      	ldr	r3, [pc, #452]	@ (8011030 <_dtoa_r+0x5d0>)
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	f7ef fa0c 	bl	8000288 <__aeabi_dsub>
 8010e70:	4602      	mov	r2, r0
 8010e72:	460b      	mov	r3, r1
 8010e74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010e78:	462a      	mov	r2, r5
 8010e7a:	4633      	mov	r3, r6
 8010e7c:	f7ef fe4c 	bl	8000b18 <__aeabi_dcmpgt>
 8010e80:	2800      	cmp	r0, #0
 8010e82:	f040 828b 	bne.w	801139c <_dtoa_r+0x93c>
 8010e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e8a:	462a      	mov	r2, r5
 8010e8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010e90:	f7ef fe24 	bl	8000adc <__aeabi_dcmplt>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	f040 8128 	bne.w	80110ea <_dtoa_r+0x68a>
 8010e9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010e9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010ea2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	f2c0 815a 	blt.w	801115e <_dtoa_r+0x6fe>
 8010eaa:	2f0e      	cmp	r7, #14
 8010eac:	f300 8157 	bgt.w	801115e <_dtoa_r+0x6fe>
 8010eb0:	4b5a      	ldr	r3, [pc, #360]	@ (801101c <_dtoa_r+0x5bc>)
 8010eb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010eb6:	ed93 7b00 	vldr	d7, [r3]
 8010eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	ed8d 7b00 	vstr	d7, [sp]
 8010ec2:	da03      	bge.n	8010ecc <_dtoa_r+0x46c>
 8010ec4:	9b07      	ldr	r3, [sp, #28]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	f340 8101 	ble.w	80110ce <_dtoa_r+0x66e>
 8010ecc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010ed0:	4656      	mov	r6, sl
 8010ed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	4629      	mov	r1, r5
 8010eda:	f7ef fcb7 	bl	800084c <__aeabi_ddiv>
 8010ede:	f7ef fe3b 	bl	8000b58 <__aeabi_d2iz>
 8010ee2:	4680      	mov	r8, r0
 8010ee4:	f7ef fb1e 	bl	8000524 <__aeabi_i2d>
 8010ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010eec:	f7ef fb84 	bl	80005f8 <__aeabi_dmul>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	4629      	mov	r1, r5
 8010ef8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010efc:	f7ef f9c4 	bl	8000288 <__aeabi_dsub>
 8010f00:	f806 4b01 	strb.w	r4, [r6], #1
 8010f04:	9d07      	ldr	r5, [sp, #28]
 8010f06:	eba6 040a 	sub.w	r4, r6, sl
 8010f0a:	42a5      	cmp	r5, r4
 8010f0c:	4602      	mov	r2, r0
 8010f0e:	460b      	mov	r3, r1
 8010f10:	f040 8117 	bne.w	8011142 <_dtoa_r+0x6e2>
 8010f14:	f7ef f9ba 	bl	800028c <__adddf3>
 8010f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	460d      	mov	r5, r1
 8010f20:	f7ef fdfa 	bl	8000b18 <__aeabi_dcmpgt>
 8010f24:	2800      	cmp	r0, #0
 8010f26:	f040 80f9 	bne.w	801111c <_dtoa_r+0x6bc>
 8010f2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f2e:	4620      	mov	r0, r4
 8010f30:	4629      	mov	r1, r5
 8010f32:	f7ef fdc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f36:	b118      	cbz	r0, 8010f40 <_dtoa_r+0x4e0>
 8010f38:	f018 0f01 	tst.w	r8, #1
 8010f3c:	f040 80ee 	bne.w	801111c <_dtoa_r+0x6bc>
 8010f40:	4649      	mov	r1, r9
 8010f42:	4658      	mov	r0, fp
 8010f44:	f000 fc90 	bl	8011868 <_Bfree>
 8010f48:	2300      	movs	r3, #0
 8010f4a:	7033      	strb	r3, [r6, #0]
 8010f4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010f4e:	3701      	adds	r7, #1
 8010f50:	601f      	str	r7, [r3, #0]
 8010f52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	f000 831d 	beq.w	8011594 <_dtoa_r+0xb34>
 8010f5a:	601e      	str	r6, [r3, #0]
 8010f5c:	e31a      	b.n	8011594 <_dtoa_r+0xb34>
 8010f5e:	07e2      	lsls	r2, r4, #31
 8010f60:	d505      	bpl.n	8010f6e <_dtoa_r+0x50e>
 8010f62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010f66:	f7ef fb47 	bl	80005f8 <__aeabi_dmul>
 8010f6a:	3601      	adds	r6, #1
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	1064      	asrs	r4, r4, #1
 8010f70:	3508      	adds	r5, #8
 8010f72:	e73f      	b.n	8010df4 <_dtoa_r+0x394>
 8010f74:	2602      	movs	r6, #2
 8010f76:	e742      	b.n	8010dfe <_dtoa_r+0x39e>
 8010f78:	9c07      	ldr	r4, [sp, #28]
 8010f7a:	9704      	str	r7, [sp, #16]
 8010f7c:	e761      	b.n	8010e42 <_dtoa_r+0x3e2>
 8010f7e:	4b27      	ldr	r3, [pc, #156]	@ (801101c <_dtoa_r+0x5bc>)
 8010f80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010f82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010f8a:	4454      	add	r4, sl
 8010f8c:	2900      	cmp	r1, #0
 8010f8e:	d053      	beq.n	8011038 <_dtoa_r+0x5d8>
 8010f90:	4928      	ldr	r1, [pc, #160]	@ (8011034 <_dtoa_r+0x5d4>)
 8010f92:	2000      	movs	r0, #0
 8010f94:	f7ef fc5a 	bl	800084c <__aeabi_ddiv>
 8010f98:	4633      	mov	r3, r6
 8010f9a:	462a      	mov	r2, r5
 8010f9c:	f7ef f974 	bl	8000288 <__aeabi_dsub>
 8010fa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010fa4:	4656      	mov	r6, sl
 8010fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010faa:	f7ef fdd5 	bl	8000b58 <__aeabi_d2iz>
 8010fae:	4605      	mov	r5, r0
 8010fb0:	f7ef fab8 	bl	8000524 <__aeabi_i2d>
 8010fb4:	4602      	mov	r2, r0
 8010fb6:	460b      	mov	r3, r1
 8010fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fbc:	f7ef f964 	bl	8000288 <__aeabi_dsub>
 8010fc0:	3530      	adds	r5, #48	@ 0x30
 8010fc2:	4602      	mov	r2, r0
 8010fc4:	460b      	mov	r3, r1
 8010fc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010fca:	f806 5b01 	strb.w	r5, [r6], #1
 8010fce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010fd2:	f7ef fd83 	bl	8000adc <__aeabi_dcmplt>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	d171      	bne.n	80110be <_dtoa_r+0x65e>
 8010fda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010fde:	4911      	ldr	r1, [pc, #68]	@ (8011024 <_dtoa_r+0x5c4>)
 8010fe0:	2000      	movs	r0, #0
 8010fe2:	f7ef f951 	bl	8000288 <__aeabi_dsub>
 8010fe6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010fea:	f7ef fd77 	bl	8000adc <__aeabi_dcmplt>
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	f040 8095 	bne.w	801111e <_dtoa_r+0x6be>
 8010ff4:	42a6      	cmp	r6, r4
 8010ff6:	f43f af50 	beq.w	8010e9a <_dtoa_r+0x43a>
 8010ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8011028 <_dtoa_r+0x5c8>)
 8011000:	2200      	movs	r2, #0
 8011002:	f7ef faf9 	bl	80005f8 <__aeabi_dmul>
 8011006:	4b08      	ldr	r3, [pc, #32]	@ (8011028 <_dtoa_r+0x5c8>)
 8011008:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801100c:	2200      	movs	r2, #0
 801100e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011012:	f7ef faf1 	bl	80005f8 <__aeabi_dmul>
 8011016:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801101a:	e7c4      	b.n	8010fa6 <_dtoa_r+0x546>
 801101c:	08014818 	.word	0x08014818
 8011020:	080147f0 	.word	0x080147f0
 8011024:	3ff00000 	.word	0x3ff00000
 8011028:	40240000 	.word	0x40240000
 801102c:	401c0000 	.word	0x401c0000
 8011030:	40140000 	.word	0x40140000
 8011034:	3fe00000 	.word	0x3fe00000
 8011038:	4631      	mov	r1, r6
 801103a:	4628      	mov	r0, r5
 801103c:	f7ef fadc 	bl	80005f8 <__aeabi_dmul>
 8011040:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011044:	9415      	str	r4, [sp, #84]	@ 0x54
 8011046:	4656      	mov	r6, sl
 8011048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801104c:	f7ef fd84 	bl	8000b58 <__aeabi_d2iz>
 8011050:	4605      	mov	r5, r0
 8011052:	f7ef fa67 	bl	8000524 <__aeabi_i2d>
 8011056:	4602      	mov	r2, r0
 8011058:	460b      	mov	r3, r1
 801105a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801105e:	f7ef f913 	bl	8000288 <__aeabi_dsub>
 8011062:	3530      	adds	r5, #48	@ 0x30
 8011064:	f806 5b01 	strb.w	r5, [r6], #1
 8011068:	4602      	mov	r2, r0
 801106a:	460b      	mov	r3, r1
 801106c:	42a6      	cmp	r6, r4
 801106e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011072:	f04f 0200 	mov.w	r2, #0
 8011076:	d124      	bne.n	80110c2 <_dtoa_r+0x662>
 8011078:	4bac      	ldr	r3, [pc, #688]	@ (801132c <_dtoa_r+0x8cc>)
 801107a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801107e:	f7ef f905 	bl	800028c <__adddf3>
 8011082:	4602      	mov	r2, r0
 8011084:	460b      	mov	r3, r1
 8011086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801108a:	f7ef fd45 	bl	8000b18 <__aeabi_dcmpgt>
 801108e:	2800      	cmp	r0, #0
 8011090:	d145      	bne.n	801111e <_dtoa_r+0x6be>
 8011092:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011096:	49a5      	ldr	r1, [pc, #660]	@ (801132c <_dtoa_r+0x8cc>)
 8011098:	2000      	movs	r0, #0
 801109a:	f7ef f8f5 	bl	8000288 <__aeabi_dsub>
 801109e:	4602      	mov	r2, r0
 80110a0:	460b      	mov	r3, r1
 80110a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110a6:	f7ef fd19 	bl	8000adc <__aeabi_dcmplt>
 80110aa:	2800      	cmp	r0, #0
 80110ac:	f43f aef5 	beq.w	8010e9a <_dtoa_r+0x43a>
 80110b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80110b2:	1e73      	subs	r3, r6, #1
 80110b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80110b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80110ba:	2b30      	cmp	r3, #48	@ 0x30
 80110bc:	d0f8      	beq.n	80110b0 <_dtoa_r+0x650>
 80110be:	9f04      	ldr	r7, [sp, #16]
 80110c0:	e73e      	b.n	8010f40 <_dtoa_r+0x4e0>
 80110c2:	4b9b      	ldr	r3, [pc, #620]	@ (8011330 <_dtoa_r+0x8d0>)
 80110c4:	f7ef fa98 	bl	80005f8 <__aeabi_dmul>
 80110c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110cc:	e7bc      	b.n	8011048 <_dtoa_r+0x5e8>
 80110ce:	d10c      	bne.n	80110ea <_dtoa_r+0x68a>
 80110d0:	4b98      	ldr	r3, [pc, #608]	@ (8011334 <_dtoa_r+0x8d4>)
 80110d2:	2200      	movs	r2, #0
 80110d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80110d8:	f7ef fa8e 	bl	80005f8 <__aeabi_dmul>
 80110dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80110e0:	f7ef fd10 	bl	8000b04 <__aeabi_dcmpge>
 80110e4:	2800      	cmp	r0, #0
 80110e6:	f000 8157 	beq.w	8011398 <_dtoa_r+0x938>
 80110ea:	2400      	movs	r4, #0
 80110ec:	4625      	mov	r5, r4
 80110ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110f0:	43db      	mvns	r3, r3
 80110f2:	9304      	str	r3, [sp, #16]
 80110f4:	4656      	mov	r6, sl
 80110f6:	2700      	movs	r7, #0
 80110f8:	4621      	mov	r1, r4
 80110fa:	4658      	mov	r0, fp
 80110fc:	f000 fbb4 	bl	8011868 <_Bfree>
 8011100:	2d00      	cmp	r5, #0
 8011102:	d0dc      	beq.n	80110be <_dtoa_r+0x65e>
 8011104:	b12f      	cbz	r7, 8011112 <_dtoa_r+0x6b2>
 8011106:	42af      	cmp	r7, r5
 8011108:	d003      	beq.n	8011112 <_dtoa_r+0x6b2>
 801110a:	4639      	mov	r1, r7
 801110c:	4658      	mov	r0, fp
 801110e:	f000 fbab 	bl	8011868 <_Bfree>
 8011112:	4629      	mov	r1, r5
 8011114:	4658      	mov	r0, fp
 8011116:	f000 fba7 	bl	8011868 <_Bfree>
 801111a:	e7d0      	b.n	80110be <_dtoa_r+0x65e>
 801111c:	9704      	str	r7, [sp, #16]
 801111e:	4633      	mov	r3, r6
 8011120:	461e      	mov	r6, r3
 8011122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011126:	2a39      	cmp	r2, #57	@ 0x39
 8011128:	d107      	bne.n	801113a <_dtoa_r+0x6da>
 801112a:	459a      	cmp	sl, r3
 801112c:	d1f8      	bne.n	8011120 <_dtoa_r+0x6c0>
 801112e:	9a04      	ldr	r2, [sp, #16]
 8011130:	3201      	adds	r2, #1
 8011132:	9204      	str	r2, [sp, #16]
 8011134:	2230      	movs	r2, #48	@ 0x30
 8011136:	f88a 2000 	strb.w	r2, [sl]
 801113a:	781a      	ldrb	r2, [r3, #0]
 801113c:	3201      	adds	r2, #1
 801113e:	701a      	strb	r2, [r3, #0]
 8011140:	e7bd      	b.n	80110be <_dtoa_r+0x65e>
 8011142:	4b7b      	ldr	r3, [pc, #492]	@ (8011330 <_dtoa_r+0x8d0>)
 8011144:	2200      	movs	r2, #0
 8011146:	f7ef fa57 	bl	80005f8 <__aeabi_dmul>
 801114a:	2200      	movs	r2, #0
 801114c:	2300      	movs	r3, #0
 801114e:	4604      	mov	r4, r0
 8011150:	460d      	mov	r5, r1
 8011152:	f7ef fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8011156:	2800      	cmp	r0, #0
 8011158:	f43f aebb 	beq.w	8010ed2 <_dtoa_r+0x472>
 801115c:	e6f0      	b.n	8010f40 <_dtoa_r+0x4e0>
 801115e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011160:	2a00      	cmp	r2, #0
 8011162:	f000 80db 	beq.w	801131c <_dtoa_r+0x8bc>
 8011166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011168:	2a01      	cmp	r2, #1
 801116a:	f300 80bf 	bgt.w	80112ec <_dtoa_r+0x88c>
 801116e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011170:	2a00      	cmp	r2, #0
 8011172:	f000 80b7 	beq.w	80112e4 <_dtoa_r+0x884>
 8011176:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801117a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801117c:	4646      	mov	r6, r8
 801117e:	9a08      	ldr	r2, [sp, #32]
 8011180:	2101      	movs	r1, #1
 8011182:	441a      	add	r2, r3
 8011184:	4658      	mov	r0, fp
 8011186:	4498      	add	r8, r3
 8011188:	9208      	str	r2, [sp, #32]
 801118a:	f000 fc21 	bl	80119d0 <__i2b>
 801118e:	4605      	mov	r5, r0
 8011190:	b15e      	cbz	r6, 80111aa <_dtoa_r+0x74a>
 8011192:	9b08      	ldr	r3, [sp, #32]
 8011194:	2b00      	cmp	r3, #0
 8011196:	dd08      	ble.n	80111aa <_dtoa_r+0x74a>
 8011198:	42b3      	cmp	r3, r6
 801119a:	9a08      	ldr	r2, [sp, #32]
 801119c:	bfa8      	it	ge
 801119e:	4633      	movge	r3, r6
 80111a0:	eba8 0803 	sub.w	r8, r8, r3
 80111a4:	1af6      	subs	r6, r6, r3
 80111a6:	1ad3      	subs	r3, r2, r3
 80111a8:	9308      	str	r3, [sp, #32]
 80111aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111ac:	b1f3      	cbz	r3, 80111ec <_dtoa_r+0x78c>
 80111ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	f000 80b7 	beq.w	8011324 <_dtoa_r+0x8c4>
 80111b6:	b18c      	cbz	r4, 80111dc <_dtoa_r+0x77c>
 80111b8:	4629      	mov	r1, r5
 80111ba:	4622      	mov	r2, r4
 80111bc:	4658      	mov	r0, fp
 80111be:	f000 fcc7 	bl	8011b50 <__pow5mult>
 80111c2:	464a      	mov	r2, r9
 80111c4:	4601      	mov	r1, r0
 80111c6:	4605      	mov	r5, r0
 80111c8:	4658      	mov	r0, fp
 80111ca:	f000 fc17 	bl	80119fc <__multiply>
 80111ce:	4649      	mov	r1, r9
 80111d0:	9004      	str	r0, [sp, #16]
 80111d2:	4658      	mov	r0, fp
 80111d4:	f000 fb48 	bl	8011868 <_Bfree>
 80111d8:	9b04      	ldr	r3, [sp, #16]
 80111da:	4699      	mov	r9, r3
 80111dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111de:	1b1a      	subs	r2, r3, r4
 80111e0:	d004      	beq.n	80111ec <_dtoa_r+0x78c>
 80111e2:	4649      	mov	r1, r9
 80111e4:	4658      	mov	r0, fp
 80111e6:	f000 fcb3 	bl	8011b50 <__pow5mult>
 80111ea:	4681      	mov	r9, r0
 80111ec:	2101      	movs	r1, #1
 80111ee:	4658      	mov	r0, fp
 80111f0:	f000 fbee 	bl	80119d0 <__i2b>
 80111f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111f6:	4604      	mov	r4, r0
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	f000 81cf 	beq.w	801159c <_dtoa_r+0xb3c>
 80111fe:	461a      	mov	r2, r3
 8011200:	4601      	mov	r1, r0
 8011202:	4658      	mov	r0, fp
 8011204:	f000 fca4 	bl	8011b50 <__pow5mult>
 8011208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801120a:	2b01      	cmp	r3, #1
 801120c:	4604      	mov	r4, r0
 801120e:	f300 8095 	bgt.w	801133c <_dtoa_r+0x8dc>
 8011212:	9b02      	ldr	r3, [sp, #8]
 8011214:	2b00      	cmp	r3, #0
 8011216:	f040 8087 	bne.w	8011328 <_dtoa_r+0x8c8>
 801121a:	9b03      	ldr	r3, [sp, #12]
 801121c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011220:	2b00      	cmp	r3, #0
 8011222:	f040 8089 	bne.w	8011338 <_dtoa_r+0x8d8>
 8011226:	9b03      	ldr	r3, [sp, #12]
 8011228:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801122c:	0d1b      	lsrs	r3, r3, #20
 801122e:	051b      	lsls	r3, r3, #20
 8011230:	b12b      	cbz	r3, 801123e <_dtoa_r+0x7de>
 8011232:	9b08      	ldr	r3, [sp, #32]
 8011234:	3301      	adds	r3, #1
 8011236:	9308      	str	r3, [sp, #32]
 8011238:	f108 0801 	add.w	r8, r8, #1
 801123c:	2301      	movs	r3, #1
 801123e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011242:	2b00      	cmp	r3, #0
 8011244:	f000 81b0 	beq.w	80115a8 <_dtoa_r+0xb48>
 8011248:	6923      	ldr	r3, [r4, #16]
 801124a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801124e:	6918      	ldr	r0, [r3, #16]
 8011250:	f000 fb72 	bl	8011938 <__hi0bits>
 8011254:	f1c0 0020 	rsb	r0, r0, #32
 8011258:	9b08      	ldr	r3, [sp, #32]
 801125a:	4418      	add	r0, r3
 801125c:	f010 001f 	ands.w	r0, r0, #31
 8011260:	d077      	beq.n	8011352 <_dtoa_r+0x8f2>
 8011262:	f1c0 0320 	rsb	r3, r0, #32
 8011266:	2b04      	cmp	r3, #4
 8011268:	dd6b      	ble.n	8011342 <_dtoa_r+0x8e2>
 801126a:	9b08      	ldr	r3, [sp, #32]
 801126c:	f1c0 001c 	rsb	r0, r0, #28
 8011270:	4403      	add	r3, r0
 8011272:	4480      	add	r8, r0
 8011274:	4406      	add	r6, r0
 8011276:	9308      	str	r3, [sp, #32]
 8011278:	f1b8 0f00 	cmp.w	r8, #0
 801127c:	dd05      	ble.n	801128a <_dtoa_r+0x82a>
 801127e:	4649      	mov	r1, r9
 8011280:	4642      	mov	r2, r8
 8011282:	4658      	mov	r0, fp
 8011284:	f000 fcbe 	bl	8011c04 <__lshift>
 8011288:	4681      	mov	r9, r0
 801128a:	9b08      	ldr	r3, [sp, #32]
 801128c:	2b00      	cmp	r3, #0
 801128e:	dd05      	ble.n	801129c <_dtoa_r+0x83c>
 8011290:	4621      	mov	r1, r4
 8011292:	461a      	mov	r2, r3
 8011294:	4658      	mov	r0, fp
 8011296:	f000 fcb5 	bl	8011c04 <__lshift>
 801129a:	4604      	mov	r4, r0
 801129c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d059      	beq.n	8011356 <_dtoa_r+0x8f6>
 80112a2:	4621      	mov	r1, r4
 80112a4:	4648      	mov	r0, r9
 80112a6:	f000 fd19 	bl	8011cdc <__mcmp>
 80112aa:	2800      	cmp	r0, #0
 80112ac:	da53      	bge.n	8011356 <_dtoa_r+0x8f6>
 80112ae:	1e7b      	subs	r3, r7, #1
 80112b0:	9304      	str	r3, [sp, #16]
 80112b2:	4649      	mov	r1, r9
 80112b4:	2300      	movs	r3, #0
 80112b6:	220a      	movs	r2, #10
 80112b8:	4658      	mov	r0, fp
 80112ba:	f000 faf7 	bl	80118ac <__multadd>
 80112be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80112c0:	4681      	mov	r9, r0
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	f000 8172 	beq.w	80115ac <_dtoa_r+0xb4c>
 80112c8:	2300      	movs	r3, #0
 80112ca:	4629      	mov	r1, r5
 80112cc:	220a      	movs	r2, #10
 80112ce:	4658      	mov	r0, fp
 80112d0:	f000 faec 	bl	80118ac <__multadd>
 80112d4:	9b00      	ldr	r3, [sp, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	4605      	mov	r5, r0
 80112da:	dc67      	bgt.n	80113ac <_dtoa_r+0x94c>
 80112dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112de:	2b02      	cmp	r3, #2
 80112e0:	dc41      	bgt.n	8011366 <_dtoa_r+0x906>
 80112e2:	e063      	b.n	80113ac <_dtoa_r+0x94c>
 80112e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80112e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80112ea:	e746      	b.n	801117a <_dtoa_r+0x71a>
 80112ec:	9b07      	ldr	r3, [sp, #28]
 80112ee:	1e5c      	subs	r4, r3, #1
 80112f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112f2:	42a3      	cmp	r3, r4
 80112f4:	bfbf      	itttt	lt
 80112f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80112f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80112fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80112fc:	1ae3      	sublt	r3, r4, r3
 80112fe:	bfb4      	ite	lt
 8011300:	18d2      	addlt	r2, r2, r3
 8011302:	1b1c      	subge	r4, r3, r4
 8011304:	9b07      	ldr	r3, [sp, #28]
 8011306:	bfbc      	itt	lt
 8011308:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801130a:	2400      	movlt	r4, #0
 801130c:	2b00      	cmp	r3, #0
 801130e:	bfb5      	itete	lt
 8011310:	eba8 0603 	sublt.w	r6, r8, r3
 8011314:	9b07      	ldrge	r3, [sp, #28]
 8011316:	2300      	movlt	r3, #0
 8011318:	4646      	movge	r6, r8
 801131a:	e730      	b.n	801117e <_dtoa_r+0x71e>
 801131c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801131e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011320:	4646      	mov	r6, r8
 8011322:	e735      	b.n	8011190 <_dtoa_r+0x730>
 8011324:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011326:	e75c      	b.n	80111e2 <_dtoa_r+0x782>
 8011328:	2300      	movs	r3, #0
 801132a:	e788      	b.n	801123e <_dtoa_r+0x7de>
 801132c:	3fe00000 	.word	0x3fe00000
 8011330:	40240000 	.word	0x40240000
 8011334:	40140000 	.word	0x40140000
 8011338:	9b02      	ldr	r3, [sp, #8]
 801133a:	e780      	b.n	801123e <_dtoa_r+0x7de>
 801133c:	2300      	movs	r3, #0
 801133e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011340:	e782      	b.n	8011248 <_dtoa_r+0x7e8>
 8011342:	d099      	beq.n	8011278 <_dtoa_r+0x818>
 8011344:	9a08      	ldr	r2, [sp, #32]
 8011346:	331c      	adds	r3, #28
 8011348:	441a      	add	r2, r3
 801134a:	4498      	add	r8, r3
 801134c:	441e      	add	r6, r3
 801134e:	9208      	str	r2, [sp, #32]
 8011350:	e792      	b.n	8011278 <_dtoa_r+0x818>
 8011352:	4603      	mov	r3, r0
 8011354:	e7f6      	b.n	8011344 <_dtoa_r+0x8e4>
 8011356:	9b07      	ldr	r3, [sp, #28]
 8011358:	9704      	str	r7, [sp, #16]
 801135a:	2b00      	cmp	r3, #0
 801135c:	dc20      	bgt.n	80113a0 <_dtoa_r+0x940>
 801135e:	9300      	str	r3, [sp, #0]
 8011360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011362:	2b02      	cmp	r3, #2
 8011364:	dd1e      	ble.n	80113a4 <_dtoa_r+0x944>
 8011366:	9b00      	ldr	r3, [sp, #0]
 8011368:	2b00      	cmp	r3, #0
 801136a:	f47f aec0 	bne.w	80110ee <_dtoa_r+0x68e>
 801136e:	4621      	mov	r1, r4
 8011370:	2205      	movs	r2, #5
 8011372:	4658      	mov	r0, fp
 8011374:	f000 fa9a 	bl	80118ac <__multadd>
 8011378:	4601      	mov	r1, r0
 801137a:	4604      	mov	r4, r0
 801137c:	4648      	mov	r0, r9
 801137e:	f000 fcad 	bl	8011cdc <__mcmp>
 8011382:	2800      	cmp	r0, #0
 8011384:	f77f aeb3 	ble.w	80110ee <_dtoa_r+0x68e>
 8011388:	4656      	mov	r6, sl
 801138a:	2331      	movs	r3, #49	@ 0x31
 801138c:	f806 3b01 	strb.w	r3, [r6], #1
 8011390:	9b04      	ldr	r3, [sp, #16]
 8011392:	3301      	adds	r3, #1
 8011394:	9304      	str	r3, [sp, #16]
 8011396:	e6ae      	b.n	80110f6 <_dtoa_r+0x696>
 8011398:	9c07      	ldr	r4, [sp, #28]
 801139a:	9704      	str	r7, [sp, #16]
 801139c:	4625      	mov	r5, r4
 801139e:	e7f3      	b.n	8011388 <_dtoa_r+0x928>
 80113a0:	9b07      	ldr	r3, [sp, #28]
 80113a2:	9300      	str	r3, [sp, #0]
 80113a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	f000 8104 	beq.w	80115b4 <_dtoa_r+0xb54>
 80113ac:	2e00      	cmp	r6, #0
 80113ae:	dd05      	ble.n	80113bc <_dtoa_r+0x95c>
 80113b0:	4629      	mov	r1, r5
 80113b2:	4632      	mov	r2, r6
 80113b4:	4658      	mov	r0, fp
 80113b6:	f000 fc25 	bl	8011c04 <__lshift>
 80113ba:	4605      	mov	r5, r0
 80113bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d05a      	beq.n	8011478 <_dtoa_r+0xa18>
 80113c2:	6869      	ldr	r1, [r5, #4]
 80113c4:	4658      	mov	r0, fp
 80113c6:	f000 fa0f 	bl	80117e8 <_Balloc>
 80113ca:	4606      	mov	r6, r0
 80113cc:	b928      	cbnz	r0, 80113da <_dtoa_r+0x97a>
 80113ce:	4b84      	ldr	r3, [pc, #528]	@ (80115e0 <_dtoa_r+0xb80>)
 80113d0:	4602      	mov	r2, r0
 80113d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80113d6:	f7ff bb5a 	b.w	8010a8e <_dtoa_r+0x2e>
 80113da:	692a      	ldr	r2, [r5, #16]
 80113dc:	3202      	adds	r2, #2
 80113de:	0092      	lsls	r2, r2, #2
 80113e0:	f105 010c 	add.w	r1, r5, #12
 80113e4:	300c      	adds	r0, #12
 80113e6:	f7ff faa2 	bl	801092e <memcpy>
 80113ea:	2201      	movs	r2, #1
 80113ec:	4631      	mov	r1, r6
 80113ee:	4658      	mov	r0, fp
 80113f0:	f000 fc08 	bl	8011c04 <__lshift>
 80113f4:	f10a 0301 	add.w	r3, sl, #1
 80113f8:	9307      	str	r3, [sp, #28]
 80113fa:	9b00      	ldr	r3, [sp, #0]
 80113fc:	4453      	add	r3, sl
 80113fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011400:	9b02      	ldr	r3, [sp, #8]
 8011402:	f003 0301 	and.w	r3, r3, #1
 8011406:	462f      	mov	r7, r5
 8011408:	930a      	str	r3, [sp, #40]	@ 0x28
 801140a:	4605      	mov	r5, r0
 801140c:	9b07      	ldr	r3, [sp, #28]
 801140e:	4621      	mov	r1, r4
 8011410:	3b01      	subs	r3, #1
 8011412:	4648      	mov	r0, r9
 8011414:	9300      	str	r3, [sp, #0]
 8011416:	f7ff fa98 	bl	801094a <quorem>
 801141a:	4639      	mov	r1, r7
 801141c:	9002      	str	r0, [sp, #8]
 801141e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011422:	4648      	mov	r0, r9
 8011424:	f000 fc5a 	bl	8011cdc <__mcmp>
 8011428:	462a      	mov	r2, r5
 801142a:	9008      	str	r0, [sp, #32]
 801142c:	4621      	mov	r1, r4
 801142e:	4658      	mov	r0, fp
 8011430:	f000 fc70 	bl	8011d14 <__mdiff>
 8011434:	68c2      	ldr	r2, [r0, #12]
 8011436:	4606      	mov	r6, r0
 8011438:	bb02      	cbnz	r2, 801147c <_dtoa_r+0xa1c>
 801143a:	4601      	mov	r1, r0
 801143c:	4648      	mov	r0, r9
 801143e:	f000 fc4d 	bl	8011cdc <__mcmp>
 8011442:	4602      	mov	r2, r0
 8011444:	4631      	mov	r1, r6
 8011446:	4658      	mov	r0, fp
 8011448:	920e      	str	r2, [sp, #56]	@ 0x38
 801144a:	f000 fa0d 	bl	8011868 <_Bfree>
 801144e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011450:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011452:	9e07      	ldr	r6, [sp, #28]
 8011454:	ea43 0102 	orr.w	r1, r3, r2
 8011458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801145a:	4319      	orrs	r1, r3
 801145c:	d110      	bne.n	8011480 <_dtoa_r+0xa20>
 801145e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011462:	d029      	beq.n	80114b8 <_dtoa_r+0xa58>
 8011464:	9b08      	ldr	r3, [sp, #32]
 8011466:	2b00      	cmp	r3, #0
 8011468:	dd02      	ble.n	8011470 <_dtoa_r+0xa10>
 801146a:	9b02      	ldr	r3, [sp, #8]
 801146c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011470:	9b00      	ldr	r3, [sp, #0]
 8011472:	f883 8000 	strb.w	r8, [r3]
 8011476:	e63f      	b.n	80110f8 <_dtoa_r+0x698>
 8011478:	4628      	mov	r0, r5
 801147a:	e7bb      	b.n	80113f4 <_dtoa_r+0x994>
 801147c:	2201      	movs	r2, #1
 801147e:	e7e1      	b.n	8011444 <_dtoa_r+0x9e4>
 8011480:	9b08      	ldr	r3, [sp, #32]
 8011482:	2b00      	cmp	r3, #0
 8011484:	db04      	blt.n	8011490 <_dtoa_r+0xa30>
 8011486:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011488:	430b      	orrs	r3, r1
 801148a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801148c:	430b      	orrs	r3, r1
 801148e:	d120      	bne.n	80114d2 <_dtoa_r+0xa72>
 8011490:	2a00      	cmp	r2, #0
 8011492:	dded      	ble.n	8011470 <_dtoa_r+0xa10>
 8011494:	4649      	mov	r1, r9
 8011496:	2201      	movs	r2, #1
 8011498:	4658      	mov	r0, fp
 801149a:	f000 fbb3 	bl	8011c04 <__lshift>
 801149e:	4621      	mov	r1, r4
 80114a0:	4681      	mov	r9, r0
 80114a2:	f000 fc1b 	bl	8011cdc <__mcmp>
 80114a6:	2800      	cmp	r0, #0
 80114a8:	dc03      	bgt.n	80114b2 <_dtoa_r+0xa52>
 80114aa:	d1e1      	bne.n	8011470 <_dtoa_r+0xa10>
 80114ac:	f018 0f01 	tst.w	r8, #1
 80114b0:	d0de      	beq.n	8011470 <_dtoa_r+0xa10>
 80114b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80114b6:	d1d8      	bne.n	801146a <_dtoa_r+0xa0a>
 80114b8:	9a00      	ldr	r2, [sp, #0]
 80114ba:	2339      	movs	r3, #57	@ 0x39
 80114bc:	7013      	strb	r3, [r2, #0]
 80114be:	4633      	mov	r3, r6
 80114c0:	461e      	mov	r6, r3
 80114c2:	3b01      	subs	r3, #1
 80114c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80114c8:	2a39      	cmp	r2, #57	@ 0x39
 80114ca:	d052      	beq.n	8011572 <_dtoa_r+0xb12>
 80114cc:	3201      	adds	r2, #1
 80114ce:	701a      	strb	r2, [r3, #0]
 80114d0:	e612      	b.n	80110f8 <_dtoa_r+0x698>
 80114d2:	2a00      	cmp	r2, #0
 80114d4:	dd07      	ble.n	80114e6 <_dtoa_r+0xa86>
 80114d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80114da:	d0ed      	beq.n	80114b8 <_dtoa_r+0xa58>
 80114dc:	9a00      	ldr	r2, [sp, #0]
 80114de:	f108 0301 	add.w	r3, r8, #1
 80114e2:	7013      	strb	r3, [r2, #0]
 80114e4:	e608      	b.n	80110f8 <_dtoa_r+0x698>
 80114e6:	9b07      	ldr	r3, [sp, #28]
 80114e8:	9a07      	ldr	r2, [sp, #28]
 80114ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80114ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d028      	beq.n	8011546 <_dtoa_r+0xae6>
 80114f4:	4649      	mov	r1, r9
 80114f6:	2300      	movs	r3, #0
 80114f8:	220a      	movs	r2, #10
 80114fa:	4658      	mov	r0, fp
 80114fc:	f000 f9d6 	bl	80118ac <__multadd>
 8011500:	42af      	cmp	r7, r5
 8011502:	4681      	mov	r9, r0
 8011504:	f04f 0300 	mov.w	r3, #0
 8011508:	f04f 020a 	mov.w	r2, #10
 801150c:	4639      	mov	r1, r7
 801150e:	4658      	mov	r0, fp
 8011510:	d107      	bne.n	8011522 <_dtoa_r+0xac2>
 8011512:	f000 f9cb 	bl	80118ac <__multadd>
 8011516:	4607      	mov	r7, r0
 8011518:	4605      	mov	r5, r0
 801151a:	9b07      	ldr	r3, [sp, #28]
 801151c:	3301      	adds	r3, #1
 801151e:	9307      	str	r3, [sp, #28]
 8011520:	e774      	b.n	801140c <_dtoa_r+0x9ac>
 8011522:	f000 f9c3 	bl	80118ac <__multadd>
 8011526:	4629      	mov	r1, r5
 8011528:	4607      	mov	r7, r0
 801152a:	2300      	movs	r3, #0
 801152c:	220a      	movs	r2, #10
 801152e:	4658      	mov	r0, fp
 8011530:	f000 f9bc 	bl	80118ac <__multadd>
 8011534:	4605      	mov	r5, r0
 8011536:	e7f0      	b.n	801151a <_dtoa_r+0xaba>
 8011538:	9b00      	ldr	r3, [sp, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	bfcc      	ite	gt
 801153e:	461e      	movgt	r6, r3
 8011540:	2601      	movle	r6, #1
 8011542:	4456      	add	r6, sl
 8011544:	2700      	movs	r7, #0
 8011546:	4649      	mov	r1, r9
 8011548:	2201      	movs	r2, #1
 801154a:	4658      	mov	r0, fp
 801154c:	f000 fb5a 	bl	8011c04 <__lshift>
 8011550:	4621      	mov	r1, r4
 8011552:	4681      	mov	r9, r0
 8011554:	f000 fbc2 	bl	8011cdc <__mcmp>
 8011558:	2800      	cmp	r0, #0
 801155a:	dcb0      	bgt.n	80114be <_dtoa_r+0xa5e>
 801155c:	d102      	bne.n	8011564 <_dtoa_r+0xb04>
 801155e:	f018 0f01 	tst.w	r8, #1
 8011562:	d1ac      	bne.n	80114be <_dtoa_r+0xa5e>
 8011564:	4633      	mov	r3, r6
 8011566:	461e      	mov	r6, r3
 8011568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801156c:	2a30      	cmp	r2, #48	@ 0x30
 801156e:	d0fa      	beq.n	8011566 <_dtoa_r+0xb06>
 8011570:	e5c2      	b.n	80110f8 <_dtoa_r+0x698>
 8011572:	459a      	cmp	sl, r3
 8011574:	d1a4      	bne.n	80114c0 <_dtoa_r+0xa60>
 8011576:	9b04      	ldr	r3, [sp, #16]
 8011578:	3301      	adds	r3, #1
 801157a:	9304      	str	r3, [sp, #16]
 801157c:	2331      	movs	r3, #49	@ 0x31
 801157e:	f88a 3000 	strb.w	r3, [sl]
 8011582:	e5b9      	b.n	80110f8 <_dtoa_r+0x698>
 8011584:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011586:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80115e4 <_dtoa_r+0xb84>
 801158a:	b11b      	cbz	r3, 8011594 <_dtoa_r+0xb34>
 801158c:	f10a 0308 	add.w	r3, sl, #8
 8011590:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011592:	6013      	str	r3, [r2, #0]
 8011594:	4650      	mov	r0, sl
 8011596:	b019      	add	sp, #100	@ 0x64
 8011598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801159c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801159e:	2b01      	cmp	r3, #1
 80115a0:	f77f ae37 	ble.w	8011212 <_dtoa_r+0x7b2>
 80115a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80115a8:	2001      	movs	r0, #1
 80115aa:	e655      	b.n	8011258 <_dtoa_r+0x7f8>
 80115ac:	9b00      	ldr	r3, [sp, #0]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	f77f aed6 	ble.w	8011360 <_dtoa_r+0x900>
 80115b4:	4656      	mov	r6, sl
 80115b6:	4621      	mov	r1, r4
 80115b8:	4648      	mov	r0, r9
 80115ba:	f7ff f9c6 	bl	801094a <quorem>
 80115be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80115c2:	f806 8b01 	strb.w	r8, [r6], #1
 80115c6:	9b00      	ldr	r3, [sp, #0]
 80115c8:	eba6 020a 	sub.w	r2, r6, sl
 80115cc:	4293      	cmp	r3, r2
 80115ce:	ddb3      	ble.n	8011538 <_dtoa_r+0xad8>
 80115d0:	4649      	mov	r1, r9
 80115d2:	2300      	movs	r3, #0
 80115d4:	220a      	movs	r2, #10
 80115d6:	4658      	mov	r0, fp
 80115d8:	f000 f968 	bl	80118ac <__multadd>
 80115dc:	4681      	mov	r9, r0
 80115de:	e7ea      	b.n	80115b6 <_dtoa_r+0xb56>
 80115e0:	08014778 	.word	0x08014778
 80115e4:	080146fc 	.word	0x080146fc

080115e8 <_free_r>:
 80115e8:	b538      	push	{r3, r4, r5, lr}
 80115ea:	4605      	mov	r5, r0
 80115ec:	2900      	cmp	r1, #0
 80115ee:	d041      	beq.n	8011674 <_free_r+0x8c>
 80115f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115f4:	1f0c      	subs	r4, r1, #4
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	bfb8      	it	lt
 80115fa:	18e4      	addlt	r4, r4, r3
 80115fc:	f000 f8e8 	bl	80117d0 <__malloc_lock>
 8011600:	4a1d      	ldr	r2, [pc, #116]	@ (8011678 <_free_r+0x90>)
 8011602:	6813      	ldr	r3, [r2, #0]
 8011604:	b933      	cbnz	r3, 8011614 <_free_r+0x2c>
 8011606:	6063      	str	r3, [r4, #4]
 8011608:	6014      	str	r4, [r2, #0]
 801160a:	4628      	mov	r0, r5
 801160c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011610:	f000 b8e4 	b.w	80117dc <__malloc_unlock>
 8011614:	42a3      	cmp	r3, r4
 8011616:	d908      	bls.n	801162a <_free_r+0x42>
 8011618:	6820      	ldr	r0, [r4, #0]
 801161a:	1821      	adds	r1, r4, r0
 801161c:	428b      	cmp	r3, r1
 801161e:	bf01      	itttt	eq
 8011620:	6819      	ldreq	r1, [r3, #0]
 8011622:	685b      	ldreq	r3, [r3, #4]
 8011624:	1809      	addeq	r1, r1, r0
 8011626:	6021      	streq	r1, [r4, #0]
 8011628:	e7ed      	b.n	8011606 <_free_r+0x1e>
 801162a:	461a      	mov	r2, r3
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	b10b      	cbz	r3, 8011634 <_free_r+0x4c>
 8011630:	42a3      	cmp	r3, r4
 8011632:	d9fa      	bls.n	801162a <_free_r+0x42>
 8011634:	6811      	ldr	r1, [r2, #0]
 8011636:	1850      	adds	r0, r2, r1
 8011638:	42a0      	cmp	r0, r4
 801163a:	d10b      	bne.n	8011654 <_free_r+0x6c>
 801163c:	6820      	ldr	r0, [r4, #0]
 801163e:	4401      	add	r1, r0
 8011640:	1850      	adds	r0, r2, r1
 8011642:	4283      	cmp	r3, r0
 8011644:	6011      	str	r1, [r2, #0]
 8011646:	d1e0      	bne.n	801160a <_free_r+0x22>
 8011648:	6818      	ldr	r0, [r3, #0]
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	6053      	str	r3, [r2, #4]
 801164e:	4408      	add	r0, r1
 8011650:	6010      	str	r0, [r2, #0]
 8011652:	e7da      	b.n	801160a <_free_r+0x22>
 8011654:	d902      	bls.n	801165c <_free_r+0x74>
 8011656:	230c      	movs	r3, #12
 8011658:	602b      	str	r3, [r5, #0]
 801165a:	e7d6      	b.n	801160a <_free_r+0x22>
 801165c:	6820      	ldr	r0, [r4, #0]
 801165e:	1821      	adds	r1, r4, r0
 8011660:	428b      	cmp	r3, r1
 8011662:	bf04      	itt	eq
 8011664:	6819      	ldreq	r1, [r3, #0]
 8011666:	685b      	ldreq	r3, [r3, #4]
 8011668:	6063      	str	r3, [r4, #4]
 801166a:	bf04      	itt	eq
 801166c:	1809      	addeq	r1, r1, r0
 801166e:	6021      	streq	r1, [r4, #0]
 8011670:	6054      	str	r4, [r2, #4]
 8011672:	e7ca      	b.n	801160a <_free_r+0x22>
 8011674:	bd38      	pop	{r3, r4, r5, pc}
 8011676:	bf00      	nop
 8011678:	200056a4 	.word	0x200056a4

0801167c <malloc>:
 801167c:	4b02      	ldr	r3, [pc, #8]	@ (8011688 <malloc+0xc>)
 801167e:	4601      	mov	r1, r0
 8011680:	6818      	ldr	r0, [r3, #0]
 8011682:	f000 b825 	b.w	80116d0 <_malloc_r>
 8011686:	bf00      	nop
 8011688:	2000017c 	.word	0x2000017c

0801168c <sbrk_aligned>:
 801168c:	b570      	push	{r4, r5, r6, lr}
 801168e:	4e0f      	ldr	r6, [pc, #60]	@ (80116cc <sbrk_aligned+0x40>)
 8011690:	460c      	mov	r4, r1
 8011692:	6831      	ldr	r1, [r6, #0]
 8011694:	4605      	mov	r5, r0
 8011696:	b911      	cbnz	r1, 801169e <sbrk_aligned+0x12>
 8011698:	f000 fe46 	bl	8012328 <_sbrk_r>
 801169c:	6030      	str	r0, [r6, #0]
 801169e:	4621      	mov	r1, r4
 80116a0:	4628      	mov	r0, r5
 80116a2:	f000 fe41 	bl	8012328 <_sbrk_r>
 80116a6:	1c43      	adds	r3, r0, #1
 80116a8:	d103      	bne.n	80116b2 <sbrk_aligned+0x26>
 80116aa:	f04f 34ff 	mov.w	r4, #4294967295
 80116ae:	4620      	mov	r0, r4
 80116b0:	bd70      	pop	{r4, r5, r6, pc}
 80116b2:	1cc4      	adds	r4, r0, #3
 80116b4:	f024 0403 	bic.w	r4, r4, #3
 80116b8:	42a0      	cmp	r0, r4
 80116ba:	d0f8      	beq.n	80116ae <sbrk_aligned+0x22>
 80116bc:	1a21      	subs	r1, r4, r0
 80116be:	4628      	mov	r0, r5
 80116c0:	f000 fe32 	bl	8012328 <_sbrk_r>
 80116c4:	3001      	adds	r0, #1
 80116c6:	d1f2      	bne.n	80116ae <sbrk_aligned+0x22>
 80116c8:	e7ef      	b.n	80116aa <sbrk_aligned+0x1e>
 80116ca:	bf00      	nop
 80116cc:	200056a0 	.word	0x200056a0

080116d0 <_malloc_r>:
 80116d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116d4:	1ccd      	adds	r5, r1, #3
 80116d6:	f025 0503 	bic.w	r5, r5, #3
 80116da:	3508      	adds	r5, #8
 80116dc:	2d0c      	cmp	r5, #12
 80116de:	bf38      	it	cc
 80116e0:	250c      	movcc	r5, #12
 80116e2:	2d00      	cmp	r5, #0
 80116e4:	4606      	mov	r6, r0
 80116e6:	db01      	blt.n	80116ec <_malloc_r+0x1c>
 80116e8:	42a9      	cmp	r1, r5
 80116ea:	d904      	bls.n	80116f6 <_malloc_r+0x26>
 80116ec:	230c      	movs	r3, #12
 80116ee:	6033      	str	r3, [r6, #0]
 80116f0:	2000      	movs	r0, #0
 80116f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80117cc <_malloc_r+0xfc>
 80116fa:	f000 f869 	bl	80117d0 <__malloc_lock>
 80116fe:	f8d8 3000 	ldr.w	r3, [r8]
 8011702:	461c      	mov	r4, r3
 8011704:	bb44      	cbnz	r4, 8011758 <_malloc_r+0x88>
 8011706:	4629      	mov	r1, r5
 8011708:	4630      	mov	r0, r6
 801170a:	f7ff ffbf 	bl	801168c <sbrk_aligned>
 801170e:	1c43      	adds	r3, r0, #1
 8011710:	4604      	mov	r4, r0
 8011712:	d158      	bne.n	80117c6 <_malloc_r+0xf6>
 8011714:	f8d8 4000 	ldr.w	r4, [r8]
 8011718:	4627      	mov	r7, r4
 801171a:	2f00      	cmp	r7, #0
 801171c:	d143      	bne.n	80117a6 <_malloc_r+0xd6>
 801171e:	2c00      	cmp	r4, #0
 8011720:	d04b      	beq.n	80117ba <_malloc_r+0xea>
 8011722:	6823      	ldr	r3, [r4, #0]
 8011724:	4639      	mov	r1, r7
 8011726:	4630      	mov	r0, r6
 8011728:	eb04 0903 	add.w	r9, r4, r3
 801172c:	f000 fdfc 	bl	8012328 <_sbrk_r>
 8011730:	4581      	cmp	r9, r0
 8011732:	d142      	bne.n	80117ba <_malloc_r+0xea>
 8011734:	6821      	ldr	r1, [r4, #0]
 8011736:	1a6d      	subs	r5, r5, r1
 8011738:	4629      	mov	r1, r5
 801173a:	4630      	mov	r0, r6
 801173c:	f7ff ffa6 	bl	801168c <sbrk_aligned>
 8011740:	3001      	adds	r0, #1
 8011742:	d03a      	beq.n	80117ba <_malloc_r+0xea>
 8011744:	6823      	ldr	r3, [r4, #0]
 8011746:	442b      	add	r3, r5
 8011748:	6023      	str	r3, [r4, #0]
 801174a:	f8d8 3000 	ldr.w	r3, [r8]
 801174e:	685a      	ldr	r2, [r3, #4]
 8011750:	bb62      	cbnz	r2, 80117ac <_malloc_r+0xdc>
 8011752:	f8c8 7000 	str.w	r7, [r8]
 8011756:	e00f      	b.n	8011778 <_malloc_r+0xa8>
 8011758:	6822      	ldr	r2, [r4, #0]
 801175a:	1b52      	subs	r2, r2, r5
 801175c:	d420      	bmi.n	80117a0 <_malloc_r+0xd0>
 801175e:	2a0b      	cmp	r2, #11
 8011760:	d917      	bls.n	8011792 <_malloc_r+0xc2>
 8011762:	1961      	adds	r1, r4, r5
 8011764:	42a3      	cmp	r3, r4
 8011766:	6025      	str	r5, [r4, #0]
 8011768:	bf18      	it	ne
 801176a:	6059      	strne	r1, [r3, #4]
 801176c:	6863      	ldr	r3, [r4, #4]
 801176e:	bf08      	it	eq
 8011770:	f8c8 1000 	streq.w	r1, [r8]
 8011774:	5162      	str	r2, [r4, r5]
 8011776:	604b      	str	r3, [r1, #4]
 8011778:	4630      	mov	r0, r6
 801177a:	f000 f82f 	bl	80117dc <__malloc_unlock>
 801177e:	f104 000b 	add.w	r0, r4, #11
 8011782:	1d23      	adds	r3, r4, #4
 8011784:	f020 0007 	bic.w	r0, r0, #7
 8011788:	1ac2      	subs	r2, r0, r3
 801178a:	bf1c      	itt	ne
 801178c:	1a1b      	subne	r3, r3, r0
 801178e:	50a3      	strne	r3, [r4, r2]
 8011790:	e7af      	b.n	80116f2 <_malloc_r+0x22>
 8011792:	6862      	ldr	r2, [r4, #4]
 8011794:	42a3      	cmp	r3, r4
 8011796:	bf0c      	ite	eq
 8011798:	f8c8 2000 	streq.w	r2, [r8]
 801179c:	605a      	strne	r2, [r3, #4]
 801179e:	e7eb      	b.n	8011778 <_malloc_r+0xa8>
 80117a0:	4623      	mov	r3, r4
 80117a2:	6864      	ldr	r4, [r4, #4]
 80117a4:	e7ae      	b.n	8011704 <_malloc_r+0x34>
 80117a6:	463c      	mov	r4, r7
 80117a8:	687f      	ldr	r7, [r7, #4]
 80117aa:	e7b6      	b.n	801171a <_malloc_r+0x4a>
 80117ac:	461a      	mov	r2, r3
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	42a3      	cmp	r3, r4
 80117b2:	d1fb      	bne.n	80117ac <_malloc_r+0xdc>
 80117b4:	2300      	movs	r3, #0
 80117b6:	6053      	str	r3, [r2, #4]
 80117b8:	e7de      	b.n	8011778 <_malloc_r+0xa8>
 80117ba:	230c      	movs	r3, #12
 80117bc:	6033      	str	r3, [r6, #0]
 80117be:	4630      	mov	r0, r6
 80117c0:	f000 f80c 	bl	80117dc <__malloc_unlock>
 80117c4:	e794      	b.n	80116f0 <_malloc_r+0x20>
 80117c6:	6005      	str	r5, [r0, #0]
 80117c8:	e7d6      	b.n	8011778 <_malloc_r+0xa8>
 80117ca:	bf00      	nop
 80117cc:	200056a4 	.word	0x200056a4

080117d0 <__malloc_lock>:
 80117d0:	4801      	ldr	r0, [pc, #4]	@ (80117d8 <__malloc_lock+0x8>)
 80117d2:	f7ff b8aa 	b.w	801092a <__retarget_lock_acquire_recursive>
 80117d6:	bf00      	nop
 80117d8:	2000569c 	.word	0x2000569c

080117dc <__malloc_unlock>:
 80117dc:	4801      	ldr	r0, [pc, #4]	@ (80117e4 <__malloc_unlock+0x8>)
 80117de:	f7ff b8a5 	b.w	801092c <__retarget_lock_release_recursive>
 80117e2:	bf00      	nop
 80117e4:	2000569c 	.word	0x2000569c

080117e8 <_Balloc>:
 80117e8:	b570      	push	{r4, r5, r6, lr}
 80117ea:	69c6      	ldr	r6, [r0, #28]
 80117ec:	4604      	mov	r4, r0
 80117ee:	460d      	mov	r5, r1
 80117f0:	b976      	cbnz	r6, 8011810 <_Balloc+0x28>
 80117f2:	2010      	movs	r0, #16
 80117f4:	f7ff ff42 	bl	801167c <malloc>
 80117f8:	4602      	mov	r2, r0
 80117fa:	61e0      	str	r0, [r4, #28]
 80117fc:	b920      	cbnz	r0, 8011808 <_Balloc+0x20>
 80117fe:	4b18      	ldr	r3, [pc, #96]	@ (8011860 <_Balloc+0x78>)
 8011800:	4818      	ldr	r0, [pc, #96]	@ (8011864 <_Balloc+0x7c>)
 8011802:	216b      	movs	r1, #107	@ 0x6b
 8011804:	f000 fda0 	bl	8012348 <__assert_func>
 8011808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801180c:	6006      	str	r6, [r0, #0]
 801180e:	60c6      	str	r6, [r0, #12]
 8011810:	69e6      	ldr	r6, [r4, #28]
 8011812:	68f3      	ldr	r3, [r6, #12]
 8011814:	b183      	cbz	r3, 8011838 <_Balloc+0x50>
 8011816:	69e3      	ldr	r3, [r4, #28]
 8011818:	68db      	ldr	r3, [r3, #12]
 801181a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801181e:	b9b8      	cbnz	r0, 8011850 <_Balloc+0x68>
 8011820:	2101      	movs	r1, #1
 8011822:	fa01 f605 	lsl.w	r6, r1, r5
 8011826:	1d72      	adds	r2, r6, #5
 8011828:	0092      	lsls	r2, r2, #2
 801182a:	4620      	mov	r0, r4
 801182c:	f000 fdaa 	bl	8012384 <_calloc_r>
 8011830:	b160      	cbz	r0, 801184c <_Balloc+0x64>
 8011832:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011836:	e00e      	b.n	8011856 <_Balloc+0x6e>
 8011838:	2221      	movs	r2, #33	@ 0x21
 801183a:	2104      	movs	r1, #4
 801183c:	4620      	mov	r0, r4
 801183e:	f000 fda1 	bl	8012384 <_calloc_r>
 8011842:	69e3      	ldr	r3, [r4, #28]
 8011844:	60f0      	str	r0, [r6, #12]
 8011846:	68db      	ldr	r3, [r3, #12]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d1e4      	bne.n	8011816 <_Balloc+0x2e>
 801184c:	2000      	movs	r0, #0
 801184e:	bd70      	pop	{r4, r5, r6, pc}
 8011850:	6802      	ldr	r2, [r0, #0]
 8011852:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011856:	2300      	movs	r3, #0
 8011858:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801185c:	e7f7      	b.n	801184e <_Balloc+0x66>
 801185e:	bf00      	nop
 8011860:	08014709 	.word	0x08014709
 8011864:	08014789 	.word	0x08014789

08011868 <_Bfree>:
 8011868:	b570      	push	{r4, r5, r6, lr}
 801186a:	69c6      	ldr	r6, [r0, #28]
 801186c:	4605      	mov	r5, r0
 801186e:	460c      	mov	r4, r1
 8011870:	b976      	cbnz	r6, 8011890 <_Bfree+0x28>
 8011872:	2010      	movs	r0, #16
 8011874:	f7ff ff02 	bl	801167c <malloc>
 8011878:	4602      	mov	r2, r0
 801187a:	61e8      	str	r0, [r5, #28]
 801187c:	b920      	cbnz	r0, 8011888 <_Bfree+0x20>
 801187e:	4b09      	ldr	r3, [pc, #36]	@ (80118a4 <_Bfree+0x3c>)
 8011880:	4809      	ldr	r0, [pc, #36]	@ (80118a8 <_Bfree+0x40>)
 8011882:	218f      	movs	r1, #143	@ 0x8f
 8011884:	f000 fd60 	bl	8012348 <__assert_func>
 8011888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801188c:	6006      	str	r6, [r0, #0]
 801188e:	60c6      	str	r6, [r0, #12]
 8011890:	b13c      	cbz	r4, 80118a2 <_Bfree+0x3a>
 8011892:	69eb      	ldr	r3, [r5, #28]
 8011894:	6862      	ldr	r2, [r4, #4]
 8011896:	68db      	ldr	r3, [r3, #12]
 8011898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801189c:	6021      	str	r1, [r4, #0]
 801189e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80118a2:	bd70      	pop	{r4, r5, r6, pc}
 80118a4:	08014709 	.word	0x08014709
 80118a8:	08014789 	.word	0x08014789

080118ac <__multadd>:
 80118ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118b0:	690d      	ldr	r5, [r1, #16]
 80118b2:	4607      	mov	r7, r0
 80118b4:	460c      	mov	r4, r1
 80118b6:	461e      	mov	r6, r3
 80118b8:	f101 0c14 	add.w	ip, r1, #20
 80118bc:	2000      	movs	r0, #0
 80118be:	f8dc 3000 	ldr.w	r3, [ip]
 80118c2:	b299      	uxth	r1, r3
 80118c4:	fb02 6101 	mla	r1, r2, r1, r6
 80118c8:	0c1e      	lsrs	r6, r3, #16
 80118ca:	0c0b      	lsrs	r3, r1, #16
 80118cc:	fb02 3306 	mla	r3, r2, r6, r3
 80118d0:	b289      	uxth	r1, r1
 80118d2:	3001      	adds	r0, #1
 80118d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80118d8:	4285      	cmp	r5, r0
 80118da:	f84c 1b04 	str.w	r1, [ip], #4
 80118de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80118e2:	dcec      	bgt.n	80118be <__multadd+0x12>
 80118e4:	b30e      	cbz	r6, 801192a <__multadd+0x7e>
 80118e6:	68a3      	ldr	r3, [r4, #8]
 80118e8:	42ab      	cmp	r3, r5
 80118ea:	dc19      	bgt.n	8011920 <__multadd+0x74>
 80118ec:	6861      	ldr	r1, [r4, #4]
 80118ee:	4638      	mov	r0, r7
 80118f0:	3101      	adds	r1, #1
 80118f2:	f7ff ff79 	bl	80117e8 <_Balloc>
 80118f6:	4680      	mov	r8, r0
 80118f8:	b928      	cbnz	r0, 8011906 <__multadd+0x5a>
 80118fa:	4602      	mov	r2, r0
 80118fc:	4b0c      	ldr	r3, [pc, #48]	@ (8011930 <__multadd+0x84>)
 80118fe:	480d      	ldr	r0, [pc, #52]	@ (8011934 <__multadd+0x88>)
 8011900:	21ba      	movs	r1, #186	@ 0xba
 8011902:	f000 fd21 	bl	8012348 <__assert_func>
 8011906:	6922      	ldr	r2, [r4, #16]
 8011908:	3202      	adds	r2, #2
 801190a:	f104 010c 	add.w	r1, r4, #12
 801190e:	0092      	lsls	r2, r2, #2
 8011910:	300c      	adds	r0, #12
 8011912:	f7ff f80c 	bl	801092e <memcpy>
 8011916:	4621      	mov	r1, r4
 8011918:	4638      	mov	r0, r7
 801191a:	f7ff ffa5 	bl	8011868 <_Bfree>
 801191e:	4644      	mov	r4, r8
 8011920:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011924:	3501      	adds	r5, #1
 8011926:	615e      	str	r6, [r3, #20]
 8011928:	6125      	str	r5, [r4, #16]
 801192a:	4620      	mov	r0, r4
 801192c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011930:	08014778 	.word	0x08014778
 8011934:	08014789 	.word	0x08014789

08011938 <__hi0bits>:
 8011938:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801193c:	4603      	mov	r3, r0
 801193e:	bf36      	itet	cc
 8011940:	0403      	lslcc	r3, r0, #16
 8011942:	2000      	movcs	r0, #0
 8011944:	2010      	movcc	r0, #16
 8011946:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801194a:	bf3c      	itt	cc
 801194c:	021b      	lslcc	r3, r3, #8
 801194e:	3008      	addcc	r0, #8
 8011950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011954:	bf3c      	itt	cc
 8011956:	011b      	lslcc	r3, r3, #4
 8011958:	3004      	addcc	r0, #4
 801195a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801195e:	bf3c      	itt	cc
 8011960:	009b      	lslcc	r3, r3, #2
 8011962:	3002      	addcc	r0, #2
 8011964:	2b00      	cmp	r3, #0
 8011966:	db05      	blt.n	8011974 <__hi0bits+0x3c>
 8011968:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801196c:	f100 0001 	add.w	r0, r0, #1
 8011970:	bf08      	it	eq
 8011972:	2020      	moveq	r0, #32
 8011974:	4770      	bx	lr

08011976 <__lo0bits>:
 8011976:	6803      	ldr	r3, [r0, #0]
 8011978:	4602      	mov	r2, r0
 801197a:	f013 0007 	ands.w	r0, r3, #7
 801197e:	d00b      	beq.n	8011998 <__lo0bits+0x22>
 8011980:	07d9      	lsls	r1, r3, #31
 8011982:	d421      	bmi.n	80119c8 <__lo0bits+0x52>
 8011984:	0798      	lsls	r0, r3, #30
 8011986:	bf49      	itett	mi
 8011988:	085b      	lsrmi	r3, r3, #1
 801198a:	089b      	lsrpl	r3, r3, #2
 801198c:	2001      	movmi	r0, #1
 801198e:	6013      	strmi	r3, [r2, #0]
 8011990:	bf5c      	itt	pl
 8011992:	6013      	strpl	r3, [r2, #0]
 8011994:	2002      	movpl	r0, #2
 8011996:	4770      	bx	lr
 8011998:	b299      	uxth	r1, r3
 801199a:	b909      	cbnz	r1, 80119a0 <__lo0bits+0x2a>
 801199c:	0c1b      	lsrs	r3, r3, #16
 801199e:	2010      	movs	r0, #16
 80119a0:	b2d9      	uxtb	r1, r3
 80119a2:	b909      	cbnz	r1, 80119a8 <__lo0bits+0x32>
 80119a4:	3008      	adds	r0, #8
 80119a6:	0a1b      	lsrs	r3, r3, #8
 80119a8:	0719      	lsls	r1, r3, #28
 80119aa:	bf04      	itt	eq
 80119ac:	091b      	lsreq	r3, r3, #4
 80119ae:	3004      	addeq	r0, #4
 80119b0:	0799      	lsls	r1, r3, #30
 80119b2:	bf04      	itt	eq
 80119b4:	089b      	lsreq	r3, r3, #2
 80119b6:	3002      	addeq	r0, #2
 80119b8:	07d9      	lsls	r1, r3, #31
 80119ba:	d403      	bmi.n	80119c4 <__lo0bits+0x4e>
 80119bc:	085b      	lsrs	r3, r3, #1
 80119be:	f100 0001 	add.w	r0, r0, #1
 80119c2:	d003      	beq.n	80119cc <__lo0bits+0x56>
 80119c4:	6013      	str	r3, [r2, #0]
 80119c6:	4770      	bx	lr
 80119c8:	2000      	movs	r0, #0
 80119ca:	4770      	bx	lr
 80119cc:	2020      	movs	r0, #32
 80119ce:	4770      	bx	lr

080119d0 <__i2b>:
 80119d0:	b510      	push	{r4, lr}
 80119d2:	460c      	mov	r4, r1
 80119d4:	2101      	movs	r1, #1
 80119d6:	f7ff ff07 	bl	80117e8 <_Balloc>
 80119da:	4602      	mov	r2, r0
 80119dc:	b928      	cbnz	r0, 80119ea <__i2b+0x1a>
 80119de:	4b05      	ldr	r3, [pc, #20]	@ (80119f4 <__i2b+0x24>)
 80119e0:	4805      	ldr	r0, [pc, #20]	@ (80119f8 <__i2b+0x28>)
 80119e2:	f240 1145 	movw	r1, #325	@ 0x145
 80119e6:	f000 fcaf 	bl	8012348 <__assert_func>
 80119ea:	2301      	movs	r3, #1
 80119ec:	6144      	str	r4, [r0, #20]
 80119ee:	6103      	str	r3, [r0, #16]
 80119f0:	bd10      	pop	{r4, pc}
 80119f2:	bf00      	nop
 80119f4:	08014778 	.word	0x08014778
 80119f8:	08014789 	.word	0x08014789

080119fc <__multiply>:
 80119fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a00:	4614      	mov	r4, r2
 8011a02:	690a      	ldr	r2, [r1, #16]
 8011a04:	6923      	ldr	r3, [r4, #16]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	bfa8      	it	ge
 8011a0a:	4623      	movge	r3, r4
 8011a0c:	460f      	mov	r7, r1
 8011a0e:	bfa4      	itt	ge
 8011a10:	460c      	movge	r4, r1
 8011a12:	461f      	movge	r7, r3
 8011a14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011a18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011a1c:	68a3      	ldr	r3, [r4, #8]
 8011a1e:	6861      	ldr	r1, [r4, #4]
 8011a20:	eb0a 0609 	add.w	r6, sl, r9
 8011a24:	42b3      	cmp	r3, r6
 8011a26:	b085      	sub	sp, #20
 8011a28:	bfb8      	it	lt
 8011a2a:	3101      	addlt	r1, #1
 8011a2c:	f7ff fedc 	bl	80117e8 <_Balloc>
 8011a30:	b930      	cbnz	r0, 8011a40 <__multiply+0x44>
 8011a32:	4602      	mov	r2, r0
 8011a34:	4b44      	ldr	r3, [pc, #272]	@ (8011b48 <__multiply+0x14c>)
 8011a36:	4845      	ldr	r0, [pc, #276]	@ (8011b4c <__multiply+0x150>)
 8011a38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011a3c:	f000 fc84 	bl	8012348 <__assert_func>
 8011a40:	f100 0514 	add.w	r5, r0, #20
 8011a44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011a48:	462b      	mov	r3, r5
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	4543      	cmp	r3, r8
 8011a4e:	d321      	bcc.n	8011a94 <__multiply+0x98>
 8011a50:	f107 0114 	add.w	r1, r7, #20
 8011a54:	f104 0214 	add.w	r2, r4, #20
 8011a58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011a5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011a60:	9302      	str	r3, [sp, #8]
 8011a62:	1b13      	subs	r3, r2, r4
 8011a64:	3b15      	subs	r3, #21
 8011a66:	f023 0303 	bic.w	r3, r3, #3
 8011a6a:	3304      	adds	r3, #4
 8011a6c:	f104 0715 	add.w	r7, r4, #21
 8011a70:	42ba      	cmp	r2, r7
 8011a72:	bf38      	it	cc
 8011a74:	2304      	movcc	r3, #4
 8011a76:	9301      	str	r3, [sp, #4]
 8011a78:	9b02      	ldr	r3, [sp, #8]
 8011a7a:	9103      	str	r1, [sp, #12]
 8011a7c:	428b      	cmp	r3, r1
 8011a7e:	d80c      	bhi.n	8011a9a <__multiply+0x9e>
 8011a80:	2e00      	cmp	r6, #0
 8011a82:	dd03      	ble.n	8011a8c <__multiply+0x90>
 8011a84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d05b      	beq.n	8011b44 <__multiply+0x148>
 8011a8c:	6106      	str	r6, [r0, #16]
 8011a8e:	b005      	add	sp, #20
 8011a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a94:	f843 2b04 	str.w	r2, [r3], #4
 8011a98:	e7d8      	b.n	8011a4c <__multiply+0x50>
 8011a9a:	f8b1 a000 	ldrh.w	sl, [r1]
 8011a9e:	f1ba 0f00 	cmp.w	sl, #0
 8011aa2:	d024      	beq.n	8011aee <__multiply+0xf2>
 8011aa4:	f104 0e14 	add.w	lr, r4, #20
 8011aa8:	46a9      	mov	r9, r5
 8011aaa:	f04f 0c00 	mov.w	ip, #0
 8011aae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011ab2:	f8d9 3000 	ldr.w	r3, [r9]
 8011ab6:	fa1f fb87 	uxth.w	fp, r7
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	fb0a 330b 	mla	r3, sl, fp, r3
 8011ac0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011ac4:	f8d9 7000 	ldr.w	r7, [r9]
 8011ac8:	4463      	add	r3, ip
 8011aca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011ace:	fb0a c70b 	mla	r7, sl, fp, ip
 8011ad2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011adc:	4572      	cmp	r2, lr
 8011ade:	f849 3b04 	str.w	r3, [r9], #4
 8011ae2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011ae6:	d8e2      	bhi.n	8011aae <__multiply+0xb2>
 8011ae8:	9b01      	ldr	r3, [sp, #4]
 8011aea:	f845 c003 	str.w	ip, [r5, r3]
 8011aee:	9b03      	ldr	r3, [sp, #12]
 8011af0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011af4:	3104      	adds	r1, #4
 8011af6:	f1b9 0f00 	cmp.w	r9, #0
 8011afa:	d021      	beq.n	8011b40 <__multiply+0x144>
 8011afc:	682b      	ldr	r3, [r5, #0]
 8011afe:	f104 0c14 	add.w	ip, r4, #20
 8011b02:	46ae      	mov	lr, r5
 8011b04:	f04f 0a00 	mov.w	sl, #0
 8011b08:	f8bc b000 	ldrh.w	fp, [ip]
 8011b0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011b10:	fb09 770b 	mla	r7, r9, fp, r7
 8011b14:	4457      	add	r7, sl
 8011b16:	b29b      	uxth	r3, r3
 8011b18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011b1c:	f84e 3b04 	str.w	r3, [lr], #4
 8011b20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011b24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011b28:	f8be 3000 	ldrh.w	r3, [lr]
 8011b2c:	fb09 330a 	mla	r3, r9, sl, r3
 8011b30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011b34:	4562      	cmp	r2, ip
 8011b36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011b3a:	d8e5      	bhi.n	8011b08 <__multiply+0x10c>
 8011b3c:	9f01      	ldr	r7, [sp, #4]
 8011b3e:	51eb      	str	r3, [r5, r7]
 8011b40:	3504      	adds	r5, #4
 8011b42:	e799      	b.n	8011a78 <__multiply+0x7c>
 8011b44:	3e01      	subs	r6, #1
 8011b46:	e79b      	b.n	8011a80 <__multiply+0x84>
 8011b48:	08014778 	.word	0x08014778
 8011b4c:	08014789 	.word	0x08014789

08011b50 <__pow5mult>:
 8011b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b54:	4615      	mov	r5, r2
 8011b56:	f012 0203 	ands.w	r2, r2, #3
 8011b5a:	4607      	mov	r7, r0
 8011b5c:	460e      	mov	r6, r1
 8011b5e:	d007      	beq.n	8011b70 <__pow5mult+0x20>
 8011b60:	4c25      	ldr	r4, [pc, #148]	@ (8011bf8 <__pow5mult+0xa8>)
 8011b62:	3a01      	subs	r2, #1
 8011b64:	2300      	movs	r3, #0
 8011b66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011b6a:	f7ff fe9f 	bl	80118ac <__multadd>
 8011b6e:	4606      	mov	r6, r0
 8011b70:	10ad      	asrs	r5, r5, #2
 8011b72:	d03d      	beq.n	8011bf0 <__pow5mult+0xa0>
 8011b74:	69fc      	ldr	r4, [r7, #28]
 8011b76:	b97c      	cbnz	r4, 8011b98 <__pow5mult+0x48>
 8011b78:	2010      	movs	r0, #16
 8011b7a:	f7ff fd7f 	bl	801167c <malloc>
 8011b7e:	4602      	mov	r2, r0
 8011b80:	61f8      	str	r0, [r7, #28]
 8011b82:	b928      	cbnz	r0, 8011b90 <__pow5mult+0x40>
 8011b84:	4b1d      	ldr	r3, [pc, #116]	@ (8011bfc <__pow5mult+0xac>)
 8011b86:	481e      	ldr	r0, [pc, #120]	@ (8011c00 <__pow5mult+0xb0>)
 8011b88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011b8c:	f000 fbdc 	bl	8012348 <__assert_func>
 8011b90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011b94:	6004      	str	r4, [r0, #0]
 8011b96:	60c4      	str	r4, [r0, #12]
 8011b98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011b9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ba0:	b94c      	cbnz	r4, 8011bb6 <__pow5mult+0x66>
 8011ba2:	f240 2171 	movw	r1, #625	@ 0x271
 8011ba6:	4638      	mov	r0, r7
 8011ba8:	f7ff ff12 	bl	80119d0 <__i2b>
 8011bac:	2300      	movs	r3, #0
 8011bae:	f8c8 0008 	str.w	r0, [r8, #8]
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	6003      	str	r3, [r0, #0]
 8011bb6:	f04f 0900 	mov.w	r9, #0
 8011bba:	07eb      	lsls	r3, r5, #31
 8011bbc:	d50a      	bpl.n	8011bd4 <__pow5mult+0x84>
 8011bbe:	4631      	mov	r1, r6
 8011bc0:	4622      	mov	r2, r4
 8011bc2:	4638      	mov	r0, r7
 8011bc4:	f7ff ff1a 	bl	80119fc <__multiply>
 8011bc8:	4631      	mov	r1, r6
 8011bca:	4680      	mov	r8, r0
 8011bcc:	4638      	mov	r0, r7
 8011bce:	f7ff fe4b 	bl	8011868 <_Bfree>
 8011bd2:	4646      	mov	r6, r8
 8011bd4:	106d      	asrs	r5, r5, #1
 8011bd6:	d00b      	beq.n	8011bf0 <__pow5mult+0xa0>
 8011bd8:	6820      	ldr	r0, [r4, #0]
 8011bda:	b938      	cbnz	r0, 8011bec <__pow5mult+0x9c>
 8011bdc:	4622      	mov	r2, r4
 8011bde:	4621      	mov	r1, r4
 8011be0:	4638      	mov	r0, r7
 8011be2:	f7ff ff0b 	bl	80119fc <__multiply>
 8011be6:	6020      	str	r0, [r4, #0]
 8011be8:	f8c0 9000 	str.w	r9, [r0]
 8011bec:	4604      	mov	r4, r0
 8011bee:	e7e4      	b.n	8011bba <__pow5mult+0x6a>
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bf6:	bf00      	nop
 8011bf8:	080147e4 	.word	0x080147e4
 8011bfc:	08014709 	.word	0x08014709
 8011c00:	08014789 	.word	0x08014789

08011c04 <__lshift>:
 8011c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c08:	460c      	mov	r4, r1
 8011c0a:	6849      	ldr	r1, [r1, #4]
 8011c0c:	6923      	ldr	r3, [r4, #16]
 8011c0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011c12:	68a3      	ldr	r3, [r4, #8]
 8011c14:	4607      	mov	r7, r0
 8011c16:	4691      	mov	r9, r2
 8011c18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011c1c:	f108 0601 	add.w	r6, r8, #1
 8011c20:	42b3      	cmp	r3, r6
 8011c22:	db0b      	blt.n	8011c3c <__lshift+0x38>
 8011c24:	4638      	mov	r0, r7
 8011c26:	f7ff fddf 	bl	80117e8 <_Balloc>
 8011c2a:	4605      	mov	r5, r0
 8011c2c:	b948      	cbnz	r0, 8011c42 <__lshift+0x3e>
 8011c2e:	4602      	mov	r2, r0
 8011c30:	4b28      	ldr	r3, [pc, #160]	@ (8011cd4 <__lshift+0xd0>)
 8011c32:	4829      	ldr	r0, [pc, #164]	@ (8011cd8 <__lshift+0xd4>)
 8011c34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011c38:	f000 fb86 	bl	8012348 <__assert_func>
 8011c3c:	3101      	adds	r1, #1
 8011c3e:	005b      	lsls	r3, r3, #1
 8011c40:	e7ee      	b.n	8011c20 <__lshift+0x1c>
 8011c42:	2300      	movs	r3, #0
 8011c44:	f100 0114 	add.w	r1, r0, #20
 8011c48:	f100 0210 	add.w	r2, r0, #16
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	4553      	cmp	r3, sl
 8011c50:	db33      	blt.n	8011cba <__lshift+0xb6>
 8011c52:	6920      	ldr	r0, [r4, #16]
 8011c54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011c58:	f104 0314 	add.w	r3, r4, #20
 8011c5c:	f019 091f 	ands.w	r9, r9, #31
 8011c60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011c64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011c68:	d02b      	beq.n	8011cc2 <__lshift+0xbe>
 8011c6a:	f1c9 0e20 	rsb	lr, r9, #32
 8011c6e:	468a      	mov	sl, r1
 8011c70:	2200      	movs	r2, #0
 8011c72:	6818      	ldr	r0, [r3, #0]
 8011c74:	fa00 f009 	lsl.w	r0, r0, r9
 8011c78:	4310      	orrs	r0, r2
 8011c7a:	f84a 0b04 	str.w	r0, [sl], #4
 8011c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c82:	459c      	cmp	ip, r3
 8011c84:	fa22 f20e 	lsr.w	r2, r2, lr
 8011c88:	d8f3      	bhi.n	8011c72 <__lshift+0x6e>
 8011c8a:	ebac 0304 	sub.w	r3, ip, r4
 8011c8e:	3b15      	subs	r3, #21
 8011c90:	f023 0303 	bic.w	r3, r3, #3
 8011c94:	3304      	adds	r3, #4
 8011c96:	f104 0015 	add.w	r0, r4, #21
 8011c9a:	4584      	cmp	ip, r0
 8011c9c:	bf38      	it	cc
 8011c9e:	2304      	movcc	r3, #4
 8011ca0:	50ca      	str	r2, [r1, r3]
 8011ca2:	b10a      	cbz	r2, 8011ca8 <__lshift+0xa4>
 8011ca4:	f108 0602 	add.w	r6, r8, #2
 8011ca8:	3e01      	subs	r6, #1
 8011caa:	4638      	mov	r0, r7
 8011cac:	612e      	str	r6, [r5, #16]
 8011cae:	4621      	mov	r1, r4
 8011cb0:	f7ff fdda 	bl	8011868 <_Bfree>
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cba:	f842 0f04 	str.w	r0, [r2, #4]!
 8011cbe:	3301      	adds	r3, #1
 8011cc0:	e7c5      	b.n	8011c4e <__lshift+0x4a>
 8011cc2:	3904      	subs	r1, #4
 8011cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8011ccc:	459c      	cmp	ip, r3
 8011cce:	d8f9      	bhi.n	8011cc4 <__lshift+0xc0>
 8011cd0:	e7ea      	b.n	8011ca8 <__lshift+0xa4>
 8011cd2:	bf00      	nop
 8011cd4:	08014778 	.word	0x08014778
 8011cd8:	08014789 	.word	0x08014789

08011cdc <__mcmp>:
 8011cdc:	690a      	ldr	r2, [r1, #16]
 8011cde:	4603      	mov	r3, r0
 8011ce0:	6900      	ldr	r0, [r0, #16]
 8011ce2:	1a80      	subs	r0, r0, r2
 8011ce4:	b530      	push	{r4, r5, lr}
 8011ce6:	d10e      	bne.n	8011d06 <__mcmp+0x2a>
 8011ce8:	3314      	adds	r3, #20
 8011cea:	3114      	adds	r1, #20
 8011cec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011cf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011cf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011cf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011cfc:	4295      	cmp	r5, r2
 8011cfe:	d003      	beq.n	8011d08 <__mcmp+0x2c>
 8011d00:	d205      	bcs.n	8011d0e <__mcmp+0x32>
 8011d02:	f04f 30ff 	mov.w	r0, #4294967295
 8011d06:	bd30      	pop	{r4, r5, pc}
 8011d08:	42a3      	cmp	r3, r4
 8011d0a:	d3f3      	bcc.n	8011cf4 <__mcmp+0x18>
 8011d0c:	e7fb      	b.n	8011d06 <__mcmp+0x2a>
 8011d0e:	2001      	movs	r0, #1
 8011d10:	e7f9      	b.n	8011d06 <__mcmp+0x2a>
	...

08011d14 <__mdiff>:
 8011d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d18:	4689      	mov	r9, r1
 8011d1a:	4606      	mov	r6, r0
 8011d1c:	4611      	mov	r1, r2
 8011d1e:	4648      	mov	r0, r9
 8011d20:	4614      	mov	r4, r2
 8011d22:	f7ff ffdb 	bl	8011cdc <__mcmp>
 8011d26:	1e05      	subs	r5, r0, #0
 8011d28:	d112      	bne.n	8011d50 <__mdiff+0x3c>
 8011d2a:	4629      	mov	r1, r5
 8011d2c:	4630      	mov	r0, r6
 8011d2e:	f7ff fd5b 	bl	80117e8 <_Balloc>
 8011d32:	4602      	mov	r2, r0
 8011d34:	b928      	cbnz	r0, 8011d42 <__mdiff+0x2e>
 8011d36:	4b3f      	ldr	r3, [pc, #252]	@ (8011e34 <__mdiff+0x120>)
 8011d38:	f240 2137 	movw	r1, #567	@ 0x237
 8011d3c:	483e      	ldr	r0, [pc, #248]	@ (8011e38 <__mdiff+0x124>)
 8011d3e:	f000 fb03 	bl	8012348 <__assert_func>
 8011d42:	2301      	movs	r3, #1
 8011d44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011d48:	4610      	mov	r0, r2
 8011d4a:	b003      	add	sp, #12
 8011d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d50:	bfbc      	itt	lt
 8011d52:	464b      	movlt	r3, r9
 8011d54:	46a1      	movlt	r9, r4
 8011d56:	4630      	mov	r0, r6
 8011d58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011d5c:	bfba      	itte	lt
 8011d5e:	461c      	movlt	r4, r3
 8011d60:	2501      	movlt	r5, #1
 8011d62:	2500      	movge	r5, #0
 8011d64:	f7ff fd40 	bl	80117e8 <_Balloc>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	b918      	cbnz	r0, 8011d74 <__mdiff+0x60>
 8011d6c:	4b31      	ldr	r3, [pc, #196]	@ (8011e34 <__mdiff+0x120>)
 8011d6e:	f240 2145 	movw	r1, #581	@ 0x245
 8011d72:	e7e3      	b.n	8011d3c <__mdiff+0x28>
 8011d74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011d78:	6926      	ldr	r6, [r4, #16]
 8011d7a:	60c5      	str	r5, [r0, #12]
 8011d7c:	f109 0310 	add.w	r3, r9, #16
 8011d80:	f109 0514 	add.w	r5, r9, #20
 8011d84:	f104 0e14 	add.w	lr, r4, #20
 8011d88:	f100 0b14 	add.w	fp, r0, #20
 8011d8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011d90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011d94:	9301      	str	r3, [sp, #4]
 8011d96:	46d9      	mov	r9, fp
 8011d98:	f04f 0c00 	mov.w	ip, #0
 8011d9c:	9b01      	ldr	r3, [sp, #4]
 8011d9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011da2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011da6:	9301      	str	r3, [sp, #4]
 8011da8:	fa1f f38a 	uxth.w	r3, sl
 8011dac:	4619      	mov	r1, r3
 8011dae:	b283      	uxth	r3, r0
 8011db0:	1acb      	subs	r3, r1, r3
 8011db2:	0c00      	lsrs	r0, r0, #16
 8011db4:	4463      	add	r3, ip
 8011db6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011dba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011dc4:	4576      	cmp	r6, lr
 8011dc6:	f849 3b04 	str.w	r3, [r9], #4
 8011dca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011dce:	d8e5      	bhi.n	8011d9c <__mdiff+0x88>
 8011dd0:	1b33      	subs	r3, r6, r4
 8011dd2:	3b15      	subs	r3, #21
 8011dd4:	f023 0303 	bic.w	r3, r3, #3
 8011dd8:	3415      	adds	r4, #21
 8011dda:	3304      	adds	r3, #4
 8011ddc:	42a6      	cmp	r6, r4
 8011dde:	bf38      	it	cc
 8011de0:	2304      	movcc	r3, #4
 8011de2:	441d      	add	r5, r3
 8011de4:	445b      	add	r3, fp
 8011de6:	461e      	mov	r6, r3
 8011de8:	462c      	mov	r4, r5
 8011dea:	4544      	cmp	r4, r8
 8011dec:	d30e      	bcc.n	8011e0c <__mdiff+0xf8>
 8011dee:	f108 0103 	add.w	r1, r8, #3
 8011df2:	1b49      	subs	r1, r1, r5
 8011df4:	f021 0103 	bic.w	r1, r1, #3
 8011df8:	3d03      	subs	r5, #3
 8011dfa:	45a8      	cmp	r8, r5
 8011dfc:	bf38      	it	cc
 8011dfe:	2100      	movcc	r1, #0
 8011e00:	440b      	add	r3, r1
 8011e02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e06:	b191      	cbz	r1, 8011e2e <__mdiff+0x11a>
 8011e08:	6117      	str	r7, [r2, #16]
 8011e0a:	e79d      	b.n	8011d48 <__mdiff+0x34>
 8011e0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011e10:	46e6      	mov	lr, ip
 8011e12:	0c08      	lsrs	r0, r1, #16
 8011e14:	fa1c fc81 	uxtah	ip, ip, r1
 8011e18:	4471      	add	r1, lr
 8011e1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011e1e:	b289      	uxth	r1, r1
 8011e20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011e24:	f846 1b04 	str.w	r1, [r6], #4
 8011e28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011e2c:	e7dd      	b.n	8011dea <__mdiff+0xd6>
 8011e2e:	3f01      	subs	r7, #1
 8011e30:	e7e7      	b.n	8011e02 <__mdiff+0xee>
 8011e32:	bf00      	nop
 8011e34:	08014778 	.word	0x08014778
 8011e38:	08014789 	.word	0x08014789

08011e3c <__d2b>:
 8011e3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e40:	460f      	mov	r7, r1
 8011e42:	2101      	movs	r1, #1
 8011e44:	ec59 8b10 	vmov	r8, r9, d0
 8011e48:	4616      	mov	r6, r2
 8011e4a:	f7ff fccd 	bl	80117e8 <_Balloc>
 8011e4e:	4604      	mov	r4, r0
 8011e50:	b930      	cbnz	r0, 8011e60 <__d2b+0x24>
 8011e52:	4602      	mov	r2, r0
 8011e54:	4b23      	ldr	r3, [pc, #140]	@ (8011ee4 <__d2b+0xa8>)
 8011e56:	4824      	ldr	r0, [pc, #144]	@ (8011ee8 <__d2b+0xac>)
 8011e58:	f240 310f 	movw	r1, #783	@ 0x30f
 8011e5c:	f000 fa74 	bl	8012348 <__assert_func>
 8011e60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011e64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e68:	b10d      	cbz	r5, 8011e6e <__d2b+0x32>
 8011e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011e6e:	9301      	str	r3, [sp, #4]
 8011e70:	f1b8 0300 	subs.w	r3, r8, #0
 8011e74:	d023      	beq.n	8011ebe <__d2b+0x82>
 8011e76:	4668      	mov	r0, sp
 8011e78:	9300      	str	r3, [sp, #0]
 8011e7a:	f7ff fd7c 	bl	8011976 <__lo0bits>
 8011e7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011e82:	b1d0      	cbz	r0, 8011eba <__d2b+0x7e>
 8011e84:	f1c0 0320 	rsb	r3, r0, #32
 8011e88:	fa02 f303 	lsl.w	r3, r2, r3
 8011e8c:	430b      	orrs	r3, r1
 8011e8e:	40c2      	lsrs	r2, r0
 8011e90:	6163      	str	r3, [r4, #20]
 8011e92:	9201      	str	r2, [sp, #4]
 8011e94:	9b01      	ldr	r3, [sp, #4]
 8011e96:	61a3      	str	r3, [r4, #24]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	bf0c      	ite	eq
 8011e9c:	2201      	moveq	r2, #1
 8011e9e:	2202      	movne	r2, #2
 8011ea0:	6122      	str	r2, [r4, #16]
 8011ea2:	b1a5      	cbz	r5, 8011ece <__d2b+0x92>
 8011ea4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011ea8:	4405      	add	r5, r0
 8011eaa:	603d      	str	r5, [r7, #0]
 8011eac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011eb0:	6030      	str	r0, [r6, #0]
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	b003      	add	sp, #12
 8011eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011eba:	6161      	str	r1, [r4, #20]
 8011ebc:	e7ea      	b.n	8011e94 <__d2b+0x58>
 8011ebe:	a801      	add	r0, sp, #4
 8011ec0:	f7ff fd59 	bl	8011976 <__lo0bits>
 8011ec4:	9b01      	ldr	r3, [sp, #4]
 8011ec6:	6163      	str	r3, [r4, #20]
 8011ec8:	3020      	adds	r0, #32
 8011eca:	2201      	movs	r2, #1
 8011ecc:	e7e8      	b.n	8011ea0 <__d2b+0x64>
 8011ece:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ed2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011ed6:	6038      	str	r0, [r7, #0]
 8011ed8:	6918      	ldr	r0, [r3, #16]
 8011eda:	f7ff fd2d 	bl	8011938 <__hi0bits>
 8011ede:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ee2:	e7e5      	b.n	8011eb0 <__d2b+0x74>
 8011ee4:	08014778 	.word	0x08014778
 8011ee8:	08014789 	.word	0x08014789

08011eec <__ssputs_r>:
 8011eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ef0:	688e      	ldr	r6, [r1, #8]
 8011ef2:	461f      	mov	r7, r3
 8011ef4:	42be      	cmp	r6, r7
 8011ef6:	680b      	ldr	r3, [r1, #0]
 8011ef8:	4682      	mov	sl, r0
 8011efa:	460c      	mov	r4, r1
 8011efc:	4690      	mov	r8, r2
 8011efe:	d82d      	bhi.n	8011f5c <__ssputs_r+0x70>
 8011f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011f08:	d026      	beq.n	8011f58 <__ssputs_r+0x6c>
 8011f0a:	6965      	ldr	r5, [r4, #20]
 8011f0c:	6909      	ldr	r1, [r1, #16]
 8011f0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f12:	eba3 0901 	sub.w	r9, r3, r1
 8011f16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f1a:	1c7b      	adds	r3, r7, #1
 8011f1c:	444b      	add	r3, r9
 8011f1e:	106d      	asrs	r5, r5, #1
 8011f20:	429d      	cmp	r5, r3
 8011f22:	bf38      	it	cc
 8011f24:	461d      	movcc	r5, r3
 8011f26:	0553      	lsls	r3, r2, #21
 8011f28:	d527      	bpl.n	8011f7a <__ssputs_r+0x8e>
 8011f2a:	4629      	mov	r1, r5
 8011f2c:	f7ff fbd0 	bl	80116d0 <_malloc_r>
 8011f30:	4606      	mov	r6, r0
 8011f32:	b360      	cbz	r0, 8011f8e <__ssputs_r+0xa2>
 8011f34:	6921      	ldr	r1, [r4, #16]
 8011f36:	464a      	mov	r2, r9
 8011f38:	f7fe fcf9 	bl	801092e <memcpy>
 8011f3c:	89a3      	ldrh	r3, [r4, #12]
 8011f3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f46:	81a3      	strh	r3, [r4, #12]
 8011f48:	6126      	str	r6, [r4, #16]
 8011f4a:	6165      	str	r5, [r4, #20]
 8011f4c:	444e      	add	r6, r9
 8011f4e:	eba5 0509 	sub.w	r5, r5, r9
 8011f52:	6026      	str	r6, [r4, #0]
 8011f54:	60a5      	str	r5, [r4, #8]
 8011f56:	463e      	mov	r6, r7
 8011f58:	42be      	cmp	r6, r7
 8011f5a:	d900      	bls.n	8011f5e <__ssputs_r+0x72>
 8011f5c:	463e      	mov	r6, r7
 8011f5e:	6820      	ldr	r0, [r4, #0]
 8011f60:	4632      	mov	r2, r6
 8011f62:	4641      	mov	r1, r8
 8011f64:	f000 f9c6 	bl	80122f4 <memmove>
 8011f68:	68a3      	ldr	r3, [r4, #8]
 8011f6a:	1b9b      	subs	r3, r3, r6
 8011f6c:	60a3      	str	r3, [r4, #8]
 8011f6e:	6823      	ldr	r3, [r4, #0]
 8011f70:	4433      	add	r3, r6
 8011f72:	6023      	str	r3, [r4, #0]
 8011f74:	2000      	movs	r0, #0
 8011f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f7a:	462a      	mov	r2, r5
 8011f7c:	f000 fa28 	bl	80123d0 <_realloc_r>
 8011f80:	4606      	mov	r6, r0
 8011f82:	2800      	cmp	r0, #0
 8011f84:	d1e0      	bne.n	8011f48 <__ssputs_r+0x5c>
 8011f86:	6921      	ldr	r1, [r4, #16]
 8011f88:	4650      	mov	r0, sl
 8011f8a:	f7ff fb2d 	bl	80115e8 <_free_r>
 8011f8e:	230c      	movs	r3, #12
 8011f90:	f8ca 3000 	str.w	r3, [sl]
 8011f94:	89a3      	ldrh	r3, [r4, #12]
 8011f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f9a:	81a3      	strh	r3, [r4, #12]
 8011f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa0:	e7e9      	b.n	8011f76 <__ssputs_r+0x8a>
	...

08011fa4 <_svfiprintf_r>:
 8011fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa8:	4698      	mov	r8, r3
 8011faa:	898b      	ldrh	r3, [r1, #12]
 8011fac:	061b      	lsls	r3, r3, #24
 8011fae:	b09d      	sub	sp, #116	@ 0x74
 8011fb0:	4607      	mov	r7, r0
 8011fb2:	460d      	mov	r5, r1
 8011fb4:	4614      	mov	r4, r2
 8011fb6:	d510      	bpl.n	8011fda <_svfiprintf_r+0x36>
 8011fb8:	690b      	ldr	r3, [r1, #16]
 8011fba:	b973      	cbnz	r3, 8011fda <_svfiprintf_r+0x36>
 8011fbc:	2140      	movs	r1, #64	@ 0x40
 8011fbe:	f7ff fb87 	bl	80116d0 <_malloc_r>
 8011fc2:	6028      	str	r0, [r5, #0]
 8011fc4:	6128      	str	r0, [r5, #16]
 8011fc6:	b930      	cbnz	r0, 8011fd6 <_svfiprintf_r+0x32>
 8011fc8:	230c      	movs	r3, #12
 8011fca:	603b      	str	r3, [r7, #0]
 8011fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8011fd0:	b01d      	add	sp, #116	@ 0x74
 8011fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd6:	2340      	movs	r3, #64	@ 0x40
 8011fd8:	616b      	str	r3, [r5, #20]
 8011fda:	2300      	movs	r3, #0
 8011fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fde:	2320      	movs	r3, #32
 8011fe0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fe8:	2330      	movs	r3, #48	@ 0x30
 8011fea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012188 <_svfiprintf_r+0x1e4>
 8011fee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ff2:	f04f 0901 	mov.w	r9, #1
 8011ff6:	4623      	mov	r3, r4
 8011ff8:	469a      	mov	sl, r3
 8011ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ffe:	b10a      	cbz	r2, 8012004 <_svfiprintf_r+0x60>
 8012000:	2a25      	cmp	r2, #37	@ 0x25
 8012002:	d1f9      	bne.n	8011ff8 <_svfiprintf_r+0x54>
 8012004:	ebba 0b04 	subs.w	fp, sl, r4
 8012008:	d00b      	beq.n	8012022 <_svfiprintf_r+0x7e>
 801200a:	465b      	mov	r3, fp
 801200c:	4622      	mov	r2, r4
 801200e:	4629      	mov	r1, r5
 8012010:	4638      	mov	r0, r7
 8012012:	f7ff ff6b 	bl	8011eec <__ssputs_r>
 8012016:	3001      	adds	r0, #1
 8012018:	f000 80a7 	beq.w	801216a <_svfiprintf_r+0x1c6>
 801201c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801201e:	445a      	add	r2, fp
 8012020:	9209      	str	r2, [sp, #36]	@ 0x24
 8012022:	f89a 3000 	ldrb.w	r3, [sl]
 8012026:	2b00      	cmp	r3, #0
 8012028:	f000 809f 	beq.w	801216a <_svfiprintf_r+0x1c6>
 801202c:	2300      	movs	r3, #0
 801202e:	f04f 32ff 	mov.w	r2, #4294967295
 8012032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012036:	f10a 0a01 	add.w	sl, sl, #1
 801203a:	9304      	str	r3, [sp, #16]
 801203c:	9307      	str	r3, [sp, #28]
 801203e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012042:	931a      	str	r3, [sp, #104]	@ 0x68
 8012044:	4654      	mov	r4, sl
 8012046:	2205      	movs	r2, #5
 8012048:	f814 1b01 	ldrb.w	r1, [r4], #1
 801204c:	484e      	ldr	r0, [pc, #312]	@ (8012188 <_svfiprintf_r+0x1e4>)
 801204e:	f7ee f8bf 	bl	80001d0 <memchr>
 8012052:	9a04      	ldr	r2, [sp, #16]
 8012054:	b9d8      	cbnz	r0, 801208e <_svfiprintf_r+0xea>
 8012056:	06d0      	lsls	r0, r2, #27
 8012058:	bf44      	itt	mi
 801205a:	2320      	movmi	r3, #32
 801205c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012060:	0711      	lsls	r1, r2, #28
 8012062:	bf44      	itt	mi
 8012064:	232b      	movmi	r3, #43	@ 0x2b
 8012066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801206a:	f89a 3000 	ldrb.w	r3, [sl]
 801206e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012070:	d015      	beq.n	801209e <_svfiprintf_r+0xfa>
 8012072:	9a07      	ldr	r2, [sp, #28]
 8012074:	4654      	mov	r4, sl
 8012076:	2000      	movs	r0, #0
 8012078:	f04f 0c0a 	mov.w	ip, #10
 801207c:	4621      	mov	r1, r4
 801207e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012082:	3b30      	subs	r3, #48	@ 0x30
 8012084:	2b09      	cmp	r3, #9
 8012086:	d94b      	bls.n	8012120 <_svfiprintf_r+0x17c>
 8012088:	b1b0      	cbz	r0, 80120b8 <_svfiprintf_r+0x114>
 801208a:	9207      	str	r2, [sp, #28]
 801208c:	e014      	b.n	80120b8 <_svfiprintf_r+0x114>
 801208e:	eba0 0308 	sub.w	r3, r0, r8
 8012092:	fa09 f303 	lsl.w	r3, r9, r3
 8012096:	4313      	orrs	r3, r2
 8012098:	9304      	str	r3, [sp, #16]
 801209a:	46a2      	mov	sl, r4
 801209c:	e7d2      	b.n	8012044 <_svfiprintf_r+0xa0>
 801209e:	9b03      	ldr	r3, [sp, #12]
 80120a0:	1d19      	adds	r1, r3, #4
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	9103      	str	r1, [sp, #12]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	bfbb      	ittet	lt
 80120aa:	425b      	neglt	r3, r3
 80120ac:	f042 0202 	orrlt.w	r2, r2, #2
 80120b0:	9307      	strge	r3, [sp, #28]
 80120b2:	9307      	strlt	r3, [sp, #28]
 80120b4:	bfb8      	it	lt
 80120b6:	9204      	strlt	r2, [sp, #16]
 80120b8:	7823      	ldrb	r3, [r4, #0]
 80120ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80120bc:	d10a      	bne.n	80120d4 <_svfiprintf_r+0x130>
 80120be:	7863      	ldrb	r3, [r4, #1]
 80120c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80120c2:	d132      	bne.n	801212a <_svfiprintf_r+0x186>
 80120c4:	9b03      	ldr	r3, [sp, #12]
 80120c6:	1d1a      	adds	r2, r3, #4
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	9203      	str	r2, [sp, #12]
 80120cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80120d0:	3402      	adds	r4, #2
 80120d2:	9305      	str	r3, [sp, #20]
 80120d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012198 <_svfiprintf_r+0x1f4>
 80120d8:	7821      	ldrb	r1, [r4, #0]
 80120da:	2203      	movs	r2, #3
 80120dc:	4650      	mov	r0, sl
 80120de:	f7ee f877 	bl	80001d0 <memchr>
 80120e2:	b138      	cbz	r0, 80120f4 <_svfiprintf_r+0x150>
 80120e4:	9b04      	ldr	r3, [sp, #16]
 80120e6:	eba0 000a 	sub.w	r0, r0, sl
 80120ea:	2240      	movs	r2, #64	@ 0x40
 80120ec:	4082      	lsls	r2, r0
 80120ee:	4313      	orrs	r3, r2
 80120f0:	3401      	adds	r4, #1
 80120f2:	9304      	str	r3, [sp, #16]
 80120f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120f8:	4824      	ldr	r0, [pc, #144]	@ (801218c <_svfiprintf_r+0x1e8>)
 80120fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80120fe:	2206      	movs	r2, #6
 8012100:	f7ee f866 	bl	80001d0 <memchr>
 8012104:	2800      	cmp	r0, #0
 8012106:	d036      	beq.n	8012176 <_svfiprintf_r+0x1d2>
 8012108:	4b21      	ldr	r3, [pc, #132]	@ (8012190 <_svfiprintf_r+0x1ec>)
 801210a:	bb1b      	cbnz	r3, 8012154 <_svfiprintf_r+0x1b0>
 801210c:	9b03      	ldr	r3, [sp, #12]
 801210e:	3307      	adds	r3, #7
 8012110:	f023 0307 	bic.w	r3, r3, #7
 8012114:	3308      	adds	r3, #8
 8012116:	9303      	str	r3, [sp, #12]
 8012118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801211a:	4433      	add	r3, r6
 801211c:	9309      	str	r3, [sp, #36]	@ 0x24
 801211e:	e76a      	b.n	8011ff6 <_svfiprintf_r+0x52>
 8012120:	fb0c 3202 	mla	r2, ip, r2, r3
 8012124:	460c      	mov	r4, r1
 8012126:	2001      	movs	r0, #1
 8012128:	e7a8      	b.n	801207c <_svfiprintf_r+0xd8>
 801212a:	2300      	movs	r3, #0
 801212c:	3401      	adds	r4, #1
 801212e:	9305      	str	r3, [sp, #20]
 8012130:	4619      	mov	r1, r3
 8012132:	f04f 0c0a 	mov.w	ip, #10
 8012136:	4620      	mov	r0, r4
 8012138:	f810 2b01 	ldrb.w	r2, [r0], #1
 801213c:	3a30      	subs	r2, #48	@ 0x30
 801213e:	2a09      	cmp	r2, #9
 8012140:	d903      	bls.n	801214a <_svfiprintf_r+0x1a6>
 8012142:	2b00      	cmp	r3, #0
 8012144:	d0c6      	beq.n	80120d4 <_svfiprintf_r+0x130>
 8012146:	9105      	str	r1, [sp, #20]
 8012148:	e7c4      	b.n	80120d4 <_svfiprintf_r+0x130>
 801214a:	fb0c 2101 	mla	r1, ip, r1, r2
 801214e:	4604      	mov	r4, r0
 8012150:	2301      	movs	r3, #1
 8012152:	e7f0      	b.n	8012136 <_svfiprintf_r+0x192>
 8012154:	ab03      	add	r3, sp, #12
 8012156:	9300      	str	r3, [sp, #0]
 8012158:	462a      	mov	r2, r5
 801215a:	4b0e      	ldr	r3, [pc, #56]	@ (8012194 <_svfiprintf_r+0x1f0>)
 801215c:	a904      	add	r1, sp, #16
 801215e:	4638      	mov	r0, r7
 8012160:	f7fd fe54 	bl	800fe0c <_printf_float>
 8012164:	1c42      	adds	r2, r0, #1
 8012166:	4606      	mov	r6, r0
 8012168:	d1d6      	bne.n	8012118 <_svfiprintf_r+0x174>
 801216a:	89ab      	ldrh	r3, [r5, #12]
 801216c:	065b      	lsls	r3, r3, #25
 801216e:	f53f af2d 	bmi.w	8011fcc <_svfiprintf_r+0x28>
 8012172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012174:	e72c      	b.n	8011fd0 <_svfiprintf_r+0x2c>
 8012176:	ab03      	add	r3, sp, #12
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	462a      	mov	r2, r5
 801217c:	4b05      	ldr	r3, [pc, #20]	@ (8012194 <_svfiprintf_r+0x1f0>)
 801217e:	a904      	add	r1, sp, #16
 8012180:	4638      	mov	r0, r7
 8012182:	f7fe f8db 	bl	801033c <_printf_i>
 8012186:	e7ed      	b.n	8012164 <_svfiprintf_r+0x1c0>
 8012188:	080148e0 	.word	0x080148e0
 801218c:	080148ea 	.word	0x080148ea
 8012190:	0800fe0d 	.word	0x0800fe0d
 8012194:	08011eed 	.word	0x08011eed
 8012198:	080148e6 	.word	0x080148e6

0801219c <__sflush_r>:
 801219c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80121a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121a4:	0716      	lsls	r6, r2, #28
 80121a6:	4605      	mov	r5, r0
 80121a8:	460c      	mov	r4, r1
 80121aa:	d454      	bmi.n	8012256 <__sflush_r+0xba>
 80121ac:	684b      	ldr	r3, [r1, #4]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	dc02      	bgt.n	80121b8 <__sflush_r+0x1c>
 80121b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	dd48      	ble.n	801224a <__sflush_r+0xae>
 80121b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121ba:	2e00      	cmp	r6, #0
 80121bc:	d045      	beq.n	801224a <__sflush_r+0xae>
 80121be:	2300      	movs	r3, #0
 80121c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80121c4:	682f      	ldr	r7, [r5, #0]
 80121c6:	6a21      	ldr	r1, [r4, #32]
 80121c8:	602b      	str	r3, [r5, #0]
 80121ca:	d030      	beq.n	801222e <__sflush_r+0x92>
 80121cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80121ce:	89a3      	ldrh	r3, [r4, #12]
 80121d0:	0759      	lsls	r1, r3, #29
 80121d2:	d505      	bpl.n	80121e0 <__sflush_r+0x44>
 80121d4:	6863      	ldr	r3, [r4, #4]
 80121d6:	1ad2      	subs	r2, r2, r3
 80121d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80121da:	b10b      	cbz	r3, 80121e0 <__sflush_r+0x44>
 80121dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80121de:	1ad2      	subs	r2, r2, r3
 80121e0:	2300      	movs	r3, #0
 80121e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121e4:	6a21      	ldr	r1, [r4, #32]
 80121e6:	4628      	mov	r0, r5
 80121e8:	47b0      	blx	r6
 80121ea:	1c43      	adds	r3, r0, #1
 80121ec:	89a3      	ldrh	r3, [r4, #12]
 80121ee:	d106      	bne.n	80121fe <__sflush_r+0x62>
 80121f0:	6829      	ldr	r1, [r5, #0]
 80121f2:	291d      	cmp	r1, #29
 80121f4:	d82b      	bhi.n	801224e <__sflush_r+0xb2>
 80121f6:	4a2a      	ldr	r2, [pc, #168]	@ (80122a0 <__sflush_r+0x104>)
 80121f8:	410a      	asrs	r2, r1
 80121fa:	07d6      	lsls	r6, r2, #31
 80121fc:	d427      	bmi.n	801224e <__sflush_r+0xb2>
 80121fe:	2200      	movs	r2, #0
 8012200:	6062      	str	r2, [r4, #4]
 8012202:	04d9      	lsls	r1, r3, #19
 8012204:	6922      	ldr	r2, [r4, #16]
 8012206:	6022      	str	r2, [r4, #0]
 8012208:	d504      	bpl.n	8012214 <__sflush_r+0x78>
 801220a:	1c42      	adds	r2, r0, #1
 801220c:	d101      	bne.n	8012212 <__sflush_r+0x76>
 801220e:	682b      	ldr	r3, [r5, #0]
 8012210:	b903      	cbnz	r3, 8012214 <__sflush_r+0x78>
 8012212:	6560      	str	r0, [r4, #84]	@ 0x54
 8012214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012216:	602f      	str	r7, [r5, #0]
 8012218:	b1b9      	cbz	r1, 801224a <__sflush_r+0xae>
 801221a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801221e:	4299      	cmp	r1, r3
 8012220:	d002      	beq.n	8012228 <__sflush_r+0x8c>
 8012222:	4628      	mov	r0, r5
 8012224:	f7ff f9e0 	bl	80115e8 <_free_r>
 8012228:	2300      	movs	r3, #0
 801222a:	6363      	str	r3, [r4, #52]	@ 0x34
 801222c:	e00d      	b.n	801224a <__sflush_r+0xae>
 801222e:	2301      	movs	r3, #1
 8012230:	4628      	mov	r0, r5
 8012232:	47b0      	blx	r6
 8012234:	4602      	mov	r2, r0
 8012236:	1c50      	adds	r0, r2, #1
 8012238:	d1c9      	bne.n	80121ce <__sflush_r+0x32>
 801223a:	682b      	ldr	r3, [r5, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d0c6      	beq.n	80121ce <__sflush_r+0x32>
 8012240:	2b1d      	cmp	r3, #29
 8012242:	d001      	beq.n	8012248 <__sflush_r+0xac>
 8012244:	2b16      	cmp	r3, #22
 8012246:	d11e      	bne.n	8012286 <__sflush_r+0xea>
 8012248:	602f      	str	r7, [r5, #0]
 801224a:	2000      	movs	r0, #0
 801224c:	e022      	b.n	8012294 <__sflush_r+0xf8>
 801224e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012252:	b21b      	sxth	r3, r3
 8012254:	e01b      	b.n	801228e <__sflush_r+0xf2>
 8012256:	690f      	ldr	r7, [r1, #16]
 8012258:	2f00      	cmp	r7, #0
 801225a:	d0f6      	beq.n	801224a <__sflush_r+0xae>
 801225c:	0793      	lsls	r3, r2, #30
 801225e:	680e      	ldr	r6, [r1, #0]
 8012260:	bf08      	it	eq
 8012262:	694b      	ldreq	r3, [r1, #20]
 8012264:	600f      	str	r7, [r1, #0]
 8012266:	bf18      	it	ne
 8012268:	2300      	movne	r3, #0
 801226a:	eba6 0807 	sub.w	r8, r6, r7
 801226e:	608b      	str	r3, [r1, #8]
 8012270:	f1b8 0f00 	cmp.w	r8, #0
 8012274:	dde9      	ble.n	801224a <__sflush_r+0xae>
 8012276:	6a21      	ldr	r1, [r4, #32]
 8012278:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801227a:	4643      	mov	r3, r8
 801227c:	463a      	mov	r2, r7
 801227e:	4628      	mov	r0, r5
 8012280:	47b0      	blx	r6
 8012282:	2800      	cmp	r0, #0
 8012284:	dc08      	bgt.n	8012298 <__sflush_r+0xfc>
 8012286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801228a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801228e:	81a3      	strh	r3, [r4, #12]
 8012290:	f04f 30ff 	mov.w	r0, #4294967295
 8012294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012298:	4407      	add	r7, r0
 801229a:	eba8 0800 	sub.w	r8, r8, r0
 801229e:	e7e7      	b.n	8012270 <__sflush_r+0xd4>
 80122a0:	dfbffffe 	.word	0xdfbffffe

080122a4 <_fflush_r>:
 80122a4:	b538      	push	{r3, r4, r5, lr}
 80122a6:	690b      	ldr	r3, [r1, #16]
 80122a8:	4605      	mov	r5, r0
 80122aa:	460c      	mov	r4, r1
 80122ac:	b913      	cbnz	r3, 80122b4 <_fflush_r+0x10>
 80122ae:	2500      	movs	r5, #0
 80122b0:	4628      	mov	r0, r5
 80122b2:	bd38      	pop	{r3, r4, r5, pc}
 80122b4:	b118      	cbz	r0, 80122be <_fflush_r+0x1a>
 80122b6:	6a03      	ldr	r3, [r0, #32]
 80122b8:	b90b      	cbnz	r3, 80122be <_fflush_r+0x1a>
 80122ba:	f7fe f9eb 	bl	8010694 <__sinit>
 80122be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d0f3      	beq.n	80122ae <_fflush_r+0xa>
 80122c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80122c8:	07d0      	lsls	r0, r2, #31
 80122ca:	d404      	bmi.n	80122d6 <_fflush_r+0x32>
 80122cc:	0599      	lsls	r1, r3, #22
 80122ce:	d402      	bmi.n	80122d6 <_fflush_r+0x32>
 80122d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122d2:	f7fe fb2a 	bl	801092a <__retarget_lock_acquire_recursive>
 80122d6:	4628      	mov	r0, r5
 80122d8:	4621      	mov	r1, r4
 80122da:	f7ff ff5f 	bl	801219c <__sflush_r>
 80122de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80122e0:	07da      	lsls	r2, r3, #31
 80122e2:	4605      	mov	r5, r0
 80122e4:	d4e4      	bmi.n	80122b0 <_fflush_r+0xc>
 80122e6:	89a3      	ldrh	r3, [r4, #12]
 80122e8:	059b      	lsls	r3, r3, #22
 80122ea:	d4e1      	bmi.n	80122b0 <_fflush_r+0xc>
 80122ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122ee:	f7fe fb1d 	bl	801092c <__retarget_lock_release_recursive>
 80122f2:	e7dd      	b.n	80122b0 <_fflush_r+0xc>

080122f4 <memmove>:
 80122f4:	4288      	cmp	r0, r1
 80122f6:	b510      	push	{r4, lr}
 80122f8:	eb01 0402 	add.w	r4, r1, r2
 80122fc:	d902      	bls.n	8012304 <memmove+0x10>
 80122fe:	4284      	cmp	r4, r0
 8012300:	4623      	mov	r3, r4
 8012302:	d807      	bhi.n	8012314 <memmove+0x20>
 8012304:	1e43      	subs	r3, r0, #1
 8012306:	42a1      	cmp	r1, r4
 8012308:	d008      	beq.n	801231c <memmove+0x28>
 801230a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801230e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012312:	e7f8      	b.n	8012306 <memmove+0x12>
 8012314:	4402      	add	r2, r0
 8012316:	4601      	mov	r1, r0
 8012318:	428a      	cmp	r2, r1
 801231a:	d100      	bne.n	801231e <memmove+0x2a>
 801231c:	bd10      	pop	{r4, pc}
 801231e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012326:	e7f7      	b.n	8012318 <memmove+0x24>

08012328 <_sbrk_r>:
 8012328:	b538      	push	{r3, r4, r5, lr}
 801232a:	4d06      	ldr	r5, [pc, #24]	@ (8012344 <_sbrk_r+0x1c>)
 801232c:	2300      	movs	r3, #0
 801232e:	4604      	mov	r4, r0
 8012330:	4608      	mov	r0, r1
 8012332:	602b      	str	r3, [r5, #0]
 8012334:	f7f4 fe0e 	bl	8006f54 <_sbrk>
 8012338:	1c43      	adds	r3, r0, #1
 801233a:	d102      	bne.n	8012342 <_sbrk_r+0x1a>
 801233c:	682b      	ldr	r3, [r5, #0]
 801233e:	b103      	cbz	r3, 8012342 <_sbrk_r+0x1a>
 8012340:	6023      	str	r3, [r4, #0]
 8012342:	bd38      	pop	{r3, r4, r5, pc}
 8012344:	20005698 	.word	0x20005698

08012348 <__assert_func>:
 8012348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801234a:	4614      	mov	r4, r2
 801234c:	461a      	mov	r2, r3
 801234e:	4b09      	ldr	r3, [pc, #36]	@ (8012374 <__assert_func+0x2c>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	4605      	mov	r5, r0
 8012354:	68d8      	ldr	r0, [r3, #12]
 8012356:	b954      	cbnz	r4, 801236e <__assert_func+0x26>
 8012358:	4b07      	ldr	r3, [pc, #28]	@ (8012378 <__assert_func+0x30>)
 801235a:	461c      	mov	r4, r3
 801235c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012360:	9100      	str	r1, [sp, #0]
 8012362:	462b      	mov	r3, r5
 8012364:	4905      	ldr	r1, [pc, #20]	@ (801237c <__assert_func+0x34>)
 8012366:	f000 f86f 	bl	8012448 <fiprintf>
 801236a:	f000 f87f 	bl	801246c <abort>
 801236e:	4b04      	ldr	r3, [pc, #16]	@ (8012380 <__assert_func+0x38>)
 8012370:	e7f4      	b.n	801235c <__assert_func+0x14>
 8012372:	bf00      	nop
 8012374:	2000017c 	.word	0x2000017c
 8012378:	08014936 	.word	0x08014936
 801237c:	08014908 	.word	0x08014908
 8012380:	080148fb 	.word	0x080148fb

08012384 <_calloc_r>:
 8012384:	b570      	push	{r4, r5, r6, lr}
 8012386:	fba1 5402 	umull	r5, r4, r1, r2
 801238a:	b93c      	cbnz	r4, 801239c <_calloc_r+0x18>
 801238c:	4629      	mov	r1, r5
 801238e:	f7ff f99f 	bl	80116d0 <_malloc_r>
 8012392:	4606      	mov	r6, r0
 8012394:	b928      	cbnz	r0, 80123a2 <_calloc_r+0x1e>
 8012396:	2600      	movs	r6, #0
 8012398:	4630      	mov	r0, r6
 801239a:	bd70      	pop	{r4, r5, r6, pc}
 801239c:	220c      	movs	r2, #12
 801239e:	6002      	str	r2, [r0, #0]
 80123a0:	e7f9      	b.n	8012396 <_calloc_r+0x12>
 80123a2:	462a      	mov	r2, r5
 80123a4:	4621      	mov	r1, r4
 80123a6:	f7fe fa42 	bl	801082e <memset>
 80123aa:	e7f5      	b.n	8012398 <_calloc_r+0x14>

080123ac <__ascii_mbtowc>:
 80123ac:	b082      	sub	sp, #8
 80123ae:	b901      	cbnz	r1, 80123b2 <__ascii_mbtowc+0x6>
 80123b0:	a901      	add	r1, sp, #4
 80123b2:	b142      	cbz	r2, 80123c6 <__ascii_mbtowc+0x1a>
 80123b4:	b14b      	cbz	r3, 80123ca <__ascii_mbtowc+0x1e>
 80123b6:	7813      	ldrb	r3, [r2, #0]
 80123b8:	600b      	str	r3, [r1, #0]
 80123ba:	7812      	ldrb	r2, [r2, #0]
 80123bc:	1e10      	subs	r0, r2, #0
 80123be:	bf18      	it	ne
 80123c0:	2001      	movne	r0, #1
 80123c2:	b002      	add	sp, #8
 80123c4:	4770      	bx	lr
 80123c6:	4610      	mov	r0, r2
 80123c8:	e7fb      	b.n	80123c2 <__ascii_mbtowc+0x16>
 80123ca:	f06f 0001 	mvn.w	r0, #1
 80123ce:	e7f8      	b.n	80123c2 <__ascii_mbtowc+0x16>

080123d0 <_realloc_r>:
 80123d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123d4:	4680      	mov	r8, r0
 80123d6:	4615      	mov	r5, r2
 80123d8:	460c      	mov	r4, r1
 80123da:	b921      	cbnz	r1, 80123e6 <_realloc_r+0x16>
 80123dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123e0:	4611      	mov	r1, r2
 80123e2:	f7ff b975 	b.w	80116d0 <_malloc_r>
 80123e6:	b92a      	cbnz	r2, 80123f4 <_realloc_r+0x24>
 80123e8:	f7ff f8fe 	bl	80115e8 <_free_r>
 80123ec:	2400      	movs	r4, #0
 80123ee:	4620      	mov	r0, r4
 80123f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123f4:	f000 f841 	bl	801247a <_malloc_usable_size_r>
 80123f8:	4285      	cmp	r5, r0
 80123fa:	4606      	mov	r6, r0
 80123fc:	d802      	bhi.n	8012404 <_realloc_r+0x34>
 80123fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012402:	d8f4      	bhi.n	80123ee <_realloc_r+0x1e>
 8012404:	4629      	mov	r1, r5
 8012406:	4640      	mov	r0, r8
 8012408:	f7ff f962 	bl	80116d0 <_malloc_r>
 801240c:	4607      	mov	r7, r0
 801240e:	2800      	cmp	r0, #0
 8012410:	d0ec      	beq.n	80123ec <_realloc_r+0x1c>
 8012412:	42b5      	cmp	r5, r6
 8012414:	462a      	mov	r2, r5
 8012416:	4621      	mov	r1, r4
 8012418:	bf28      	it	cs
 801241a:	4632      	movcs	r2, r6
 801241c:	f7fe fa87 	bl	801092e <memcpy>
 8012420:	4621      	mov	r1, r4
 8012422:	4640      	mov	r0, r8
 8012424:	f7ff f8e0 	bl	80115e8 <_free_r>
 8012428:	463c      	mov	r4, r7
 801242a:	e7e0      	b.n	80123ee <_realloc_r+0x1e>

0801242c <__ascii_wctomb>:
 801242c:	4603      	mov	r3, r0
 801242e:	4608      	mov	r0, r1
 8012430:	b141      	cbz	r1, 8012444 <__ascii_wctomb+0x18>
 8012432:	2aff      	cmp	r2, #255	@ 0xff
 8012434:	d904      	bls.n	8012440 <__ascii_wctomb+0x14>
 8012436:	228a      	movs	r2, #138	@ 0x8a
 8012438:	601a      	str	r2, [r3, #0]
 801243a:	f04f 30ff 	mov.w	r0, #4294967295
 801243e:	4770      	bx	lr
 8012440:	700a      	strb	r2, [r1, #0]
 8012442:	2001      	movs	r0, #1
 8012444:	4770      	bx	lr
	...

08012448 <fiprintf>:
 8012448:	b40e      	push	{r1, r2, r3}
 801244a:	b503      	push	{r0, r1, lr}
 801244c:	4601      	mov	r1, r0
 801244e:	ab03      	add	r3, sp, #12
 8012450:	4805      	ldr	r0, [pc, #20]	@ (8012468 <fiprintf+0x20>)
 8012452:	f853 2b04 	ldr.w	r2, [r3], #4
 8012456:	6800      	ldr	r0, [r0, #0]
 8012458:	9301      	str	r3, [sp, #4]
 801245a:	f000 f83f 	bl	80124dc <_vfiprintf_r>
 801245e:	b002      	add	sp, #8
 8012460:	f85d eb04 	ldr.w	lr, [sp], #4
 8012464:	b003      	add	sp, #12
 8012466:	4770      	bx	lr
 8012468:	2000017c 	.word	0x2000017c

0801246c <abort>:
 801246c:	b508      	push	{r3, lr}
 801246e:	2006      	movs	r0, #6
 8012470:	f000 fa08 	bl	8012884 <raise>
 8012474:	2001      	movs	r0, #1
 8012476:	f7f4 fcf5 	bl	8006e64 <_exit>

0801247a <_malloc_usable_size_r>:
 801247a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801247e:	1f18      	subs	r0, r3, #4
 8012480:	2b00      	cmp	r3, #0
 8012482:	bfbc      	itt	lt
 8012484:	580b      	ldrlt	r3, [r1, r0]
 8012486:	18c0      	addlt	r0, r0, r3
 8012488:	4770      	bx	lr

0801248a <__sfputc_r>:
 801248a:	6893      	ldr	r3, [r2, #8]
 801248c:	3b01      	subs	r3, #1
 801248e:	2b00      	cmp	r3, #0
 8012490:	b410      	push	{r4}
 8012492:	6093      	str	r3, [r2, #8]
 8012494:	da08      	bge.n	80124a8 <__sfputc_r+0x1e>
 8012496:	6994      	ldr	r4, [r2, #24]
 8012498:	42a3      	cmp	r3, r4
 801249a:	db01      	blt.n	80124a0 <__sfputc_r+0x16>
 801249c:	290a      	cmp	r1, #10
 801249e:	d103      	bne.n	80124a8 <__sfputc_r+0x1e>
 80124a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124a4:	f000 b932 	b.w	801270c <__swbuf_r>
 80124a8:	6813      	ldr	r3, [r2, #0]
 80124aa:	1c58      	adds	r0, r3, #1
 80124ac:	6010      	str	r0, [r2, #0]
 80124ae:	7019      	strb	r1, [r3, #0]
 80124b0:	4608      	mov	r0, r1
 80124b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124b6:	4770      	bx	lr

080124b8 <__sfputs_r>:
 80124b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ba:	4606      	mov	r6, r0
 80124bc:	460f      	mov	r7, r1
 80124be:	4614      	mov	r4, r2
 80124c0:	18d5      	adds	r5, r2, r3
 80124c2:	42ac      	cmp	r4, r5
 80124c4:	d101      	bne.n	80124ca <__sfputs_r+0x12>
 80124c6:	2000      	movs	r0, #0
 80124c8:	e007      	b.n	80124da <__sfputs_r+0x22>
 80124ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124ce:	463a      	mov	r2, r7
 80124d0:	4630      	mov	r0, r6
 80124d2:	f7ff ffda 	bl	801248a <__sfputc_r>
 80124d6:	1c43      	adds	r3, r0, #1
 80124d8:	d1f3      	bne.n	80124c2 <__sfputs_r+0xa>
 80124da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080124dc <_vfiprintf_r>:
 80124dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e0:	460d      	mov	r5, r1
 80124e2:	b09d      	sub	sp, #116	@ 0x74
 80124e4:	4614      	mov	r4, r2
 80124e6:	4698      	mov	r8, r3
 80124e8:	4606      	mov	r6, r0
 80124ea:	b118      	cbz	r0, 80124f4 <_vfiprintf_r+0x18>
 80124ec:	6a03      	ldr	r3, [r0, #32]
 80124ee:	b90b      	cbnz	r3, 80124f4 <_vfiprintf_r+0x18>
 80124f0:	f7fe f8d0 	bl	8010694 <__sinit>
 80124f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124f6:	07d9      	lsls	r1, r3, #31
 80124f8:	d405      	bmi.n	8012506 <_vfiprintf_r+0x2a>
 80124fa:	89ab      	ldrh	r3, [r5, #12]
 80124fc:	059a      	lsls	r2, r3, #22
 80124fe:	d402      	bmi.n	8012506 <_vfiprintf_r+0x2a>
 8012500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012502:	f7fe fa12 	bl	801092a <__retarget_lock_acquire_recursive>
 8012506:	89ab      	ldrh	r3, [r5, #12]
 8012508:	071b      	lsls	r3, r3, #28
 801250a:	d501      	bpl.n	8012510 <_vfiprintf_r+0x34>
 801250c:	692b      	ldr	r3, [r5, #16]
 801250e:	b99b      	cbnz	r3, 8012538 <_vfiprintf_r+0x5c>
 8012510:	4629      	mov	r1, r5
 8012512:	4630      	mov	r0, r6
 8012514:	f000 f938 	bl	8012788 <__swsetup_r>
 8012518:	b170      	cbz	r0, 8012538 <_vfiprintf_r+0x5c>
 801251a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801251c:	07dc      	lsls	r4, r3, #31
 801251e:	d504      	bpl.n	801252a <_vfiprintf_r+0x4e>
 8012520:	f04f 30ff 	mov.w	r0, #4294967295
 8012524:	b01d      	add	sp, #116	@ 0x74
 8012526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801252a:	89ab      	ldrh	r3, [r5, #12]
 801252c:	0598      	lsls	r0, r3, #22
 801252e:	d4f7      	bmi.n	8012520 <_vfiprintf_r+0x44>
 8012530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012532:	f7fe f9fb 	bl	801092c <__retarget_lock_release_recursive>
 8012536:	e7f3      	b.n	8012520 <_vfiprintf_r+0x44>
 8012538:	2300      	movs	r3, #0
 801253a:	9309      	str	r3, [sp, #36]	@ 0x24
 801253c:	2320      	movs	r3, #32
 801253e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012542:	f8cd 800c 	str.w	r8, [sp, #12]
 8012546:	2330      	movs	r3, #48	@ 0x30
 8012548:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80126f8 <_vfiprintf_r+0x21c>
 801254c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012550:	f04f 0901 	mov.w	r9, #1
 8012554:	4623      	mov	r3, r4
 8012556:	469a      	mov	sl, r3
 8012558:	f813 2b01 	ldrb.w	r2, [r3], #1
 801255c:	b10a      	cbz	r2, 8012562 <_vfiprintf_r+0x86>
 801255e:	2a25      	cmp	r2, #37	@ 0x25
 8012560:	d1f9      	bne.n	8012556 <_vfiprintf_r+0x7a>
 8012562:	ebba 0b04 	subs.w	fp, sl, r4
 8012566:	d00b      	beq.n	8012580 <_vfiprintf_r+0xa4>
 8012568:	465b      	mov	r3, fp
 801256a:	4622      	mov	r2, r4
 801256c:	4629      	mov	r1, r5
 801256e:	4630      	mov	r0, r6
 8012570:	f7ff ffa2 	bl	80124b8 <__sfputs_r>
 8012574:	3001      	adds	r0, #1
 8012576:	f000 80a7 	beq.w	80126c8 <_vfiprintf_r+0x1ec>
 801257a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801257c:	445a      	add	r2, fp
 801257e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012580:	f89a 3000 	ldrb.w	r3, [sl]
 8012584:	2b00      	cmp	r3, #0
 8012586:	f000 809f 	beq.w	80126c8 <_vfiprintf_r+0x1ec>
 801258a:	2300      	movs	r3, #0
 801258c:	f04f 32ff 	mov.w	r2, #4294967295
 8012590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012594:	f10a 0a01 	add.w	sl, sl, #1
 8012598:	9304      	str	r3, [sp, #16]
 801259a:	9307      	str	r3, [sp, #28]
 801259c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80125a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80125a2:	4654      	mov	r4, sl
 80125a4:	2205      	movs	r2, #5
 80125a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125aa:	4853      	ldr	r0, [pc, #332]	@ (80126f8 <_vfiprintf_r+0x21c>)
 80125ac:	f7ed fe10 	bl	80001d0 <memchr>
 80125b0:	9a04      	ldr	r2, [sp, #16]
 80125b2:	b9d8      	cbnz	r0, 80125ec <_vfiprintf_r+0x110>
 80125b4:	06d1      	lsls	r1, r2, #27
 80125b6:	bf44      	itt	mi
 80125b8:	2320      	movmi	r3, #32
 80125ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125be:	0713      	lsls	r3, r2, #28
 80125c0:	bf44      	itt	mi
 80125c2:	232b      	movmi	r3, #43	@ 0x2b
 80125c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125c8:	f89a 3000 	ldrb.w	r3, [sl]
 80125cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80125ce:	d015      	beq.n	80125fc <_vfiprintf_r+0x120>
 80125d0:	9a07      	ldr	r2, [sp, #28]
 80125d2:	4654      	mov	r4, sl
 80125d4:	2000      	movs	r0, #0
 80125d6:	f04f 0c0a 	mov.w	ip, #10
 80125da:	4621      	mov	r1, r4
 80125dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125e0:	3b30      	subs	r3, #48	@ 0x30
 80125e2:	2b09      	cmp	r3, #9
 80125e4:	d94b      	bls.n	801267e <_vfiprintf_r+0x1a2>
 80125e6:	b1b0      	cbz	r0, 8012616 <_vfiprintf_r+0x13a>
 80125e8:	9207      	str	r2, [sp, #28]
 80125ea:	e014      	b.n	8012616 <_vfiprintf_r+0x13a>
 80125ec:	eba0 0308 	sub.w	r3, r0, r8
 80125f0:	fa09 f303 	lsl.w	r3, r9, r3
 80125f4:	4313      	orrs	r3, r2
 80125f6:	9304      	str	r3, [sp, #16]
 80125f8:	46a2      	mov	sl, r4
 80125fa:	e7d2      	b.n	80125a2 <_vfiprintf_r+0xc6>
 80125fc:	9b03      	ldr	r3, [sp, #12]
 80125fe:	1d19      	adds	r1, r3, #4
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	9103      	str	r1, [sp, #12]
 8012604:	2b00      	cmp	r3, #0
 8012606:	bfbb      	ittet	lt
 8012608:	425b      	neglt	r3, r3
 801260a:	f042 0202 	orrlt.w	r2, r2, #2
 801260e:	9307      	strge	r3, [sp, #28]
 8012610:	9307      	strlt	r3, [sp, #28]
 8012612:	bfb8      	it	lt
 8012614:	9204      	strlt	r2, [sp, #16]
 8012616:	7823      	ldrb	r3, [r4, #0]
 8012618:	2b2e      	cmp	r3, #46	@ 0x2e
 801261a:	d10a      	bne.n	8012632 <_vfiprintf_r+0x156>
 801261c:	7863      	ldrb	r3, [r4, #1]
 801261e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012620:	d132      	bne.n	8012688 <_vfiprintf_r+0x1ac>
 8012622:	9b03      	ldr	r3, [sp, #12]
 8012624:	1d1a      	adds	r2, r3, #4
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	9203      	str	r2, [sp, #12]
 801262a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801262e:	3402      	adds	r4, #2
 8012630:	9305      	str	r3, [sp, #20]
 8012632:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012708 <_vfiprintf_r+0x22c>
 8012636:	7821      	ldrb	r1, [r4, #0]
 8012638:	2203      	movs	r2, #3
 801263a:	4650      	mov	r0, sl
 801263c:	f7ed fdc8 	bl	80001d0 <memchr>
 8012640:	b138      	cbz	r0, 8012652 <_vfiprintf_r+0x176>
 8012642:	9b04      	ldr	r3, [sp, #16]
 8012644:	eba0 000a 	sub.w	r0, r0, sl
 8012648:	2240      	movs	r2, #64	@ 0x40
 801264a:	4082      	lsls	r2, r0
 801264c:	4313      	orrs	r3, r2
 801264e:	3401      	adds	r4, #1
 8012650:	9304      	str	r3, [sp, #16]
 8012652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012656:	4829      	ldr	r0, [pc, #164]	@ (80126fc <_vfiprintf_r+0x220>)
 8012658:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801265c:	2206      	movs	r2, #6
 801265e:	f7ed fdb7 	bl	80001d0 <memchr>
 8012662:	2800      	cmp	r0, #0
 8012664:	d03f      	beq.n	80126e6 <_vfiprintf_r+0x20a>
 8012666:	4b26      	ldr	r3, [pc, #152]	@ (8012700 <_vfiprintf_r+0x224>)
 8012668:	bb1b      	cbnz	r3, 80126b2 <_vfiprintf_r+0x1d6>
 801266a:	9b03      	ldr	r3, [sp, #12]
 801266c:	3307      	adds	r3, #7
 801266e:	f023 0307 	bic.w	r3, r3, #7
 8012672:	3308      	adds	r3, #8
 8012674:	9303      	str	r3, [sp, #12]
 8012676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012678:	443b      	add	r3, r7
 801267a:	9309      	str	r3, [sp, #36]	@ 0x24
 801267c:	e76a      	b.n	8012554 <_vfiprintf_r+0x78>
 801267e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012682:	460c      	mov	r4, r1
 8012684:	2001      	movs	r0, #1
 8012686:	e7a8      	b.n	80125da <_vfiprintf_r+0xfe>
 8012688:	2300      	movs	r3, #0
 801268a:	3401      	adds	r4, #1
 801268c:	9305      	str	r3, [sp, #20]
 801268e:	4619      	mov	r1, r3
 8012690:	f04f 0c0a 	mov.w	ip, #10
 8012694:	4620      	mov	r0, r4
 8012696:	f810 2b01 	ldrb.w	r2, [r0], #1
 801269a:	3a30      	subs	r2, #48	@ 0x30
 801269c:	2a09      	cmp	r2, #9
 801269e:	d903      	bls.n	80126a8 <_vfiprintf_r+0x1cc>
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d0c6      	beq.n	8012632 <_vfiprintf_r+0x156>
 80126a4:	9105      	str	r1, [sp, #20]
 80126a6:	e7c4      	b.n	8012632 <_vfiprintf_r+0x156>
 80126a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80126ac:	4604      	mov	r4, r0
 80126ae:	2301      	movs	r3, #1
 80126b0:	e7f0      	b.n	8012694 <_vfiprintf_r+0x1b8>
 80126b2:	ab03      	add	r3, sp, #12
 80126b4:	9300      	str	r3, [sp, #0]
 80126b6:	462a      	mov	r2, r5
 80126b8:	4b12      	ldr	r3, [pc, #72]	@ (8012704 <_vfiprintf_r+0x228>)
 80126ba:	a904      	add	r1, sp, #16
 80126bc:	4630      	mov	r0, r6
 80126be:	f7fd fba5 	bl	800fe0c <_printf_float>
 80126c2:	4607      	mov	r7, r0
 80126c4:	1c78      	adds	r0, r7, #1
 80126c6:	d1d6      	bne.n	8012676 <_vfiprintf_r+0x19a>
 80126c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80126ca:	07d9      	lsls	r1, r3, #31
 80126cc:	d405      	bmi.n	80126da <_vfiprintf_r+0x1fe>
 80126ce:	89ab      	ldrh	r3, [r5, #12]
 80126d0:	059a      	lsls	r2, r3, #22
 80126d2:	d402      	bmi.n	80126da <_vfiprintf_r+0x1fe>
 80126d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80126d6:	f7fe f929 	bl	801092c <__retarget_lock_release_recursive>
 80126da:	89ab      	ldrh	r3, [r5, #12]
 80126dc:	065b      	lsls	r3, r3, #25
 80126de:	f53f af1f 	bmi.w	8012520 <_vfiprintf_r+0x44>
 80126e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126e4:	e71e      	b.n	8012524 <_vfiprintf_r+0x48>
 80126e6:	ab03      	add	r3, sp, #12
 80126e8:	9300      	str	r3, [sp, #0]
 80126ea:	462a      	mov	r2, r5
 80126ec:	4b05      	ldr	r3, [pc, #20]	@ (8012704 <_vfiprintf_r+0x228>)
 80126ee:	a904      	add	r1, sp, #16
 80126f0:	4630      	mov	r0, r6
 80126f2:	f7fd fe23 	bl	801033c <_printf_i>
 80126f6:	e7e4      	b.n	80126c2 <_vfiprintf_r+0x1e6>
 80126f8:	080148e0 	.word	0x080148e0
 80126fc:	080148ea 	.word	0x080148ea
 8012700:	0800fe0d 	.word	0x0800fe0d
 8012704:	080124b9 	.word	0x080124b9
 8012708:	080148e6 	.word	0x080148e6

0801270c <__swbuf_r>:
 801270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801270e:	460e      	mov	r6, r1
 8012710:	4614      	mov	r4, r2
 8012712:	4605      	mov	r5, r0
 8012714:	b118      	cbz	r0, 801271e <__swbuf_r+0x12>
 8012716:	6a03      	ldr	r3, [r0, #32]
 8012718:	b90b      	cbnz	r3, 801271e <__swbuf_r+0x12>
 801271a:	f7fd ffbb 	bl	8010694 <__sinit>
 801271e:	69a3      	ldr	r3, [r4, #24]
 8012720:	60a3      	str	r3, [r4, #8]
 8012722:	89a3      	ldrh	r3, [r4, #12]
 8012724:	071a      	lsls	r2, r3, #28
 8012726:	d501      	bpl.n	801272c <__swbuf_r+0x20>
 8012728:	6923      	ldr	r3, [r4, #16]
 801272a:	b943      	cbnz	r3, 801273e <__swbuf_r+0x32>
 801272c:	4621      	mov	r1, r4
 801272e:	4628      	mov	r0, r5
 8012730:	f000 f82a 	bl	8012788 <__swsetup_r>
 8012734:	b118      	cbz	r0, 801273e <__swbuf_r+0x32>
 8012736:	f04f 37ff 	mov.w	r7, #4294967295
 801273a:	4638      	mov	r0, r7
 801273c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801273e:	6823      	ldr	r3, [r4, #0]
 8012740:	6922      	ldr	r2, [r4, #16]
 8012742:	1a98      	subs	r0, r3, r2
 8012744:	6963      	ldr	r3, [r4, #20]
 8012746:	b2f6      	uxtb	r6, r6
 8012748:	4283      	cmp	r3, r0
 801274a:	4637      	mov	r7, r6
 801274c:	dc05      	bgt.n	801275a <__swbuf_r+0x4e>
 801274e:	4621      	mov	r1, r4
 8012750:	4628      	mov	r0, r5
 8012752:	f7ff fda7 	bl	80122a4 <_fflush_r>
 8012756:	2800      	cmp	r0, #0
 8012758:	d1ed      	bne.n	8012736 <__swbuf_r+0x2a>
 801275a:	68a3      	ldr	r3, [r4, #8]
 801275c:	3b01      	subs	r3, #1
 801275e:	60a3      	str	r3, [r4, #8]
 8012760:	6823      	ldr	r3, [r4, #0]
 8012762:	1c5a      	adds	r2, r3, #1
 8012764:	6022      	str	r2, [r4, #0]
 8012766:	701e      	strb	r6, [r3, #0]
 8012768:	6962      	ldr	r2, [r4, #20]
 801276a:	1c43      	adds	r3, r0, #1
 801276c:	429a      	cmp	r2, r3
 801276e:	d004      	beq.n	801277a <__swbuf_r+0x6e>
 8012770:	89a3      	ldrh	r3, [r4, #12]
 8012772:	07db      	lsls	r3, r3, #31
 8012774:	d5e1      	bpl.n	801273a <__swbuf_r+0x2e>
 8012776:	2e0a      	cmp	r6, #10
 8012778:	d1df      	bne.n	801273a <__swbuf_r+0x2e>
 801277a:	4621      	mov	r1, r4
 801277c:	4628      	mov	r0, r5
 801277e:	f7ff fd91 	bl	80122a4 <_fflush_r>
 8012782:	2800      	cmp	r0, #0
 8012784:	d0d9      	beq.n	801273a <__swbuf_r+0x2e>
 8012786:	e7d6      	b.n	8012736 <__swbuf_r+0x2a>

08012788 <__swsetup_r>:
 8012788:	b538      	push	{r3, r4, r5, lr}
 801278a:	4b29      	ldr	r3, [pc, #164]	@ (8012830 <__swsetup_r+0xa8>)
 801278c:	4605      	mov	r5, r0
 801278e:	6818      	ldr	r0, [r3, #0]
 8012790:	460c      	mov	r4, r1
 8012792:	b118      	cbz	r0, 801279c <__swsetup_r+0x14>
 8012794:	6a03      	ldr	r3, [r0, #32]
 8012796:	b90b      	cbnz	r3, 801279c <__swsetup_r+0x14>
 8012798:	f7fd ff7c 	bl	8010694 <__sinit>
 801279c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127a0:	0719      	lsls	r1, r3, #28
 80127a2:	d422      	bmi.n	80127ea <__swsetup_r+0x62>
 80127a4:	06da      	lsls	r2, r3, #27
 80127a6:	d407      	bmi.n	80127b8 <__swsetup_r+0x30>
 80127a8:	2209      	movs	r2, #9
 80127aa:	602a      	str	r2, [r5, #0]
 80127ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127b0:	81a3      	strh	r3, [r4, #12]
 80127b2:	f04f 30ff 	mov.w	r0, #4294967295
 80127b6:	e033      	b.n	8012820 <__swsetup_r+0x98>
 80127b8:	0758      	lsls	r0, r3, #29
 80127ba:	d512      	bpl.n	80127e2 <__swsetup_r+0x5a>
 80127bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80127be:	b141      	cbz	r1, 80127d2 <__swsetup_r+0x4a>
 80127c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80127c4:	4299      	cmp	r1, r3
 80127c6:	d002      	beq.n	80127ce <__swsetup_r+0x46>
 80127c8:	4628      	mov	r0, r5
 80127ca:	f7fe ff0d 	bl	80115e8 <_free_r>
 80127ce:	2300      	movs	r3, #0
 80127d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80127d2:	89a3      	ldrh	r3, [r4, #12]
 80127d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80127d8:	81a3      	strh	r3, [r4, #12]
 80127da:	2300      	movs	r3, #0
 80127dc:	6063      	str	r3, [r4, #4]
 80127de:	6923      	ldr	r3, [r4, #16]
 80127e0:	6023      	str	r3, [r4, #0]
 80127e2:	89a3      	ldrh	r3, [r4, #12]
 80127e4:	f043 0308 	orr.w	r3, r3, #8
 80127e8:	81a3      	strh	r3, [r4, #12]
 80127ea:	6923      	ldr	r3, [r4, #16]
 80127ec:	b94b      	cbnz	r3, 8012802 <__swsetup_r+0x7a>
 80127ee:	89a3      	ldrh	r3, [r4, #12]
 80127f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80127f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80127f8:	d003      	beq.n	8012802 <__swsetup_r+0x7a>
 80127fa:	4621      	mov	r1, r4
 80127fc:	4628      	mov	r0, r5
 80127fe:	f000 f883 	bl	8012908 <__smakebuf_r>
 8012802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012806:	f013 0201 	ands.w	r2, r3, #1
 801280a:	d00a      	beq.n	8012822 <__swsetup_r+0x9a>
 801280c:	2200      	movs	r2, #0
 801280e:	60a2      	str	r2, [r4, #8]
 8012810:	6962      	ldr	r2, [r4, #20]
 8012812:	4252      	negs	r2, r2
 8012814:	61a2      	str	r2, [r4, #24]
 8012816:	6922      	ldr	r2, [r4, #16]
 8012818:	b942      	cbnz	r2, 801282c <__swsetup_r+0xa4>
 801281a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801281e:	d1c5      	bne.n	80127ac <__swsetup_r+0x24>
 8012820:	bd38      	pop	{r3, r4, r5, pc}
 8012822:	0799      	lsls	r1, r3, #30
 8012824:	bf58      	it	pl
 8012826:	6962      	ldrpl	r2, [r4, #20]
 8012828:	60a2      	str	r2, [r4, #8]
 801282a:	e7f4      	b.n	8012816 <__swsetup_r+0x8e>
 801282c:	2000      	movs	r0, #0
 801282e:	e7f7      	b.n	8012820 <__swsetup_r+0x98>
 8012830:	2000017c 	.word	0x2000017c

08012834 <_raise_r>:
 8012834:	291f      	cmp	r1, #31
 8012836:	b538      	push	{r3, r4, r5, lr}
 8012838:	4605      	mov	r5, r0
 801283a:	460c      	mov	r4, r1
 801283c:	d904      	bls.n	8012848 <_raise_r+0x14>
 801283e:	2316      	movs	r3, #22
 8012840:	6003      	str	r3, [r0, #0]
 8012842:	f04f 30ff 	mov.w	r0, #4294967295
 8012846:	bd38      	pop	{r3, r4, r5, pc}
 8012848:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801284a:	b112      	cbz	r2, 8012852 <_raise_r+0x1e>
 801284c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012850:	b94b      	cbnz	r3, 8012866 <_raise_r+0x32>
 8012852:	4628      	mov	r0, r5
 8012854:	f000 f830 	bl	80128b8 <_getpid_r>
 8012858:	4622      	mov	r2, r4
 801285a:	4601      	mov	r1, r0
 801285c:	4628      	mov	r0, r5
 801285e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012862:	f000 b817 	b.w	8012894 <_kill_r>
 8012866:	2b01      	cmp	r3, #1
 8012868:	d00a      	beq.n	8012880 <_raise_r+0x4c>
 801286a:	1c59      	adds	r1, r3, #1
 801286c:	d103      	bne.n	8012876 <_raise_r+0x42>
 801286e:	2316      	movs	r3, #22
 8012870:	6003      	str	r3, [r0, #0]
 8012872:	2001      	movs	r0, #1
 8012874:	e7e7      	b.n	8012846 <_raise_r+0x12>
 8012876:	2100      	movs	r1, #0
 8012878:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801287c:	4620      	mov	r0, r4
 801287e:	4798      	blx	r3
 8012880:	2000      	movs	r0, #0
 8012882:	e7e0      	b.n	8012846 <_raise_r+0x12>

08012884 <raise>:
 8012884:	4b02      	ldr	r3, [pc, #8]	@ (8012890 <raise+0xc>)
 8012886:	4601      	mov	r1, r0
 8012888:	6818      	ldr	r0, [r3, #0]
 801288a:	f7ff bfd3 	b.w	8012834 <_raise_r>
 801288e:	bf00      	nop
 8012890:	2000017c 	.word	0x2000017c

08012894 <_kill_r>:
 8012894:	b538      	push	{r3, r4, r5, lr}
 8012896:	4d07      	ldr	r5, [pc, #28]	@ (80128b4 <_kill_r+0x20>)
 8012898:	2300      	movs	r3, #0
 801289a:	4604      	mov	r4, r0
 801289c:	4608      	mov	r0, r1
 801289e:	4611      	mov	r1, r2
 80128a0:	602b      	str	r3, [r5, #0]
 80128a2:	f7f4 facf 	bl	8006e44 <_kill>
 80128a6:	1c43      	adds	r3, r0, #1
 80128a8:	d102      	bne.n	80128b0 <_kill_r+0x1c>
 80128aa:	682b      	ldr	r3, [r5, #0]
 80128ac:	b103      	cbz	r3, 80128b0 <_kill_r+0x1c>
 80128ae:	6023      	str	r3, [r4, #0]
 80128b0:	bd38      	pop	{r3, r4, r5, pc}
 80128b2:	bf00      	nop
 80128b4:	20005698 	.word	0x20005698

080128b8 <_getpid_r>:
 80128b8:	f7f4 babc 	b.w	8006e34 <_getpid>

080128bc <__swhatbuf_r>:
 80128bc:	b570      	push	{r4, r5, r6, lr}
 80128be:	460c      	mov	r4, r1
 80128c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128c4:	2900      	cmp	r1, #0
 80128c6:	b096      	sub	sp, #88	@ 0x58
 80128c8:	4615      	mov	r5, r2
 80128ca:	461e      	mov	r6, r3
 80128cc:	da0d      	bge.n	80128ea <__swhatbuf_r+0x2e>
 80128ce:	89a3      	ldrh	r3, [r4, #12]
 80128d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80128d4:	f04f 0100 	mov.w	r1, #0
 80128d8:	bf14      	ite	ne
 80128da:	2340      	movne	r3, #64	@ 0x40
 80128dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80128e0:	2000      	movs	r0, #0
 80128e2:	6031      	str	r1, [r6, #0]
 80128e4:	602b      	str	r3, [r5, #0]
 80128e6:	b016      	add	sp, #88	@ 0x58
 80128e8:	bd70      	pop	{r4, r5, r6, pc}
 80128ea:	466a      	mov	r2, sp
 80128ec:	f000 f848 	bl	8012980 <_fstat_r>
 80128f0:	2800      	cmp	r0, #0
 80128f2:	dbec      	blt.n	80128ce <__swhatbuf_r+0x12>
 80128f4:	9901      	ldr	r1, [sp, #4]
 80128f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80128fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80128fe:	4259      	negs	r1, r3
 8012900:	4159      	adcs	r1, r3
 8012902:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012906:	e7eb      	b.n	80128e0 <__swhatbuf_r+0x24>

08012908 <__smakebuf_r>:
 8012908:	898b      	ldrh	r3, [r1, #12]
 801290a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801290c:	079d      	lsls	r5, r3, #30
 801290e:	4606      	mov	r6, r0
 8012910:	460c      	mov	r4, r1
 8012912:	d507      	bpl.n	8012924 <__smakebuf_r+0x1c>
 8012914:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012918:	6023      	str	r3, [r4, #0]
 801291a:	6123      	str	r3, [r4, #16]
 801291c:	2301      	movs	r3, #1
 801291e:	6163      	str	r3, [r4, #20]
 8012920:	b003      	add	sp, #12
 8012922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012924:	ab01      	add	r3, sp, #4
 8012926:	466a      	mov	r2, sp
 8012928:	f7ff ffc8 	bl	80128bc <__swhatbuf_r>
 801292c:	9f00      	ldr	r7, [sp, #0]
 801292e:	4605      	mov	r5, r0
 8012930:	4639      	mov	r1, r7
 8012932:	4630      	mov	r0, r6
 8012934:	f7fe fecc 	bl	80116d0 <_malloc_r>
 8012938:	b948      	cbnz	r0, 801294e <__smakebuf_r+0x46>
 801293a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801293e:	059a      	lsls	r2, r3, #22
 8012940:	d4ee      	bmi.n	8012920 <__smakebuf_r+0x18>
 8012942:	f023 0303 	bic.w	r3, r3, #3
 8012946:	f043 0302 	orr.w	r3, r3, #2
 801294a:	81a3      	strh	r3, [r4, #12]
 801294c:	e7e2      	b.n	8012914 <__smakebuf_r+0xc>
 801294e:	89a3      	ldrh	r3, [r4, #12]
 8012950:	6020      	str	r0, [r4, #0]
 8012952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012956:	81a3      	strh	r3, [r4, #12]
 8012958:	9b01      	ldr	r3, [sp, #4]
 801295a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801295e:	b15b      	cbz	r3, 8012978 <__smakebuf_r+0x70>
 8012960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012964:	4630      	mov	r0, r6
 8012966:	f000 f81d 	bl	80129a4 <_isatty_r>
 801296a:	b128      	cbz	r0, 8012978 <__smakebuf_r+0x70>
 801296c:	89a3      	ldrh	r3, [r4, #12]
 801296e:	f023 0303 	bic.w	r3, r3, #3
 8012972:	f043 0301 	orr.w	r3, r3, #1
 8012976:	81a3      	strh	r3, [r4, #12]
 8012978:	89a3      	ldrh	r3, [r4, #12]
 801297a:	431d      	orrs	r5, r3
 801297c:	81a5      	strh	r5, [r4, #12]
 801297e:	e7cf      	b.n	8012920 <__smakebuf_r+0x18>

08012980 <_fstat_r>:
 8012980:	b538      	push	{r3, r4, r5, lr}
 8012982:	4d07      	ldr	r5, [pc, #28]	@ (80129a0 <_fstat_r+0x20>)
 8012984:	2300      	movs	r3, #0
 8012986:	4604      	mov	r4, r0
 8012988:	4608      	mov	r0, r1
 801298a:	4611      	mov	r1, r2
 801298c:	602b      	str	r3, [r5, #0]
 801298e:	f7f4 fab9 	bl	8006f04 <_fstat>
 8012992:	1c43      	adds	r3, r0, #1
 8012994:	d102      	bne.n	801299c <_fstat_r+0x1c>
 8012996:	682b      	ldr	r3, [r5, #0]
 8012998:	b103      	cbz	r3, 801299c <_fstat_r+0x1c>
 801299a:	6023      	str	r3, [r4, #0]
 801299c:	bd38      	pop	{r3, r4, r5, pc}
 801299e:	bf00      	nop
 80129a0:	20005698 	.word	0x20005698

080129a4 <_isatty_r>:
 80129a4:	b538      	push	{r3, r4, r5, lr}
 80129a6:	4d06      	ldr	r5, [pc, #24]	@ (80129c0 <_isatty_r+0x1c>)
 80129a8:	2300      	movs	r3, #0
 80129aa:	4604      	mov	r4, r0
 80129ac:	4608      	mov	r0, r1
 80129ae:	602b      	str	r3, [r5, #0]
 80129b0:	f7f4 fab8 	bl	8006f24 <_isatty>
 80129b4:	1c43      	adds	r3, r0, #1
 80129b6:	d102      	bne.n	80129be <_isatty_r+0x1a>
 80129b8:	682b      	ldr	r3, [r5, #0]
 80129ba:	b103      	cbz	r3, 80129be <_isatty_r+0x1a>
 80129bc:	6023      	str	r3, [r4, #0]
 80129be:	bd38      	pop	{r3, r4, r5, pc}
 80129c0:	20005698 	.word	0x20005698

080129c4 <pow>:
 80129c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129c6:	ed2d 8b02 	vpush	{d8}
 80129ca:	eeb0 8a40 	vmov.f32	s16, s0
 80129ce:	eef0 8a60 	vmov.f32	s17, s1
 80129d2:	ec55 4b11 	vmov	r4, r5, d1
 80129d6:	f000 f94b 	bl	8012c70 <__ieee754_pow>
 80129da:	4622      	mov	r2, r4
 80129dc:	462b      	mov	r3, r5
 80129de:	4620      	mov	r0, r4
 80129e0:	4629      	mov	r1, r5
 80129e2:	ec57 6b10 	vmov	r6, r7, d0
 80129e6:	f7ee f8a1 	bl	8000b2c <__aeabi_dcmpun>
 80129ea:	2800      	cmp	r0, #0
 80129ec:	d13b      	bne.n	8012a66 <pow+0xa2>
 80129ee:	ec51 0b18 	vmov	r0, r1, d8
 80129f2:	2200      	movs	r2, #0
 80129f4:	2300      	movs	r3, #0
 80129f6:	f7ee f867 	bl	8000ac8 <__aeabi_dcmpeq>
 80129fa:	b1b8      	cbz	r0, 8012a2c <pow+0x68>
 80129fc:	2200      	movs	r2, #0
 80129fe:	2300      	movs	r3, #0
 8012a00:	4620      	mov	r0, r4
 8012a02:	4629      	mov	r1, r5
 8012a04:	f7ee f860 	bl	8000ac8 <__aeabi_dcmpeq>
 8012a08:	2800      	cmp	r0, #0
 8012a0a:	d146      	bne.n	8012a9a <pow+0xd6>
 8012a0c:	ec45 4b10 	vmov	d0, r4, r5
 8012a10:	f000 f848 	bl	8012aa4 <finite>
 8012a14:	b338      	cbz	r0, 8012a66 <pow+0xa2>
 8012a16:	2200      	movs	r2, #0
 8012a18:	2300      	movs	r3, #0
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	4629      	mov	r1, r5
 8012a1e:	f7ee f85d 	bl	8000adc <__aeabi_dcmplt>
 8012a22:	b300      	cbz	r0, 8012a66 <pow+0xa2>
 8012a24:	f7fd ff56 	bl	80108d4 <__errno>
 8012a28:	2322      	movs	r3, #34	@ 0x22
 8012a2a:	e01b      	b.n	8012a64 <pow+0xa0>
 8012a2c:	ec47 6b10 	vmov	d0, r6, r7
 8012a30:	f000 f838 	bl	8012aa4 <finite>
 8012a34:	b9e0      	cbnz	r0, 8012a70 <pow+0xac>
 8012a36:	eeb0 0a48 	vmov.f32	s0, s16
 8012a3a:	eef0 0a68 	vmov.f32	s1, s17
 8012a3e:	f000 f831 	bl	8012aa4 <finite>
 8012a42:	b1a8      	cbz	r0, 8012a70 <pow+0xac>
 8012a44:	ec45 4b10 	vmov	d0, r4, r5
 8012a48:	f000 f82c 	bl	8012aa4 <finite>
 8012a4c:	b180      	cbz	r0, 8012a70 <pow+0xac>
 8012a4e:	4632      	mov	r2, r6
 8012a50:	463b      	mov	r3, r7
 8012a52:	4630      	mov	r0, r6
 8012a54:	4639      	mov	r1, r7
 8012a56:	f7ee f869 	bl	8000b2c <__aeabi_dcmpun>
 8012a5a:	2800      	cmp	r0, #0
 8012a5c:	d0e2      	beq.n	8012a24 <pow+0x60>
 8012a5e:	f7fd ff39 	bl	80108d4 <__errno>
 8012a62:	2321      	movs	r3, #33	@ 0x21
 8012a64:	6003      	str	r3, [r0, #0]
 8012a66:	ecbd 8b02 	vpop	{d8}
 8012a6a:	ec47 6b10 	vmov	d0, r6, r7
 8012a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a70:	2200      	movs	r2, #0
 8012a72:	2300      	movs	r3, #0
 8012a74:	4630      	mov	r0, r6
 8012a76:	4639      	mov	r1, r7
 8012a78:	f7ee f826 	bl	8000ac8 <__aeabi_dcmpeq>
 8012a7c:	2800      	cmp	r0, #0
 8012a7e:	d0f2      	beq.n	8012a66 <pow+0xa2>
 8012a80:	eeb0 0a48 	vmov.f32	s0, s16
 8012a84:	eef0 0a68 	vmov.f32	s1, s17
 8012a88:	f000 f80c 	bl	8012aa4 <finite>
 8012a8c:	2800      	cmp	r0, #0
 8012a8e:	d0ea      	beq.n	8012a66 <pow+0xa2>
 8012a90:	ec45 4b10 	vmov	d0, r4, r5
 8012a94:	f000 f806 	bl	8012aa4 <finite>
 8012a98:	e7c3      	b.n	8012a22 <pow+0x5e>
 8012a9a:	4f01      	ldr	r7, [pc, #4]	@ (8012aa0 <pow+0xdc>)
 8012a9c:	2600      	movs	r6, #0
 8012a9e:	e7e2      	b.n	8012a66 <pow+0xa2>
 8012aa0:	3ff00000 	.word	0x3ff00000

08012aa4 <finite>:
 8012aa4:	b082      	sub	sp, #8
 8012aa6:	ed8d 0b00 	vstr	d0, [sp]
 8012aaa:	9801      	ldr	r0, [sp, #4]
 8012aac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012ab0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012ab4:	0fc0      	lsrs	r0, r0, #31
 8012ab6:	b002      	add	sp, #8
 8012ab8:	4770      	bx	lr
	...

08012abc <__ieee754_sqrt>:
 8012abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac0:	4a68      	ldr	r2, [pc, #416]	@ (8012c64 <__ieee754_sqrt+0x1a8>)
 8012ac2:	ec55 4b10 	vmov	r4, r5, d0
 8012ac6:	43aa      	bics	r2, r5
 8012ac8:	462b      	mov	r3, r5
 8012aca:	4621      	mov	r1, r4
 8012acc:	d110      	bne.n	8012af0 <__ieee754_sqrt+0x34>
 8012ace:	4622      	mov	r2, r4
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	4629      	mov	r1, r5
 8012ad4:	f7ed fd90 	bl	80005f8 <__aeabi_dmul>
 8012ad8:	4602      	mov	r2, r0
 8012ada:	460b      	mov	r3, r1
 8012adc:	4620      	mov	r0, r4
 8012ade:	4629      	mov	r1, r5
 8012ae0:	f7ed fbd4 	bl	800028c <__adddf3>
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	460d      	mov	r5, r1
 8012ae8:	ec45 4b10 	vmov	d0, r4, r5
 8012aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af0:	2d00      	cmp	r5, #0
 8012af2:	dc0e      	bgt.n	8012b12 <__ieee754_sqrt+0x56>
 8012af4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012af8:	4322      	orrs	r2, r4
 8012afa:	d0f5      	beq.n	8012ae8 <__ieee754_sqrt+0x2c>
 8012afc:	b19d      	cbz	r5, 8012b26 <__ieee754_sqrt+0x6a>
 8012afe:	4622      	mov	r2, r4
 8012b00:	4620      	mov	r0, r4
 8012b02:	4629      	mov	r1, r5
 8012b04:	f7ed fbc0 	bl	8000288 <__aeabi_dsub>
 8012b08:	4602      	mov	r2, r0
 8012b0a:	460b      	mov	r3, r1
 8012b0c:	f7ed fe9e 	bl	800084c <__aeabi_ddiv>
 8012b10:	e7e8      	b.n	8012ae4 <__ieee754_sqrt+0x28>
 8012b12:	152a      	asrs	r2, r5, #20
 8012b14:	d115      	bne.n	8012b42 <__ieee754_sqrt+0x86>
 8012b16:	2000      	movs	r0, #0
 8012b18:	e009      	b.n	8012b2e <__ieee754_sqrt+0x72>
 8012b1a:	0acb      	lsrs	r3, r1, #11
 8012b1c:	3a15      	subs	r2, #21
 8012b1e:	0549      	lsls	r1, r1, #21
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d0fa      	beq.n	8012b1a <__ieee754_sqrt+0x5e>
 8012b24:	e7f7      	b.n	8012b16 <__ieee754_sqrt+0x5a>
 8012b26:	462a      	mov	r2, r5
 8012b28:	e7fa      	b.n	8012b20 <__ieee754_sqrt+0x64>
 8012b2a:	005b      	lsls	r3, r3, #1
 8012b2c:	3001      	adds	r0, #1
 8012b2e:	02dc      	lsls	r4, r3, #11
 8012b30:	d5fb      	bpl.n	8012b2a <__ieee754_sqrt+0x6e>
 8012b32:	1e44      	subs	r4, r0, #1
 8012b34:	1b12      	subs	r2, r2, r4
 8012b36:	f1c0 0420 	rsb	r4, r0, #32
 8012b3a:	fa21 f404 	lsr.w	r4, r1, r4
 8012b3e:	4323      	orrs	r3, r4
 8012b40:	4081      	lsls	r1, r0
 8012b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b46:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012b4e:	07d2      	lsls	r2, r2, #31
 8012b50:	bf5c      	itt	pl
 8012b52:	005b      	lslpl	r3, r3, #1
 8012b54:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b5c:	bf58      	it	pl
 8012b5e:	0049      	lslpl	r1, r1, #1
 8012b60:	2600      	movs	r6, #0
 8012b62:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012b66:	106d      	asrs	r5, r5, #1
 8012b68:	0049      	lsls	r1, r1, #1
 8012b6a:	2016      	movs	r0, #22
 8012b6c:	4632      	mov	r2, r6
 8012b6e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012b72:	1917      	adds	r7, r2, r4
 8012b74:	429f      	cmp	r7, r3
 8012b76:	bfde      	ittt	le
 8012b78:	193a      	addle	r2, r7, r4
 8012b7a:	1bdb      	suble	r3, r3, r7
 8012b7c:	1936      	addle	r6, r6, r4
 8012b7e:	0fcf      	lsrs	r7, r1, #31
 8012b80:	3801      	subs	r0, #1
 8012b82:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012b86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012b8a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012b8e:	d1f0      	bne.n	8012b72 <__ieee754_sqrt+0xb6>
 8012b90:	4604      	mov	r4, r0
 8012b92:	2720      	movs	r7, #32
 8012b94:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	eb00 0e0c 	add.w	lr, r0, ip
 8012b9e:	db02      	blt.n	8012ba6 <__ieee754_sqrt+0xea>
 8012ba0:	d113      	bne.n	8012bca <__ieee754_sqrt+0x10e>
 8012ba2:	458e      	cmp	lr, r1
 8012ba4:	d811      	bhi.n	8012bca <__ieee754_sqrt+0x10e>
 8012ba6:	f1be 0f00 	cmp.w	lr, #0
 8012baa:	eb0e 000c 	add.w	r0, lr, ip
 8012bae:	da42      	bge.n	8012c36 <__ieee754_sqrt+0x17a>
 8012bb0:	2800      	cmp	r0, #0
 8012bb2:	db40      	blt.n	8012c36 <__ieee754_sqrt+0x17a>
 8012bb4:	f102 0801 	add.w	r8, r2, #1
 8012bb8:	1a9b      	subs	r3, r3, r2
 8012bba:	458e      	cmp	lr, r1
 8012bbc:	bf88      	it	hi
 8012bbe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012bc2:	eba1 010e 	sub.w	r1, r1, lr
 8012bc6:	4464      	add	r4, ip
 8012bc8:	4642      	mov	r2, r8
 8012bca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012bce:	3f01      	subs	r7, #1
 8012bd0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012bd4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012bd8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012bdc:	d1dc      	bne.n	8012b98 <__ieee754_sqrt+0xdc>
 8012bde:	4319      	orrs	r1, r3
 8012be0:	d01b      	beq.n	8012c1a <__ieee754_sqrt+0x15e>
 8012be2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012c68 <__ieee754_sqrt+0x1ac>
 8012be6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012c6c <__ieee754_sqrt+0x1b0>
 8012bea:	e9da 0100 	ldrd	r0, r1, [sl]
 8012bee:	e9db 2300 	ldrd	r2, r3, [fp]
 8012bf2:	f7ed fb49 	bl	8000288 <__aeabi_dsub>
 8012bf6:	e9da 8900 	ldrd	r8, r9, [sl]
 8012bfa:	4602      	mov	r2, r0
 8012bfc:	460b      	mov	r3, r1
 8012bfe:	4640      	mov	r0, r8
 8012c00:	4649      	mov	r1, r9
 8012c02:	f7ed ff75 	bl	8000af0 <__aeabi_dcmple>
 8012c06:	b140      	cbz	r0, 8012c1a <__ieee754_sqrt+0x15e>
 8012c08:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012c0c:	e9da 0100 	ldrd	r0, r1, [sl]
 8012c10:	e9db 2300 	ldrd	r2, r3, [fp]
 8012c14:	d111      	bne.n	8012c3a <__ieee754_sqrt+0x17e>
 8012c16:	3601      	adds	r6, #1
 8012c18:	463c      	mov	r4, r7
 8012c1a:	1072      	asrs	r2, r6, #1
 8012c1c:	0863      	lsrs	r3, r4, #1
 8012c1e:	07f1      	lsls	r1, r6, #31
 8012c20:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012c24:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012c28:	bf48      	it	mi
 8012c2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012c2e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8012c32:	4618      	mov	r0, r3
 8012c34:	e756      	b.n	8012ae4 <__ieee754_sqrt+0x28>
 8012c36:	4690      	mov	r8, r2
 8012c38:	e7be      	b.n	8012bb8 <__ieee754_sqrt+0xfc>
 8012c3a:	f7ed fb27 	bl	800028c <__adddf3>
 8012c3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8012c42:	4602      	mov	r2, r0
 8012c44:	460b      	mov	r3, r1
 8012c46:	4640      	mov	r0, r8
 8012c48:	4649      	mov	r1, r9
 8012c4a:	f7ed ff47 	bl	8000adc <__aeabi_dcmplt>
 8012c4e:	b120      	cbz	r0, 8012c5a <__ieee754_sqrt+0x19e>
 8012c50:	1ca0      	adds	r0, r4, #2
 8012c52:	bf08      	it	eq
 8012c54:	3601      	addeq	r6, #1
 8012c56:	3402      	adds	r4, #2
 8012c58:	e7df      	b.n	8012c1a <__ieee754_sqrt+0x15e>
 8012c5a:	1c63      	adds	r3, r4, #1
 8012c5c:	f023 0401 	bic.w	r4, r3, #1
 8012c60:	e7db      	b.n	8012c1a <__ieee754_sqrt+0x15e>
 8012c62:	bf00      	nop
 8012c64:	7ff00000 	.word	0x7ff00000
 8012c68:	20000340 	.word	0x20000340
 8012c6c:	20000338 	.word	0x20000338

08012c70 <__ieee754_pow>:
 8012c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c74:	b091      	sub	sp, #68	@ 0x44
 8012c76:	ed8d 1b00 	vstr	d1, [sp]
 8012c7a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8012c7e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8012c82:	ea5a 0001 	orrs.w	r0, sl, r1
 8012c86:	ec57 6b10 	vmov	r6, r7, d0
 8012c8a:	d113      	bne.n	8012cb4 <__ieee754_pow+0x44>
 8012c8c:	19b3      	adds	r3, r6, r6
 8012c8e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8012c92:	4152      	adcs	r2, r2
 8012c94:	4298      	cmp	r0, r3
 8012c96:	4b98      	ldr	r3, [pc, #608]	@ (8012ef8 <__ieee754_pow+0x288>)
 8012c98:	4193      	sbcs	r3, r2
 8012c9a:	f080 84ea 	bcs.w	8013672 <__ieee754_pow+0xa02>
 8012c9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ca2:	4630      	mov	r0, r6
 8012ca4:	4639      	mov	r1, r7
 8012ca6:	f7ed faf1 	bl	800028c <__adddf3>
 8012caa:	ec41 0b10 	vmov	d0, r0, r1
 8012cae:	b011      	add	sp, #68	@ 0x44
 8012cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb4:	4a91      	ldr	r2, [pc, #580]	@ (8012efc <__ieee754_pow+0x28c>)
 8012cb6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012cba:	4590      	cmp	r8, r2
 8012cbc:	463d      	mov	r5, r7
 8012cbe:	4633      	mov	r3, r6
 8012cc0:	d806      	bhi.n	8012cd0 <__ieee754_pow+0x60>
 8012cc2:	d101      	bne.n	8012cc8 <__ieee754_pow+0x58>
 8012cc4:	2e00      	cmp	r6, #0
 8012cc6:	d1ea      	bne.n	8012c9e <__ieee754_pow+0x2e>
 8012cc8:	4592      	cmp	sl, r2
 8012cca:	d801      	bhi.n	8012cd0 <__ieee754_pow+0x60>
 8012ccc:	d10e      	bne.n	8012cec <__ieee754_pow+0x7c>
 8012cce:	b169      	cbz	r1, 8012cec <__ieee754_pow+0x7c>
 8012cd0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8012cd4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012cd8:	431d      	orrs	r5, r3
 8012cda:	d1e0      	bne.n	8012c9e <__ieee754_pow+0x2e>
 8012cdc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012ce0:	18db      	adds	r3, r3, r3
 8012ce2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8012ce6:	4152      	adcs	r2, r2
 8012ce8:	429d      	cmp	r5, r3
 8012cea:	e7d4      	b.n	8012c96 <__ieee754_pow+0x26>
 8012cec:	2d00      	cmp	r5, #0
 8012cee:	46c3      	mov	fp, r8
 8012cf0:	da3a      	bge.n	8012d68 <__ieee754_pow+0xf8>
 8012cf2:	4a83      	ldr	r2, [pc, #524]	@ (8012f00 <__ieee754_pow+0x290>)
 8012cf4:	4592      	cmp	sl, r2
 8012cf6:	d84d      	bhi.n	8012d94 <__ieee754_pow+0x124>
 8012cf8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8012cfc:	4592      	cmp	sl, r2
 8012cfe:	f240 84c7 	bls.w	8013690 <__ieee754_pow+0xa20>
 8012d02:	ea4f 522a 	mov.w	r2, sl, asr #20
 8012d06:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8012d0a:	2a14      	cmp	r2, #20
 8012d0c:	dd0f      	ble.n	8012d2e <__ieee754_pow+0xbe>
 8012d0e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8012d12:	fa21 f402 	lsr.w	r4, r1, r2
 8012d16:	fa04 f202 	lsl.w	r2, r4, r2
 8012d1a:	428a      	cmp	r2, r1
 8012d1c:	f040 84b8 	bne.w	8013690 <__ieee754_pow+0xa20>
 8012d20:	f004 0401 	and.w	r4, r4, #1
 8012d24:	f1c4 0402 	rsb	r4, r4, #2
 8012d28:	2900      	cmp	r1, #0
 8012d2a:	d158      	bne.n	8012dde <__ieee754_pow+0x16e>
 8012d2c:	e00e      	b.n	8012d4c <__ieee754_pow+0xdc>
 8012d2e:	2900      	cmp	r1, #0
 8012d30:	d154      	bne.n	8012ddc <__ieee754_pow+0x16c>
 8012d32:	f1c2 0214 	rsb	r2, r2, #20
 8012d36:	fa4a f402 	asr.w	r4, sl, r2
 8012d3a:	fa04 f202 	lsl.w	r2, r4, r2
 8012d3e:	4552      	cmp	r2, sl
 8012d40:	f040 84a3 	bne.w	801368a <__ieee754_pow+0xa1a>
 8012d44:	f004 0401 	and.w	r4, r4, #1
 8012d48:	f1c4 0402 	rsb	r4, r4, #2
 8012d4c:	4a6d      	ldr	r2, [pc, #436]	@ (8012f04 <__ieee754_pow+0x294>)
 8012d4e:	4592      	cmp	sl, r2
 8012d50:	d12e      	bne.n	8012db0 <__ieee754_pow+0x140>
 8012d52:	f1b9 0f00 	cmp.w	r9, #0
 8012d56:	f280 8494 	bge.w	8013682 <__ieee754_pow+0xa12>
 8012d5a:	496a      	ldr	r1, [pc, #424]	@ (8012f04 <__ieee754_pow+0x294>)
 8012d5c:	4632      	mov	r2, r6
 8012d5e:	463b      	mov	r3, r7
 8012d60:	2000      	movs	r0, #0
 8012d62:	f7ed fd73 	bl	800084c <__aeabi_ddiv>
 8012d66:	e7a0      	b.n	8012caa <__ieee754_pow+0x3a>
 8012d68:	2400      	movs	r4, #0
 8012d6a:	bbc1      	cbnz	r1, 8012dde <__ieee754_pow+0x16e>
 8012d6c:	4a63      	ldr	r2, [pc, #396]	@ (8012efc <__ieee754_pow+0x28c>)
 8012d6e:	4592      	cmp	sl, r2
 8012d70:	d1ec      	bne.n	8012d4c <__ieee754_pow+0xdc>
 8012d72:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8012d76:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8012d7a:	431a      	orrs	r2, r3
 8012d7c:	f000 8479 	beq.w	8013672 <__ieee754_pow+0xa02>
 8012d80:	4b61      	ldr	r3, [pc, #388]	@ (8012f08 <__ieee754_pow+0x298>)
 8012d82:	4598      	cmp	r8, r3
 8012d84:	d908      	bls.n	8012d98 <__ieee754_pow+0x128>
 8012d86:	f1b9 0f00 	cmp.w	r9, #0
 8012d8a:	f2c0 8476 	blt.w	801367a <__ieee754_pow+0xa0a>
 8012d8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d92:	e78a      	b.n	8012caa <__ieee754_pow+0x3a>
 8012d94:	2402      	movs	r4, #2
 8012d96:	e7e8      	b.n	8012d6a <__ieee754_pow+0xfa>
 8012d98:	f1b9 0f00 	cmp.w	r9, #0
 8012d9c:	f04f 0000 	mov.w	r0, #0
 8012da0:	f04f 0100 	mov.w	r1, #0
 8012da4:	da81      	bge.n	8012caa <__ieee754_pow+0x3a>
 8012da6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012daa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012dae:	e77c      	b.n	8012caa <__ieee754_pow+0x3a>
 8012db0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8012db4:	d106      	bne.n	8012dc4 <__ieee754_pow+0x154>
 8012db6:	4632      	mov	r2, r6
 8012db8:	463b      	mov	r3, r7
 8012dba:	4630      	mov	r0, r6
 8012dbc:	4639      	mov	r1, r7
 8012dbe:	f7ed fc1b 	bl	80005f8 <__aeabi_dmul>
 8012dc2:	e772      	b.n	8012caa <__ieee754_pow+0x3a>
 8012dc4:	4a51      	ldr	r2, [pc, #324]	@ (8012f0c <__ieee754_pow+0x29c>)
 8012dc6:	4591      	cmp	r9, r2
 8012dc8:	d109      	bne.n	8012dde <__ieee754_pow+0x16e>
 8012dca:	2d00      	cmp	r5, #0
 8012dcc:	db07      	blt.n	8012dde <__ieee754_pow+0x16e>
 8012dce:	ec47 6b10 	vmov	d0, r6, r7
 8012dd2:	b011      	add	sp, #68	@ 0x44
 8012dd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dd8:	f7ff be70 	b.w	8012abc <__ieee754_sqrt>
 8012ddc:	2400      	movs	r4, #0
 8012dde:	ec47 6b10 	vmov	d0, r6, r7
 8012de2:	9302      	str	r3, [sp, #8]
 8012de4:	f000 fc88 	bl	80136f8 <fabs>
 8012de8:	9b02      	ldr	r3, [sp, #8]
 8012dea:	ec51 0b10 	vmov	r0, r1, d0
 8012dee:	bb53      	cbnz	r3, 8012e46 <__ieee754_pow+0x1d6>
 8012df0:	4b44      	ldr	r3, [pc, #272]	@ (8012f04 <__ieee754_pow+0x294>)
 8012df2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d002      	beq.n	8012e00 <__ieee754_pow+0x190>
 8012dfa:	f1b8 0f00 	cmp.w	r8, #0
 8012dfe:	d122      	bne.n	8012e46 <__ieee754_pow+0x1d6>
 8012e00:	f1b9 0f00 	cmp.w	r9, #0
 8012e04:	da05      	bge.n	8012e12 <__ieee754_pow+0x1a2>
 8012e06:	4602      	mov	r2, r0
 8012e08:	460b      	mov	r3, r1
 8012e0a:	2000      	movs	r0, #0
 8012e0c:	493d      	ldr	r1, [pc, #244]	@ (8012f04 <__ieee754_pow+0x294>)
 8012e0e:	f7ed fd1d 	bl	800084c <__aeabi_ddiv>
 8012e12:	2d00      	cmp	r5, #0
 8012e14:	f6bf af49 	bge.w	8012caa <__ieee754_pow+0x3a>
 8012e18:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8012e1c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012e20:	ea58 0804 	orrs.w	r8, r8, r4
 8012e24:	d108      	bne.n	8012e38 <__ieee754_pow+0x1c8>
 8012e26:	4602      	mov	r2, r0
 8012e28:	460b      	mov	r3, r1
 8012e2a:	4610      	mov	r0, r2
 8012e2c:	4619      	mov	r1, r3
 8012e2e:	f7ed fa2b 	bl	8000288 <__aeabi_dsub>
 8012e32:	4602      	mov	r2, r0
 8012e34:	460b      	mov	r3, r1
 8012e36:	e794      	b.n	8012d62 <__ieee754_pow+0xf2>
 8012e38:	2c01      	cmp	r4, #1
 8012e3a:	f47f af36 	bne.w	8012caa <__ieee754_pow+0x3a>
 8012e3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012e42:	4619      	mov	r1, r3
 8012e44:	e731      	b.n	8012caa <__ieee754_pow+0x3a>
 8012e46:	0feb      	lsrs	r3, r5, #31
 8012e48:	3b01      	subs	r3, #1
 8012e4a:	ea53 0204 	orrs.w	r2, r3, r4
 8012e4e:	d102      	bne.n	8012e56 <__ieee754_pow+0x1e6>
 8012e50:	4632      	mov	r2, r6
 8012e52:	463b      	mov	r3, r7
 8012e54:	e7e9      	b.n	8012e2a <__ieee754_pow+0x1ba>
 8012e56:	3c01      	subs	r4, #1
 8012e58:	431c      	orrs	r4, r3
 8012e5a:	d016      	beq.n	8012e8a <__ieee754_pow+0x21a>
 8012e5c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8012ee8 <__ieee754_pow+0x278>
 8012e60:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8012e64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e68:	f240 8112 	bls.w	8013090 <__ieee754_pow+0x420>
 8012e6c:	4b28      	ldr	r3, [pc, #160]	@ (8012f10 <__ieee754_pow+0x2a0>)
 8012e6e:	459a      	cmp	sl, r3
 8012e70:	4b25      	ldr	r3, [pc, #148]	@ (8012f08 <__ieee754_pow+0x298>)
 8012e72:	d916      	bls.n	8012ea2 <__ieee754_pow+0x232>
 8012e74:	4598      	cmp	r8, r3
 8012e76:	d80b      	bhi.n	8012e90 <__ieee754_pow+0x220>
 8012e78:	f1b9 0f00 	cmp.w	r9, #0
 8012e7c:	da0b      	bge.n	8012e96 <__ieee754_pow+0x226>
 8012e7e:	2000      	movs	r0, #0
 8012e80:	b011      	add	sp, #68	@ 0x44
 8012e82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e86:	f000 bcf3 	b.w	8013870 <__math_oflow>
 8012e8a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8012ef0 <__ieee754_pow+0x280>
 8012e8e:	e7e7      	b.n	8012e60 <__ieee754_pow+0x1f0>
 8012e90:	f1b9 0f00 	cmp.w	r9, #0
 8012e94:	dcf3      	bgt.n	8012e7e <__ieee754_pow+0x20e>
 8012e96:	2000      	movs	r0, #0
 8012e98:	b011      	add	sp, #68	@ 0x44
 8012e9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e9e:	f000 bcdf 	b.w	8013860 <__math_uflow>
 8012ea2:	4598      	cmp	r8, r3
 8012ea4:	d20c      	bcs.n	8012ec0 <__ieee754_pow+0x250>
 8012ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	2300      	movs	r3, #0
 8012eae:	f7ed fe15 	bl	8000adc <__aeabi_dcmplt>
 8012eb2:	3800      	subs	r0, #0
 8012eb4:	bf18      	it	ne
 8012eb6:	2001      	movne	r0, #1
 8012eb8:	f1b9 0f00 	cmp.w	r9, #0
 8012ebc:	daec      	bge.n	8012e98 <__ieee754_pow+0x228>
 8012ebe:	e7df      	b.n	8012e80 <__ieee754_pow+0x210>
 8012ec0:	4b10      	ldr	r3, [pc, #64]	@ (8012f04 <__ieee754_pow+0x294>)
 8012ec2:	4598      	cmp	r8, r3
 8012ec4:	f04f 0200 	mov.w	r2, #0
 8012ec8:	d924      	bls.n	8012f14 <__ieee754_pow+0x2a4>
 8012eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ece:	2300      	movs	r3, #0
 8012ed0:	f7ed fe04 	bl	8000adc <__aeabi_dcmplt>
 8012ed4:	3800      	subs	r0, #0
 8012ed6:	bf18      	it	ne
 8012ed8:	2001      	movne	r0, #1
 8012eda:	f1b9 0f00 	cmp.w	r9, #0
 8012ede:	dccf      	bgt.n	8012e80 <__ieee754_pow+0x210>
 8012ee0:	e7da      	b.n	8012e98 <__ieee754_pow+0x228>
 8012ee2:	bf00      	nop
 8012ee4:	f3af 8000 	nop.w
 8012ee8:	00000000 	.word	0x00000000
 8012eec:	3ff00000 	.word	0x3ff00000
 8012ef0:	00000000 	.word	0x00000000
 8012ef4:	bff00000 	.word	0xbff00000
 8012ef8:	fff00000 	.word	0xfff00000
 8012efc:	7ff00000 	.word	0x7ff00000
 8012f00:	433fffff 	.word	0x433fffff
 8012f04:	3ff00000 	.word	0x3ff00000
 8012f08:	3fefffff 	.word	0x3fefffff
 8012f0c:	3fe00000 	.word	0x3fe00000
 8012f10:	43f00000 	.word	0x43f00000
 8012f14:	4b5a      	ldr	r3, [pc, #360]	@ (8013080 <__ieee754_pow+0x410>)
 8012f16:	f7ed f9b7 	bl	8000288 <__aeabi_dsub>
 8012f1a:	a351      	add	r3, pc, #324	@ (adr r3, 8013060 <__ieee754_pow+0x3f0>)
 8012f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f20:	4604      	mov	r4, r0
 8012f22:	460d      	mov	r5, r1
 8012f24:	f7ed fb68 	bl	80005f8 <__aeabi_dmul>
 8012f28:	a34f      	add	r3, pc, #316	@ (adr r3, 8013068 <__ieee754_pow+0x3f8>)
 8012f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2e:	4606      	mov	r6, r0
 8012f30:	460f      	mov	r7, r1
 8012f32:	4620      	mov	r0, r4
 8012f34:	4629      	mov	r1, r5
 8012f36:	f7ed fb5f 	bl	80005f8 <__aeabi_dmul>
 8012f3a:	4b52      	ldr	r3, [pc, #328]	@ (8013084 <__ieee754_pow+0x414>)
 8012f3c:	4682      	mov	sl, r0
 8012f3e:	468b      	mov	fp, r1
 8012f40:	2200      	movs	r2, #0
 8012f42:	4620      	mov	r0, r4
 8012f44:	4629      	mov	r1, r5
 8012f46:	f7ed fb57 	bl	80005f8 <__aeabi_dmul>
 8012f4a:	4602      	mov	r2, r0
 8012f4c:	460b      	mov	r3, r1
 8012f4e:	a148      	add	r1, pc, #288	@ (adr r1, 8013070 <__ieee754_pow+0x400>)
 8012f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f54:	f7ed f998 	bl	8000288 <__aeabi_dsub>
 8012f58:	4622      	mov	r2, r4
 8012f5a:	462b      	mov	r3, r5
 8012f5c:	f7ed fb4c 	bl	80005f8 <__aeabi_dmul>
 8012f60:	4602      	mov	r2, r0
 8012f62:	460b      	mov	r3, r1
 8012f64:	2000      	movs	r0, #0
 8012f66:	4948      	ldr	r1, [pc, #288]	@ (8013088 <__ieee754_pow+0x418>)
 8012f68:	f7ed f98e 	bl	8000288 <__aeabi_dsub>
 8012f6c:	4622      	mov	r2, r4
 8012f6e:	4680      	mov	r8, r0
 8012f70:	4689      	mov	r9, r1
 8012f72:	462b      	mov	r3, r5
 8012f74:	4620      	mov	r0, r4
 8012f76:	4629      	mov	r1, r5
 8012f78:	f7ed fb3e 	bl	80005f8 <__aeabi_dmul>
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	460b      	mov	r3, r1
 8012f80:	4640      	mov	r0, r8
 8012f82:	4649      	mov	r1, r9
 8012f84:	f7ed fb38 	bl	80005f8 <__aeabi_dmul>
 8012f88:	a33b      	add	r3, pc, #236	@ (adr r3, 8013078 <__ieee754_pow+0x408>)
 8012f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8e:	f7ed fb33 	bl	80005f8 <__aeabi_dmul>
 8012f92:	4602      	mov	r2, r0
 8012f94:	460b      	mov	r3, r1
 8012f96:	4650      	mov	r0, sl
 8012f98:	4659      	mov	r1, fp
 8012f9a:	f7ed f975 	bl	8000288 <__aeabi_dsub>
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	460b      	mov	r3, r1
 8012fa2:	4680      	mov	r8, r0
 8012fa4:	4689      	mov	r9, r1
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	4639      	mov	r1, r7
 8012faa:	f7ed f96f 	bl	800028c <__adddf3>
 8012fae:	2400      	movs	r4, #0
 8012fb0:	4632      	mov	r2, r6
 8012fb2:	463b      	mov	r3, r7
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	460d      	mov	r5, r1
 8012fb8:	f7ed f966 	bl	8000288 <__aeabi_dsub>
 8012fbc:	4602      	mov	r2, r0
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	4640      	mov	r0, r8
 8012fc2:	4649      	mov	r1, r9
 8012fc4:	f7ed f960 	bl	8000288 <__aeabi_dsub>
 8012fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	9304      	str	r3, [sp, #16]
 8012fd4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012fd8:	4606      	mov	r6, r0
 8012fda:	460f      	mov	r7, r1
 8012fdc:	4652      	mov	r2, sl
 8012fde:	465b      	mov	r3, fp
 8012fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fe4:	f7ed f950 	bl	8000288 <__aeabi_dsub>
 8012fe8:	4622      	mov	r2, r4
 8012fea:	462b      	mov	r3, r5
 8012fec:	f7ed fb04 	bl	80005f8 <__aeabi_dmul>
 8012ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ff4:	4680      	mov	r8, r0
 8012ff6:	4689      	mov	r9, r1
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	4639      	mov	r1, r7
 8012ffc:	f7ed fafc 	bl	80005f8 <__aeabi_dmul>
 8013000:	4602      	mov	r2, r0
 8013002:	460b      	mov	r3, r1
 8013004:	4640      	mov	r0, r8
 8013006:	4649      	mov	r1, r9
 8013008:	f7ed f940 	bl	800028c <__adddf3>
 801300c:	4652      	mov	r2, sl
 801300e:	465b      	mov	r3, fp
 8013010:	4606      	mov	r6, r0
 8013012:	460f      	mov	r7, r1
 8013014:	4620      	mov	r0, r4
 8013016:	4629      	mov	r1, r5
 8013018:	f7ed faee 	bl	80005f8 <__aeabi_dmul>
 801301c:	460b      	mov	r3, r1
 801301e:	4602      	mov	r2, r0
 8013020:	4680      	mov	r8, r0
 8013022:	4689      	mov	r9, r1
 8013024:	4630      	mov	r0, r6
 8013026:	4639      	mov	r1, r7
 8013028:	f7ed f930 	bl	800028c <__adddf3>
 801302c:	4b17      	ldr	r3, [pc, #92]	@ (801308c <__ieee754_pow+0x41c>)
 801302e:	4299      	cmp	r1, r3
 8013030:	4604      	mov	r4, r0
 8013032:	460d      	mov	r5, r1
 8013034:	468a      	mov	sl, r1
 8013036:	468b      	mov	fp, r1
 8013038:	f340 82ef 	ble.w	801361a <__ieee754_pow+0x9aa>
 801303c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013040:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013044:	4303      	orrs	r3, r0
 8013046:	f000 81e8 	beq.w	801341a <__ieee754_pow+0x7aa>
 801304a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801304e:	2200      	movs	r2, #0
 8013050:	2300      	movs	r3, #0
 8013052:	f7ed fd43 	bl	8000adc <__aeabi_dcmplt>
 8013056:	3800      	subs	r0, #0
 8013058:	bf18      	it	ne
 801305a:	2001      	movne	r0, #1
 801305c:	e710      	b.n	8012e80 <__ieee754_pow+0x210>
 801305e:	bf00      	nop
 8013060:	60000000 	.word	0x60000000
 8013064:	3ff71547 	.word	0x3ff71547
 8013068:	f85ddf44 	.word	0xf85ddf44
 801306c:	3e54ae0b 	.word	0x3e54ae0b
 8013070:	55555555 	.word	0x55555555
 8013074:	3fd55555 	.word	0x3fd55555
 8013078:	652b82fe 	.word	0x652b82fe
 801307c:	3ff71547 	.word	0x3ff71547
 8013080:	3ff00000 	.word	0x3ff00000
 8013084:	3fd00000 	.word	0x3fd00000
 8013088:	3fe00000 	.word	0x3fe00000
 801308c:	408fffff 	.word	0x408fffff
 8013090:	4bd5      	ldr	r3, [pc, #852]	@ (80133e8 <__ieee754_pow+0x778>)
 8013092:	402b      	ands	r3, r5
 8013094:	2200      	movs	r2, #0
 8013096:	b92b      	cbnz	r3, 80130a4 <__ieee754_pow+0x434>
 8013098:	4bd4      	ldr	r3, [pc, #848]	@ (80133ec <__ieee754_pow+0x77c>)
 801309a:	f7ed faad 	bl	80005f8 <__aeabi_dmul>
 801309e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80130a2:	468b      	mov	fp, r1
 80130a4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80130a8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80130ac:	4413      	add	r3, r2
 80130ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80130b0:	4bcf      	ldr	r3, [pc, #828]	@ (80133f0 <__ieee754_pow+0x780>)
 80130b2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80130b6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80130ba:	459b      	cmp	fp, r3
 80130bc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80130c0:	dd08      	ble.n	80130d4 <__ieee754_pow+0x464>
 80130c2:	4bcc      	ldr	r3, [pc, #816]	@ (80133f4 <__ieee754_pow+0x784>)
 80130c4:	459b      	cmp	fp, r3
 80130c6:	f340 81a5 	ble.w	8013414 <__ieee754_pow+0x7a4>
 80130ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80130cc:	3301      	adds	r3, #1
 80130ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80130d0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80130d4:	f04f 0a00 	mov.w	sl, #0
 80130d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80130dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80130de:	4bc6      	ldr	r3, [pc, #792]	@ (80133f8 <__ieee754_pow+0x788>)
 80130e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80130e4:	ed93 7b00 	vldr	d7, [r3]
 80130e8:	4629      	mov	r1, r5
 80130ea:	ec53 2b17 	vmov	r2, r3, d7
 80130ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80130f2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80130f6:	f7ed f8c7 	bl	8000288 <__aeabi_dsub>
 80130fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80130fe:	4606      	mov	r6, r0
 8013100:	460f      	mov	r7, r1
 8013102:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013106:	f7ed f8c1 	bl	800028c <__adddf3>
 801310a:	4602      	mov	r2, r0
 801310c:	460b      	mov	r3, r1
 801310e:	2000      	movs	r0, #0
 8013110:	49ba      	ldr	r1, [pc, #744]	@ (80133fc <__ieee754_pow+0x78c>)
 8013112:	f7ed fb9b 	bl	800084c <__aeabi_ddiv>
 8013116:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801311a:	4602      	mov	r2, r0
 801311c:	460b      	mov	r3, r1
 801311e:	4630      	mov	r0, r6
 8013120:	4639      	mov	r1, r7
 8013122:	f7ed fa69 	bl	80005f8 <__aeabi_dmul>
 8013126:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801312a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801312e:	106d      	asrs	r5, r5, #1
 8013130:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013134:	f04f 0b00 	mov.w	fp, #0
 8013138:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801313c:	4661      	mov	r1, ip
 801313e:	2200      	movs	r2, #0
 8013140:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013144:	4658      	mov	r0, fp
 8013146:	46e1      	mov	r9, ip
 8013148:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801314c:	4614      	mov	r4, r2
 801314e:	461d      	mov	r5, r3
 8013150:	f7ed fa52 	bl	80005f8 <__aeabi_dmul>
 8013154:	4602      	mov	r2, r0
 8013156:	460b      	mov	r3, r1
 8013158:	4630      	mov	r0, r6
 801315a:	4639      	mov	r1, r7
 801315c:	f7ed f894 	bl	8000288 <__aeabi_dsub>
 8013160:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013164:	4606      	mov	r6, r0
 8013166:	460f      	mov	r7, r1
 8013168:	4620      	mov	r0, r4
 801316a:	4629      	mov	r1, r5
 801316c:	f7ed f88c 	bl	8000288 <__aeabi_dsub>
 8013170:	4602      	mov	r2, r0
 8013172:	460b      	mov	r3, r1
 8013174:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013178:	f7ed f886 	bl	8000288 <__aeabi_dsub>
 801317c:	465a      	mov	r2, fp
 801317e:	464b      	mov	r3, r9
 8013180:	f7ed fa3a 	bl	80005f8 <__aeabi_dmul>
 8013184:	4602      	mov	r2, r0
 8013186:	460b      	mov	r3, r1
 8013188:	4630      	mov	r0, r6
 801318a:	4639      	mov	r1, r7
 801318c:	f7ed f87c 	bl	8000288 <__aeabi_dsub>
 8013190:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013194:	f7ed fa30 	bl	80005f8 <__aeabi_dmul>
 8013198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801319c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80131a0:	4610      	mov	r0, r2
 80131a2:	4619      	mov	r1, r3
 80131a4:	f7ed fa28 	bl	80005f8 <__aeabi_dmul>
 80131a8:	a37d      	add	r3, pc, #500	@ (adr r3, 80133a0 <__ieee754_pow+0x730>)
 80131aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ae:	4604      	mov	r4, r0
 80131b0:	460d      	mov	r5, r1
 80131b2:	f7ed fa21 	bl	80005f8 <__aeabi_dmul>
 80131b6:	a37c      	add	r3, pc, #496	@ (adr r3, 80133a8 <__ieee754_pow+0x738>)
 80131b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131bc:	f7ed f866 	bl	800028c <__adddf3>
 80131c0:	4622      	mov	r2, r4
 80131c2:	462b      	mov	r3, r5
 80131c4:	f7ed fa18 	bl	80005f8 <__aeabi_dmul>
 80131c8:	a379      	add	r3, pc, #484	@ (adr r3, 80133b0 <__ieee754_pow+0x740>)
 80131ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ce:	f7ed f85d 	bl	800028c <__adddf3>
 80131d2:	4622      	mov	r2, r4
 80131d4:	462b      	mov	r3, r5
 80131d6:	f7ed fa0f 	bl	80005f8 <__aeabi_dmul>
 80131da:	a377      	add	r3, pc, #476	@ (adr r3, 80133b8 <__ieee754_pow+0x748>)
 80131dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e0:	f7ed f854 	bl	800028c <__adddf3>
 80131e4:	4622      	mov	r2, r4
 80131e6:	462b      	mov	r3, r5
 80131e8:	f7ed fa06 	bl	80005f8 <__aeabi_dmul>
 80131ec:	a374      	add	r3, pc, #464	@ (adr r3, 80133c0 <__ieee754_pow+0x750>)
 80131ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f2:	f7ed f84b 	bl	800028c <__adddf3>
 80131f6:	4622      	mov	r2, r4
 80131f8:	462b      	mov	r3, r5
 80131fa:	f7ed f9fd 	bl	80005f8 <__aeabi_dmul>
 80131fe:	a372      	add	r3, pc, #456	@ (adr r3, 80133c8 <__ieee754_pow+0x758>)
 8013200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013204:	f7ed f842 	bl	800028c <__adddf3>
 8013208:	4622      	mov	r2, r4
 801320a:	4606      	mov	r6, r0
 801320c:	460f      	mov	r7, r1
 801320e:	462b      	mov	r3, r5
 8013210:	4620      	mov	r0, r4
 8013212:	4629      	mov	r1, r5
 8013214:	f7ed f9f0 	bl	80005f8 <__aeabi_dmul>
 8013218:	4602      	mov	r2, r0
 801321a:	460b      	mov	r3, r1
 801321c:	4630      	mov	r0, r6
 801321e:	4639      	mov	r1, r7
 8013220:	f7ed f9ea 	bl	80005f8 <__aeabi_dmul>
 8013224:	465a      	mov	r2, fp
 8013226:	4604      	mov	r4, r0
 8013228:	460d      	mov	r5, r1
 801322a:	464b      	mov	r3, r9
 801322c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013230:	f7ed f82c 	bl	800028c <__adddf3>
 8013234:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013238:	f7ed f9de 	bl	80005f8 <__aeabi_dmul>
 801323c:	4622      	mov	r2, r4
 801323e:	462b      	mov	r3, r5
 8013240:	f7ed f824 	bl	800028c <__adddf3>
 8013244:	465a      	mov	r2, fp
 8013246:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801324a:	464b      	mov	r3, r9
 801324c:	4658      	mov	r0, fp
 801324e:	4649      	mov	r1, r9
 8013250:	f7ed f9d2 	bl	80005f8 <__aeabi_dmul>
 8013254:	4b6a      	ldr	r3, [pc, #424]	@ (8013400 <__ieee754_pow+0x790>)
 8013256:	2200      	movs	r2, #0
 8013258:	4606      	mov	r6, r0
 801325a:	460f      	mov	r7, r1
 801325c:	f7ed f816 	bl	800028c <__adddf3>
 8013260:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013264:	f7ed f812 	bl	800028c <__adddf3>
 8013268:	46d8      	mov	r8, fp
 801326a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801326e:	460d      	mov	r5, r1
 8013270:	465a      	mov	r2, fp
 8013272:	460b      	mov	r3, r1
 8013274:	4640      	mov	r0, r8
 8013276:	4649      	mov	r1, r9
 8013278:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801327c:	f7ed f9bc 	bl	80005f8 <__aeabi_dmul>
 8013280:	465c      	mov	r4, fp
 8013282:	4680      	mov	r8, r0
 8013284:	4689      	mov	r9, r1
 8013286:	4b5e      	ldr	r3, [pc, #376]	@ (8013400 <__ieee754_pow+0x790>)
 8013288:	2200      	movs	r2, #0
 801328a:	4620      	mov	r0, r4
 801328c:	4629      	mov	r1, r5
 801328e:	f7ec fffb 	bl	8000288 <__aeabi_dsub>
 8013292:	4632      	mov	r2, r6
 8013294:	463b      	mov	r3, r7
 8013296:	f7ec fff7 	bl	8000288 <__aeabi_dsub>
 801329a:	4602      	mov	r2, r0
 801329c:	460b      	mov	r3, r1
 801329e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80132a2:	f7ec fff1 	bl	8000288 <__aeabi_dsub>
 80132a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132aa:	f7ed f9a5 	bl	80005f8 <__aeabi_dmul>
 80132ae:	4622      	mov	r2, r4
 80132b0:	4606      	mov	r6, r0
 80132b2:	460f      	mov	r7, r1
 80132b4:	462b      	mov	r3, r5
 80132b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80132ba:	f7ed f99d 	bl	80005f8 <__aeabi_dmul>
 80132be:	4602      	mov	r2, r0
 80132c0:	460b      	mov	r3, r1
 80132c2:	4630      	mov	r0, r6
 80132c4:	4639      	mov	r1, r7
 80132c6:	f7ec ffe1 	bl	800028c <__adddf3>
 80132ca:	4606      	mov	r6, r0
 80132cc:	460f      	mov	r7, r1
 80132ce:	4602      	mov	r2, r0
 80132d0:	460b      	mov	r3, r1
 80132d2:	4640      	mov	r0, r8
 80132d4:	4649      	mov	r1, r9
 80132d6:	f7ec ffd9 	bl	800028c <__adddf3>
 80132da:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80132de:	a33c      	add	r3, pc, #240	@ (adr r3, 80133d0 <__ieee754_pow+0x760>)
 80132e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e4:	4658      	mov	r0, fp
 80132e6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80132ea:	460d      	mov	r5, r1
 80132ec:	f7ed f984 	bl	80005f8 <__aeabi_dmul>
 80132f0:	465c      	mov	r4, fp
 80132f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80132f6:	4642      	mov	r2, r8
 80132f8:	464b      	mov	r3, r9
 80132fa:	4620      	mov	r0, r4
 80132fc:	4629      	mov	r1, r5
 80132fe:	f7ec ffc3 	bl	8000288 <__aeabi_dsub>
 8013302:	4602      	mov	r2, r0
 8013304:	460b      	mov	r3, r1
 8013306:	4630      	mov	r0, r6
 8013308:	4639      	mov	r1, r7
 801330a:	f7ec ffbd 	bl	8000288 <__aeabi_dsub>
 801330e:	a332      	add	r3, pc, #200	@ (adr r3, 80133d8 <__ieee754_pow+0x768>)
 8013310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013314:	f7ed f970 	bl	80005f8 <__aeabi_dmul>
 8013318:	a331      	add	r3, pc, #196	@ (adr r3, 80133e0 <__ieee754_pow+0x770>)
 801331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801331e:	4606      	mov	r6, r0
 8013320:	460f      	mov	r7, r1
 8013322:	4620      	mov	r0, r4
 8013324:	4629      	mov	r1, r5
 8013326:	f7ed f967 	bl	80005f8 <__aeabi_dmul>
 801332a:	4602      	mov	r2, r0
 801332c:	460b      	mov	r3, r1
 801332e:	4630      	mov	r0, r6
 8013330:	4639      	mov	r1, r7
 8013332:	f7ec ffab 	bl	800028c <__adddf3>
 8013336:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013338:	4b32      	ldr	r3, [pc, #200]	@ (8013404 <__ieee754_pow+0x794>)
 801333a:	4413      	add	r3, r2
 801333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013340:	f7ec ffa4 	bl	800028c <__adddf3>
 8013344:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013348:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801334a:	f7ed f8eb 	bl	8000524 <__aeabi_i2d>
 801334e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013350:	4b2d      	ldr	r3, [pc, #180]	@ (8013408 <__ieee754_pow+0x798>)
 8013352:	4413      	add	r3, r2
 8013354:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013358:	4606      	mov	r6, r0
 801335a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801335e:	460f      	mov	r7, r1
 8013360:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013364:	f7ec ff92 	bl	800028c <__adddf3>
 8013368:	4642      	mov	r2, r8
 801336a:	464b      	mov	r3, r9
 801336c:	f7ec ff8e 	bl	800028c <__adddf3>
 8013370:	4632      	mov	r2, r6
 8013372:	463b      	mov	r3, r7
 8013374:	f7ec ff8a 	bl	800028c <__adddf3>
 8013378:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801337c:	4632      	mov	r2, r6
 801337e:	463b      	mov	r3, r7
 8013380:	4658      	mov	r0, fp
 8013382:	460d      	mov	r5, r1
 8013384:	f7ec ff80 	bl	8000288 <__aeabi_dsub>
 8013388:	4642      	mov	r2, r8
 801338a:	464b      	mov	r3, r9
 801338c:	f7ec ff7c 	bl	8000288 <__aeabi_dsub>
 8013390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013394:	f7ec ff78 	bl	8000288 <__aeabi_dsub>
 8013398:	465c      	mov	r4, fp
 801339a:	4602      	mov	r2, r0
 801339c:	e036      	b.n	801340c <__ieee754_pow+0x79c>
 801339e:	bf00      	nop
 80133a0:	4a454eef 	.word	0x4a454eef
 80133a4:	3fca7e28 	.word	0x3fca7e28
 80133a8:	93c9db65 	.word	0x93c9db65
 80133ac:	3fcd864a 	.word	0x3fcd864a
 80133b0:	a91d4101 	.word	0xa91d4101
 80133b4:	3fd17460 	.word	0x3fd17460
 80133b8:	518f264d 	.word	0x518f264d
 80133bc:	3fd55555 	.word	0x3fd55555
 80133c0:	db6fabff 	.word	0xdb6fabff
 80133c4:	3fdb6db6 	.word	0x3fdb6db6
 80133c8:	33333303 	.word	0x33333303
 80133cc:	3fe33333 	.word	0x3fe33333
 80133d0:	e0000000 	.word	0xe0000000
 80133d4:	3feec709 	.word	0x3feec709
 80133d8:	dc3a03fd 	.word	0xdc3a03fd
 80133dc:	3feec709 	.word	0x3feec709
 80133e0:	145b01f5 	.word	0x145b01f5
 80133e4:	be3e2fe0 	.word	0xbe3e2fe0
 80133e8:	7ff00000 	.word	0x7ff00000
 80133ec:	43400000 	.word	0x43400000
 80133f0:	0003988e 	.word	0x0003988e
 80133f4:	000bb679 	.word	0x000bb679
 80133f8:	08014a58 	.word	0x08014a58
 80133fc:	3ff00000 	.word	0x3ff00000
 8013400:	40080000 	.word	0x40080000
 8013404:	08014a38 	.word	0x08014a38
 8013408:	08014a48 	.word	0x08014a48
 801340c:	460b      	mov	r3, r1
 801340e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013412:	e5d7      	b.n	8012fc4 <__ieee754_pow+0x354>
 8013414:	f04f 0a01 	mov.w	sl, #1
 8013418:	e65e      	b.n	80130d8 <__ieee754_pow+0x468>
 801341a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80136ec <__ieee754_pow+0xa7c>)
 801341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013420:	4630      	mov	r0, r6
 8013422:	4639      	mov	r1, r7
 8013424:	f7ec ff32 	bl	800028c <__adddf3>
 8013428:	4642      	mov	r2, r8
 801342a:	e9cd 0100 	strd	r0, r1, [sp]
 801342e:	464b      	mov	r3, r9
 8013430:	4620      	mov	r0, r4
 8013432:	4629      	mov	r1, r5
 8013434:	f7ec ff28 	bl	8000288 <__aeabi_dsub>
 8013438:	4602      	mov	r2, r0
 801343a:	460b      	mov	r3, r1
 801343c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013440:	f7ed fb6a 	bl	8000b18 <__aeabi_dcmpgt>
 8013444:	2800      	cmp	r0, #0
 8013446:	f47f ae00 	bne.w	801304a <__ieee754_pow+0x3da>
 801344a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801344e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013452:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013456:	fa43 fa0a 	asr.w	sl, r3, sl
 801345a:	44da      	add	sl, fp
 801345c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013460:	489d      	ldr	r0, [pc, #628]	@ (80136d8 <__ieee754_pow+0xa68>)
 8013462:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013466:	4108      	asrs	r0, r1
 8013468:	ea00 030a 	and.w	r3, r0, sl
 801346c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013470:	f1c1 0114 	rsb	r1, r1, #20
 8013474:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013478:	fa4a fa01 	asr.w	sl, sl, r1
 801347c:	f1bb 0f00 	cmp.w	fp, #0
 8013480:	4640      	mov	r0, r8
 8013482:	4649      	mov	r1, r9
 8013484:	f04f 0200 	mov.w	r2, #0
 8013488:	bfb8      	it	lt
 801348a:	f1ca 0a00 	rsblt	sl, sl, #0
 801348e:	f7ec fefb 	bl	8000288 <__aeabi_dsub>
 8013492:	4680      	mov	r8, r0
 8013494:	4689      	mov	r9, r1
 8013496:	4632      	mov	r2, r6
 8013498:	463b      	mov	r3, r7
 801349a:	4640      	mov	r0, r8
 801349c:	4649      	mov	r1, r9
 801349e:	f7ec fef5 	bl	800028c <__adddf3>
 80134a2:	2400      	movs	r4, #0
 80134a4:	a37c      	add	r3, pc, #496	@ (adr r3, 8013698 <__ieee754_pow+0xa28>)
 80134a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134aa:	4620      	mov	r0, r4
 80134ac:	460d      	mov	r5, r1
 80134ae:	f7ed f8a3 	bl	80005f8 <__aeabi_dmul>
 80134b2:	4642      	mov	r2, r8
 80134b4:	e9cd 0100 	strd	r0, r1, [sp]
 80134b8:	464b      	mov	r3, r9
 80134ba:	4620      	mov	r0, r4
 80134bc:	4629      	mov	r1, r5
 80134be:	f7ec fee3 	bl	8000288 <__aeabi_dsub>
 80134c2:	4602      	mov	r2, r0
 80134c4:	460b      	mov	r3, r1
 80134c6:	4630      	mov	r0, r6
 80134c8:	4639      	mov	r1, r7
 80134ca:	f7ec fedd 	bl	8000288 <__aeabi_dsub>
 80134ce:	a374      	add	r3, pc, #464	@ (adr r3, 80136a0 <__ieee754_pow+0xa30>)
 80134d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d4:	f7ed f890 	bl	80005f8 <__aeabi_dmul>
 80134d8:	a373      	add	r3, pc, #460	@ (adr r3, 80136a8 <__ieee754_pow+0xa38>)
 80134da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134de:	4680      	mov	r8, r0
 80134e0:	4689      	mov	r9, r1
 80134e2:	4620      	mov	r0, r4
 80134e4:	4629      	mov	r1, r5
 80134e6:	f7ed f887 	bl	80005f8 <__aeabi_dmul>
 80134ea:	4602      	mov	r2, r0
 80134ec:	460b      	mov	r3, r1
 80134ee:	4640      	mov	r0, r8
 80134f0:	4649      	mov	r1, r9
 80134f2:	f7ec fecb 	bl	800028c <__adddf3>
 80134f6:	4604      	mov	r4, r0
 80134f8:	460d      	mov	r5, r1
 80134fa:	4602      	mov	r2, r0
 80134fc:	460b      	mov	r3, r1
 80134fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013502:	f7ec fec3 	bl	800028c <__adddf3>
 8013506:	e9dd 2300 	ldrd	r2, r3, [sp]
 801350a:	4680      	mov	r8, r0
 801350c:	4689      	mov	r9, r1
 801350e:	f7ec febb 	bl	8000288 <__aeabi_dsub>
 8013512:	4602      	mov	r2, r0
 8013514:	460b      	mov	r3, r1
 8013516:	4620      	mov	r0, r4
 8013518:	4629      	mov	r1, r5
 801351a:	f7ec feb5 	bl	8000288 <__aeabi_dsub>
 801351e:	4642      	mov	r2, r8
 8013520:	4606      	mov	r6, r0
 8013522:	460f      	mov	r7, r1
 8013524:	464b      	mov	r3, r9
 8013526:	4640      	mov	r0, r8
 8013528:	4649      	mov	r1, r9
 801352a:	f7ed f865 	bl	80005f8 <__aeabi_dmul>
 801352e:	a360      	add	r3, pc, #384	@ (adr r3, 80136b0 <__ieee754_pow+0xa40>)
 8013530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013534:	4604      	mov	r4, r0
 8013536:	460d      	mov	r5, r1
 8013538:	f7ed f85e 	bl	80005f8 <__aeabi_dmul>
 801353c:	a35e      	add	r3, pc, #376	@ (adr r3, 80136b8 <__ieee754_pow+0xa48>)
 801353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013542:	f7ec fea1 	bl	8000288 <__aeabi_dsub>
 8013546:	4622      	mov	r2, r4
 8013548:	462b      	mov	r3, r5
 801354a:	f7ed f855 	bl	80005f8 <__aeabi_dmul>
 801354e:	a35c      	add	r3, pc, #368	@ (adr r3, 80136c0 <__ieee754_pow+0xa50>)
 8013550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013554:	f7ec fe9a 	bl	800028c <__adddf3>
 8013558:	4622      	mov	r2, r4
 801355a:	462b      	mov	r3, r5
 801355c:	f7ed f84c 	bl	80005f8 <__aeabi_dmul>
 8013560:	a359      	add	r3, pc, #356	@ (adr r3, 80136c8 <__ieee754_pow+0xa58>)
 8013562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013566:	f7ec fe8f 	bl	8000288 <__aeabi_dsub>
 801356a:	4622      	mov	r2, r4
 801356c:	462b      	mov	r3, r5
 801356e:	f7ed f843 	bl	80005f8 <__aeabi_dmul>
 8013572:	a357      	add	r3, pc, #348	@ (adr r3, 80136d0 <__ieee754_pow+0xa60>)
 8013574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013578:	f7ec fe88 	bl	800028c <__adddf3>
 801357c:	4622      	mov	r2, r4
 801357e:	462b      	mov	r3, r5
 8013580:	f7ed f83a 	bl	80005f8 <__aeabi_dmul>
 8013584:	4602      	mov	r2, r0
 8013586:	460b      	mov	r3, r1
 8013588:	4640      	mov	r0, r8
 801358a:	4649      	mov	r1, r9
 801358c:	f7ec fe7c 	bl	8000288 <__aeabi_dsub>
 8013590:	4604      	mov	r4, r0
 8013592:	460d      	mov	r5, r1
 8013594:	4602      	mov	r2, r0
 8013596:	460b      	mov	r3, r1
 8013598:	4640      	mov	r0, r8
 801359a:	4649      	mov	r1, r9
 801359c:	f7ed f82c 	bl	80005f8 <__aeabi_dmul>
 80135a0:	2200      	movs	r2, #0
 80135a2:	e9cd 0100 	strd	r0, r1, [sp]
 80135a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80135aa:	4620      	mov	r0, r4
 80135ac:	4629      	mov	r1, r5
 80135ae:	f7ec fe6b 	bl	8000288 <__aeabi_dsub>
 80135b2:	4602      	mov	r2, r0
 80135b4:	460b      	mov	r3, r1
 80135b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135ba:	f7ed f947 	bl	800084c <__aeabi_ddiv>
 80135be:	4632      	mov	r2, r6
 80135c0:	4604      	mov	r4, r0
 80135c2:	460d      	mov	r5, r1
 80135c4:	463b      	mov	r3, r7
 80135c6:	4640      	mov	r0, r8
 80135c8:	4649      	mov	r1, r9
 80135ca:	f7ed f815 	bl	80005f8 <__aeabi_dmul>
 80135ce:	4632      	mov	r2, r6
 80135d0:	463b      	mov	r3, r7
 80135d2:	f7ec fe5b 	bl	800028c <__adddf3>
 80135d6:	4602      	mov	r2, r0
 80135d8:	460b      	mov	r3, r1
 80135da:	4620      	mov	r0, r4
 80135dc:	4629      	mov	r1, r5
 80135de:	f7ec fe53 	bl	8000288 <__aeabi_dsub>
 80135e2:	4642      	mov	r2, r8
 80135e4:	464b      	mov	r3, r9
 80135e6:	f7ec fe4f 	bl	8000288 <__aeabi_dsub>
 80135ea:	460b      	mov	r3, r1
 80135ec:	4602      	mov	r2, r0
 80135ee:	493b      	ldr	r1, [pc, #236]	@ (80136dc <__ieee754_pow+0xa6c>)
 80135f0:	2000      	movs	r0, #0
 80135f2:	f7ec fe49 	bl	8000288 <__aeabi_dsub>
 80135f6:	ec41 0b10 	vmov	d0, r0, r1
 80135fa:	ee10 3a90 	vmov	r3, s1
 80135fe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013606:	da30      	bge.n	801366a <__ieee754_pow+0x9fa>
 8013608:	4650      	mov	r0, sl
 801360a:	f000 f87d 	bl	8013708 <scalbn>
 801360e:	ec51 0b10 	vmov	r0, r1, d0
 8013612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013616:	f7ff bbd2 	b.w	8012dbe <__ieee754_pow+0x14e>
 801361a:	4c31      	ldr	r4, [pc, #196]	@ (80136e0 <__ieee754_pow+0xa70>)
 801361c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013620:	42a3      	cmp	r3, r4
 8013622:	d91a      	bls.n	801365a <__ieee754_pow+0x9ea>
 8013624:	4b2f      	ldr	r3, [pc, #188]	@ (80136e4 <__ieee754_pow+0xa74>)
 8013626:	440b      	add	r3, r1
 8013628:	4303      	orrs	r3, r0
 801362a:	d009      	beq.n	8013640 <__ieee754_pow+0x9d0>
 801362c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013630:	2200      	movs	r2, #0
 8013632:	2300      	movs	r3, #0
 8013634:	f7ed fa52 	bl	8000adc <__aeabi_dcmplt>
 8013638:	3800      	subs	r0, #0
 801363a:	bf18      	it	ne
 801363c:	2001      	movne	r0, #1
 801363e:	e42b      	b.n	8012e98 <__ieee754_pow+0x228>
 8013640:	4642      	mov	r2, r8
 8013642:	464b      	mov	r3, r9
 8013644:	f7ec fe20 	bl	8000288 <__aeabi_dsub>
 8013648:	4632      	mov	r2, r6
 801364a:	463b      	mov	r3, r7
 801364c:	f7ed fa5a 	bl	8000b04 <__aeabi_dcmpge>
 8013650:	2800      	cmp	r0, #0
 8013652:	d1eb      	bne.n	801362c <__ieee754_pow+0x9bc>
 8013654:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80136f4 <__ieee754_pow+0xa84>
 8013658:	e6f7      	b.n	801344a <__ieee754_pow+0x7da>
 801365a:	469a      	mov	sl, r3
 801365c:	4b22      	ldr	r3, [pc, #136]	@ (80136e8 <__ieee754_pow+0xa78>)
 801365e:	459a      	cmp	sl, r3
 8013660:	f63f aef3 	bhi.w	801344a <__ieee754_pow+0x7da>
 8013664:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013668:	e715      	b.n	8013496 <__ieee754_pow+0x826>
 801366a:	ec51 0b10 	vmov	r0, r1, d0
 801366e:	4619      	mov	r1, r3
 8013670:	e7cf      	b.n	8013612 <__ieee754_pow+0x9a2>
 8013672:	491a      	ldr	r1, [pc, #104]	@ (80136dc <__ieee754_pow+0xa6c>)
 8013674:	2000      	movs	r0, #0
 8013676:	f7ff bb18 	b.w	8012caa <__ieee754_pow+0x3a>
 801367a:	2000      	movs	r0, #0
 801367c:	2100      	movs	r1, #0
 801367e:	f7ff bb14 	b.w	8012caa <__ieee754_pow+0x3a>
 8013682:	4630      	mov	r0, r6
 8013684:	4639      	mov	r1, r7
 8013686:	f7ff bb10 	b.w	8012caa <__ieee754_pow+0x3a>
 801368a:	460c      	mov	r4, r1
 801368c:	f7ff bb5e 	b.w	8012d4c <__ieee754_pow+0xdc>
 8013690:	2400      	movs	r4, #0
 8013692:	f7ff bb49 	b.w	8012d28 <__ieee754_pow+0xb8>
 8013696:	bf00      	nop
 8013698:	00000000 	.word	0x00000000
 801369c:	3fe62e43 	.word	0x3fe62e43
 80136a0:	fefa39ef 	.word	0xfefa39ef
 80136a4:	3fe62e42 	.word	0x3fe62e42
 80136a8:	0ca86c39 	.word	0x0ca86c39
 80136ac:	be205c61 	.word	0xbe205c61
 80136b0:	72bea4d0 	.word	0x72bea4d0
 80136b4:	3e663769 	.word	0x3e663769
 80136b8:	c5d26bf1 	.word	0xc5d26bf1
 80136bc:	3ebbbd41 	.word	0x3ebbbd41
 80136c0:	af25de2c 	.word	0xaf25de2c
 80136c4:	3f11566a 	.word	0x3f11566a
 80136c8:	16bebd93 	.word	0x16bebd93
 80136cc:	3f66c16c 	.word	0x3f66c16c
 80136d0:	5555553e 	.word	0x5555553e
 80136d4:	3fc55555 	.word	0x3fc55555
 80136d8:	fff00000 	.word	0xfff00000
 80136dc:	3ff00000 	.word	0x3ff00000
 80136e0:	4090cbff 	.word	0x4090cbff
 80136e4:	3f6f3400 	.word	0x3f6f3400
 80136e8:	3fe00000 	.word	0x3fe00000
 80136ec:	652b82fe 	.word	0x652b82fe
 80136f0:	3c971547 	.word	0x3c971547
 80136f4:	4090cc00 	.word	0x4090cc00

080136f8 <fabs>:
 80136f8:	ec51 0b10 	vmov	r0, r1, d0
 80136fc:	4602      	mov	r2, r0
 80136fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013702:	ec43 2b10 	vmov	d0, r2, r3
 8013706:	4770      	bx	lr

08013708 <scalbn>:
 8013708:	b570      	push	{r4, r5, r6, lr}
 801370a:	ec55 4b10 	vmov	r4, r5, d0
 801370e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013712:	4606      	mov	r6, r0
 8013714:	462b      	mov	r3, r5
 8013716:	b991      	cbnz	r1, 801373e <scalbn+0x36>
 8013718:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801371c:	4323      	orrs	r3, r4
 801371e:	d03d      	beq.n	801379c <scalbn+0x94>
 8013720:	4b35      	ldr	r3, [pc, #212]	@ (80137f8 <scalbn+0xf0>)
 8013722:	4620      	mov	r0, r4
 8013724:	4629      	mov	r1, r5
 8013726:	2200      	movs	r2, #0
 8013728:	f7ec ff66 	bl	80005f8 <__aeabi_dmul>
 801372c:	4b33      	ldr	r3, [pc, #204]	@ (80137fc <scalbn+0xf4>)
 801372e:	429e      	cmp	r6, r3
 8013730:	4604      	mov	r4, r0
 8013732:	460d      	mov	r5, r1
 8013734:	da0f      	bge.n	8013756 <scalbn+0x4e>
 8013736:	a328      	add	r3, pc, #160	@ (adr r3, 80137d8 <scalbn+0xd0>)
 8013738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801373c:	e01e      	b.n	801377c <scalbn+0x74>
 801373e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013742:	4291      	cmp	r1, r2
 8013744:	d10b      	bne.n	801375e <scalbn+0x56>
 8013746:	4622      	mov	r2, r4
 8013748:	4620      	mov	r0, r4
 801374a:	4629      	mov	r1, r5
 801374c:	f7ec fd9e 	bl	800028c <__adddf3>
 8013750:	4604      	mov	r4, r0
 8013752:	460d      	mov	r5, r1
 8013754:	e022      	b.n	801379c <scalbn+0x94>
 8013756:	460b      	mov	r3, r1
 8013758:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801375c:	3936      	subs	r1, #54	@ 0x36
 801375e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013762:	4296      	cmp	r6, r2
 8013764:	dd0d      	ble.n	8013782 <scalbn+0x7a>
 8013766:	2d00      	cmp	r5, #0
 8013768:	a11d      	add	r1, pc, #116	@ (adr r1, 80137e0 <scalbn+0xd8>)
 801376a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801376e:	da02      	bge.n	8013776 <scalbn+0x6e>
 8013770:	a11d      	add	r1, pc, #116	@ (adr r1, 80137e8 <scalbn+0xe0>)
 8013772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013776:	a31a      	add	r3, pc, #104	@ (adr r3, 80137e0 <scalbn+0xd8>)
 8013778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377c:	f7ec ff3c 	bl	80005f8 <__aeabi_dmul>
 8013780:	e7e6      	b.n	8013750 <scalbn+0x48>
 8013782:	1872      	adds	r2, r6, r1
 8013784:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013788:	428a      	cmp	r2, r1
 801378a:	dcec      	bgt.n	8013766 <scalbn+0x5e>
 801378c:	2a00      	cmp	r2, #0
 801378e:	dd08      	ble.n	80137a2 <scalbn+0x9a>
 8013790:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013794:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013798:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801379c:	ec45 4b10 	vmov	d0, r4, r5
 80137a0:	bd70      	pop	{r4, r5, r6, pc}
 80137a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80137a6:	da08      	bge.n	80137ba <scalbn+0xb2>
 80137a8:	2d00      	cmp	r5, #0
 80137aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80137d8 <scalbn+0xd0>)
 80137ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137b0:	dac1      	bge.n	8013736 <scalbn+0x2e>
 80137b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80137f0 <scalbn+0xe8>)
 80137b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137b8:	e7bd      	b.n	8013736 <scalbn+0x2e>
 80137ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80137be:	3236      	adds	r2, #54	@ 0x36
 80137c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80137c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80137c8:	4620      	mov	r0, r4
 80137ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013800 <scalbn+0xf8>)
 80137cc:	4629      	mov	r1, r5
 80137ce:	2200      	movs	r2, #0
 80137d0:	e7d4      	b.n	801377c <scalbn+0x74>
 80137d2:	bf00      	nop
 80137d4:	f3af 8000 	nop.w
 80137d8:	c2f8f359 	.word	0xc2f8f359
 80137dc:	01a56e1f 	.word	0x01a56e1f
 80137e0:	8800759c 	.word	0x8800759c
 80137e4:	7e37e43c 	.word	0x7e37e43c
 80137e8:	8800759c 	.word	0x8800759c
 80137ec:	fe37e43c 	.word	0xfe37e43c
 80137f0:	c2f8f359 	.word	0xc2f8f359
 80137f4:	81a56e1f 	.word	0x81a56e1f
 80137f8:	43500000 	.word	0x43500000
 80137fc:	ffff3cb0 	.word	0xffff3cb0
 8013800:	3c900000 	.word	0x3c900000

08013804 <with_errno>:
 8013804:	b510      	push	{r4, lr}
 8013806:	ed2d 8b02 	vpush	{d8}
 801380a:	eeb0 8a40 	vmov.f32	s16, s0
 801380e:	eef0 8a60 	vmov.f32	s17, s1
 8013812:	4604      	mov	r4, r0
 8013814:	f7fd f85e 	bl	80108d4 <__errno>
 8013818:	eeb0 0a48 	vmov.f32	s0, s16
 801381c:	eef0 0a68 	vmov.f32	s1, s17
 8013820:	ecbd 8b02 	vpop	{d8}
 8013824:	6004      	str	r4, [r0, #0]
 8013826:	bd10      	pop	{r4, pc}

08013828 <xflow>:
 8013828:	4603      	mov	r3, r0
 801382a:	b507      	push	{r0, r1, r2, lr}
 801382c:	ec51 0b10 	vmov	r0, r1, d0
 8013830:	b183      	cbz	r3, 8013854 <xflow+0x2c>
 8013832:	4602      	mov	r2, r0
 8013834:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013838:	e9cd 2300 	strd	r2, r3, [sp]
 801383c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013840:	f7ec feda 	bl	80005f8 <__aeabi_dmul>
 8013844:	ec41 0b10 	vmov	d0, r0, r1
 8013848:	2022      	movs	r0, #34	@ 0x22
 801384a:	b003      	add	sp, #12
 801384c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013850:	f7ff bfd8 	b.w	8013804 <with_errno>
 8013854:	4602      	mov	r2, r0
 8013856:	460b      	mov	r3, r1
 8013858:	e7ee      	b.n	8013838 <xflow+0x10>
 801385a:	0000      	movs	r0, r0
 801385c:	0000      	movs	r0, r0
	...

08013860 <__math_uflow>:
 8013860:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013868 <__math_uflow+0x8>
 8013864:	f7ff bfe0 	b.w	8013828 <xflow>
 8013868:	00000000 	.word	0x00000000
 801386c:	10000000 	.word	0x10000000

08013870 <__math_oflow>:
 8013870:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013878 <__math_oflow+0x8>
 8013874:	f7ff bfd8 	b.w	8013828 <xflow>
 8013878:	00000000 	.word	0x00000000
 801387c:	70000000 	.word	0x70000000

08013880 <_init>:
 8013880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013882:	bf00      	nop
 8013884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013886:	bc08      	pop	{r3}
 8013888:	469e      	mov	lr, r3
 801388a:	4770      	bx	lr

0801388c <_fini>:
 801388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801388e:	bf00      	nop
 8013890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013892:	bc08      	pop	{r3}
 8013894:	469e      	mov	lr, r3
 8013896:	4770      	bx	lr
