{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ba5222d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import os\n",
    "\n",
    "def resize_and_extract_frames(video_path, output_base_dir, frame_rate=1, new_size=(640, 480)):\n",
    "    \"\"\"\n",
    "    Extract and resize frames from a video at a specified interval.\n",
    "\n",
    "    Args:\n",
    "    - video_path: Path to the input video file.\n",
    "    - output_dir: Directory to save the extracted and resized frames.\n",
    "    - frame_rate: Interval of frames to extract (e.g., 1 for one frame per second).\n",
    "    - new_size: New size for resizing the frames, format (width, height).\n",
    "    \"\"\"\n",
    "    video_name = os.path.splitext(os.path.basename(video_path))[0]\n",
    "    output_dir = os.path.join(output_base_dir, video_name)\n",
    "    # Make sure output directory exists\n",
    "    if not os.path.exists(output_dir):\n",
    "        os.makedirs(output_dir)\n",
    "    \n",
    "    # Initialize video capture\n",
    "    cap = cv2.VideoCapture(video_path)\n",
    "    video_name = os.path.splitext(os.path.basename(video_path))[0]\n",
    "    count = 0\n",
    "    frame_id = 0\n",
    "\n",
    "    while cap.isOpened():\n",
    "        success, frame = cap.read()\n",
    "        if not success:\n",
    "            break\n",
    "        # Resize frame\n",
    "        resized_frame = cv2.resize(frame, new_size, interpolation=cv2.INTER_AREA)\n",
    "        # Extract frames based on the specified frame rate\n",
    "        if count % frame_rate == 0:\n",
    "            frame_filename = f\"{video_name}_frame_{frame_id:04d}.png\"\n",
    "            cv2.imwrite(os.path.join(output_dir, frame_filename), resized_frame)\n",
    "            frame_id += 1\n",
    "        count += 1\n",
    "\n",
    "    cap.release()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f58f2294",
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_videos_in_folder(folder_path, output_dir, frame_rate=1):\n",
    "    \"\"\"\n",
    "    Process all videos in a given folder.\n",
    "\n",
    "    Args:\n",
    "    - folder_path: Path to the folder containing video files.\n",
    "    - output_dir: Directory to save all extracted frames.\n",
    "    - frame_rate: Interval of frames to extract from each video.\n",
    "    \"\"\"\n",
    "    for video_file in os.listdir(folder_path):\n",
    "        if video_file.endswith(('.mp4', '.avi', '.mov')):  # Add other video formats if needed\n",
    "            video_path = os.path.join(folder_path, video_file)\n",
    "            print(f\"Processing {video_file}...\")\n",
    "            resize_and_extract_frames(video_path, output_dir, frame_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "70d1060a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing A.mp4...\n",
      "Processing B.mp4...\n",
      "Processing Bullseye.mp4...\n",
      "Processing C.mp4...\n",
      "Processing D.mp4...\n",
      "Processing Down.mp4...\n",
      "Processing E.mp4...\n",
      "Processing Eight.mp4...\n",
      "Processing F.mp4...\n",
      "Processing Five.mp4...\n",
      "Processing Four.mp4...\n",
      "Processing G.mp4...\n",
      "Processing Left.mp4...\n",
      "Processing Nine.mp4...\n",
      "Processing One.mp4...\n",
      "Processing Right.mp4...\n",
      "Processing S.mp4...\n",
      "Processing Seven.mp4...\n",
      "Processing Six.mp4...\n",
      "Processing Stop.mp4...\n",
      "Processing T.mp4...\n",
      "Processing Three.mp4...\n",
      "Processing Two.mp4...\n",
      "Processing U.mp4...\n",
      "Processing Up.mp4...\n",
      "Processing V.mp4...\n",
      "Processing W.mp4...\n",
      "Processing X.mp4...\n",
      "Processing Y.mp4...\n",
      "Processing Z.mp4...\n"
     ]
    }
   ],
   "source": [
    "folder_path = \"Videos_Dark\"  # Change this to the path of your folder containing videos\n",
    "output_directory = \"Extracted_Videos_Dark\"\n",
    "frame_rate = 1  # Adjust as needed\n",
    "\n",
    "process_videos_in_folder(folder_path, output_directory, frame_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0b34adea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "finished\n"
     ]
    }
   ],
   "source": [
    "print(\"finished\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "deab78e9-e5ab-4054-9fff-59e8bddab8ad",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
